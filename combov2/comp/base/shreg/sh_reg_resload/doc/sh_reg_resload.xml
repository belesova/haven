<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->


<!-- Component name -->
<component>Shift register with reset to init value</component>


<!-- Authors -->
<authors>
       <author login="spacekm">Michal Spacek</author>
</authors>


<!-- Features -->
<features>
	<item>uses sh_reg component</item>
	<item>reset to initial value of shiftregister</item>
	<item>reseting is done by restoring the init value from second shift register</item>
	<item>generic data width</item>
</features>



<!-- Short Block description -->
<description>

	<!-- THE MOST IMPORTANT PART!!! There should be about 8 rows which
	     fully describe the component and its main functions -->

	sh_reg_resload is a simple component, that added a reset feature to the sh_reg shift register.
	Interface is the same as the interface of the sh_reg, only the RESET signal is added.
	sh_reg_resload uses two sh_reg registers. The second register is used to restore the value of main sh_reg, when reset process is initiated.
	The reset process need as many clock cycles as is the bit width of the sh_reg.
	

</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>

	<!-- Generic description -->
	<generic_map>
		
		<generic name="NUM_BITS" type="integer" default="16">
			Number of bits in the register
		</generic>
		<generic name="INIT" type="std_logic_vector(15 downto 0)" default="0">
			init value
		</generic>
		<generic name="INIT_EXT00" type="std_logic_vector(63 downto 0)" default="0">
			extended init value
		</generic>
		
	</generic_map>

	<!-- Port description -->
	<port_map>

		<divider>Common signals</divider>		
		<port  name="CLK" dir="in" width="1">
			Clock
		</port>
		<port  name="RESET" dir="in" width="1">
			Reset
		</port>
		<port name="CE" dir="in" width="1">
			Clock enable
		</port>
		
		<divider>Input/output interface</divider> 		
		<port name="DIN" dir="in" width="1">
			Data in
		</port> 
		<port name="DOUT" dir="out" width="1">
			Data out
		</port>
		
	</port_map>

</interface>



<!-- HW BODY SECTION **************************************************** -->
<!-- information for HW designers, structure should be as follow          -->
<body>

	<h1>The reset feature</h1>
	<p>
	sh_reg_resload added simple reseting feature to the sh_reg component. sh_reg_resload uses two shift registers sh_reg. The second one is used for storing the initial value of the first register. While resetting, the value from the second register is copied to the first one - the value of the first register is restored. 


	</p>
			

<h1>Frequency and Resources usage</h1>

	<p>

        <!--Resources usage and max. frequency by Precision-->
	
		<tab sloupce="ccc">
			<tr>
				<th>Generic settings</th>
				<th>Slices (% of C6X slices)</th>
				<th>BlockRams (+ % of C6X BRAMs)</th>
			</tr>
			<tr>
				<th>16bit width</th> 
				<td>14 (0.99%))</td>
				<td>0 (0.0 %)</td>
			</tr>
			<tr>
				<th>64bit width</th> 
				<td>49 (3.48 %)</td>
				<td>0 (0.0 %)</td>
			</tr>
		<nazev>Chip utilization</nazev>
		</tab> 
	
	
  </p> 


<h1>Schemes</h1>
	
	<p>
		The block structure of the component is in the following figure.
		It's composed of two shift register sh_reg, one counter and other units as multipexor and logic gates
		<obr src="./fig/sh_reg_resload.fig">sh_reg_res architecture</obr>
	</p>
	
	<p>
		sh_reg_res is driven by FSM, which is described on the next picture
		<obr src="./fig/fsm.fig">FSM</obr>
	</p>

</body>

</source>
