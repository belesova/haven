<?xml version="1.0" encoding="ISO-8859-1"?>

<source>

<!-- Page name -->
<component>Generic asynchronous FIFO</component>


<!-- Authors worked on -->
<authors>
   <author login="martinek">Tomas Martinek</author>
   <author login="xmikus03">Martin Mikusek</author>
</authors>


<!-- Versions list -->
<versions>
</versions>


<!-- Bugs -->
<bugs>
</bugs>

<!-- What have to be done -->
<todo>
</todo>


<!-- Short Block description -->
<description>
   Generic FIFO with asynchronous write and read. Resizeable width (in steps by 1 bit) and variable
   number of items. Distributed RAM is used for FIFO implementation. This Fifo component allows
   detection how much is FIFO filled "Status information" (precission via generic parameter STATUS_WIDTH).
</description>

<!-- COMPONENT INTERFACE ************************************************* -->
<interface>

   <generic_map>

      <generic name="DATA_WIDTH" type="integer">
	 Data width
      </generic>

      <generic name="ITEMS" type="integer">
	 Items in fifo needed
      </generic>

      <generic name="DISTMEM_TYPE" type="integer" default="16">
	  Distributed Ram Type(capacity), only 16, 32 or 64 bits
      </generic>

      <generic name="STATUS_WIDTH" type="integer">
	 Precission of STATUS information
      </generic>

   </generic_map>


   <port_map>
      <port name="RESET" dir="in" width="1">
	 Global reset signal
      </port>


      <port name="CLK_WR" dir="in" width="1">
	 Write clock
      </port>

      <port name="DI" dir="in" width="DATA_WIDTH">
	 Input data
      </port>

      <port name="WR" dir="in" width="1">
	 Write request
      </port>

      <port name="FULL" dir="out" width="1">
	 FIFO full ('1' = yes)
      </port>

      <port name="STATUS" dir="out" width="STATUS_WIDTH">
	 Indicates how much is fifo full
      </port>


      <port name="CLK_RD" dir="in" width="1">
	 Read clock
      </port>

      <port name="DO" dir="out" width="DATA_WIDTH">
	 OUTPUT data
      </port>

      <port name="RD" dir="in" width="1">
	 Read request
      </port>

      <port name="EMPTY" dir="out" width="1">
	 FIFO empty ('1' = yes)
      </port>
   </port_map>

</interface>


<!-- CONSTANT SECTION ************************************************* -->

<constant>
</constant>


<!-- OPERATIONS SECTION ************************************************* -->

<operations>
</operations>


<!-- STRUCTURE ************************************************* -->
<structure src="./fig/block_struct.fig">
</structure>

<schemes>
</schemes>


<!-- *********************** Registers description  ********************* -->


<!-- BODY ************************************************* -->
<body>
   <p>
      Write operation has the standard behavior. DATA_OUT port is all the time set to actual
      output item in fifo. When fifo is empty, value of DATA_OUT is undefined. It can be very
      useful to get information about fifo fullnes (when FULL signal is very rough information).
      For this reason, the STATUS vector is generated. STATUS has generic precission (derived from STATUS_WIDTH).
   </p>

   <p>
      One only difference from synchronous FIFO is FULL and EMPTY signal generation. Because of different read
      and write clock there must be read and write addres encoded to graycode (next address differs in only one bit)
      before subtraction.
   </p>
</body>

</source>
