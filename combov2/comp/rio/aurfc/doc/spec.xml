<?xml version="1.0" encoding="ISO-8859-1"?>

<source>

    <!-- Page name -->
    <component>Aurora with Flow Control (Aurfc)</component>


    <!-- Authors worked on -->
    <authors>
        <author login="pazdera">Jan Pazdera</author>
    </authors>


    <!-- Versions list -->
    <versions>
        <version id="AURFC_01_02">
            <item>LocalLink interface has been replaced by FrameLink interface</item>
        </version>
        <version id="AURFC_01_01">
            <item>Status of TX and RX fifo has been added to the interface. Several bug fixes.</item>
        </version>
        <version id="AURFC_01_00">
            <item>First version has been released.</item>
        </version>
    </versions>


    <!-- Bugs -->
    <bugs>
    </bugs>

    <!-- What have to be done -->
    <todo>
    </todo>


    <!-- Short Block description -->
    <description>

        This component implements FrameLink comunication protocol via Auroroa extended with 
        configurable flow controller (XON/XOFF).

    </description>

    <!-- COMPONENT INTERFACE ************************************************* -->
    <interface>

        <generic_map>
            <generic name="RX_IS_HEADER"      type="boolean" default="true">
                This generic is necassary for correct Frame reconstruction on receive side.
                It determines whether the frame contains a header or not.
            </generic>
            <generic name="RX_IS_FOOTER"      type="boolean" default="true">
                This generic is necassary for correct Frame reconstruction on receive side.
                It determines whether the frame contains a footer or not.
            </generic>
            <generic name="TX_FIFO_ITEMS"      type="integer" default="512">
                TX buffer size
            </generic>
            <generic name="TX_STATUS_WIDTH"    type="integer" default="3">
                TX STATUS port width
            </generic>
            <generic name="RX_FIFO_ITEMS"      type="integer" default="512">
                RX buffer size
            </generic>
            <generic name="RX_STATUS_WIDTH"    type="integer" default="3">
                RX STATUS port width
            </generic>
            <generic name="XON_LIMIT"          type="std_logic_vector(2 downto 0)" default="011">
                Level of RX buffer filling to generate XON message.
            </generic>
            <generic name="XOFF_LIMIT"         type="std_logic_vector(2 downto 0)" default="110">
                Level of RX buffer filling to generate XOFF message.
            </generic>
            <generic name="DATA_WIDTH"         type="integer" default="64">
                Size of transported data. It can only take values 32, 64, 128 ...
            </generic>
            <generic name="LOOPBACK" type="std_logic_vector(1 downto 0)" default="00">
                "00": no loopback (standart mode), "01": parallel loopbach, "10": serial loopback
            </generic>
        </generic_map>

        <port_map>

            <!-- Port description -->
            <port   name="TXP" dir="out" width="1">
                Transmit MGT port
            </port>
            <port   name="RESET"          dir="in"    width="1">
                Design reset
            </port>
            <port   name="REFCLK"         dir="in"  width="1">
                RocketIO clock (connected to xtal directly - no BUFGs or DCMs)
            </port>
            <port   name="USRCLK"         dir="in"  width="1">
                Clock to clock transmit and receive logic
            </port>
            <port   name="USRCLK2"        dir="in"  width="1">
                Clock to clock transmit and receive logic (USRCLK halfrated and shifted)
            </port>
            <port   name="CMDCLK"         dir="in"  width="1">
                Clock to clock command protocol interface 
            </port>
      
            <port   name="TX_D"             dir="in"    width="DATA_WIDTH">
                Outgoing data (Ascending bit order).
            </port>
            <port   name="TX_REM"           dir="in"    width="log2(DATA_WIDTH/8)">
                Specifies the number of valid bytes in the last data beat; valid only when RX_EOF_N is asserted.
            </port>
            <port   name="TX_SRC_RDY_N"     dir="in"    width="1">
                Asserted (low) when LocalLink signals from the source are valid.
            </port>
            <port   name="TX_SOF_N"         dir="in"    width="1">
                Signals the start of the incoming frame (Active-low, asserted for a single user clock cycle).
            </port>
            <port   name="TX_SOP_N"         dir="in"    width="1">
                Signals the start of the incoming packet (the frame's sub-block) (Active-low, asserted for a single user clock cycle).
            </port>
            <port   name="TX_EOF_N"         dir="in"    width="1">
                Signals the end of the incoming frame (Active-low, asserted for a single user clock cycle).
            </port>
            <port   name="TX_EOP_N"         dir="in"    width="1">
                Signals the end of the incoming packet (the frame's sub-block) (Active-low, asserted for a single user clock cycle).
            </port>
            <port   name="TX_DST_RDY_N"     dir="out"   width="1">
                Asserted (low) during clock edges when signals from the source will be accepted (if TX_SRC_RDY_N is also asserted).
            </port>
      
            <port   name="RX_D"             dir="out"   width="DATA_WIDTH">
                Incoming data from channel partner (Ascending bit order).
            </port>
            <port   name="RX_REM"           dir="out"   width="log2(DATA_WIDTH/8)">
                Specifies the number of valid bytes in the last data beat; valid only when RX_EOF_N is asserted.
            </port>
            <port   name="RX_SRC_RDY_N"     dir="out"   width="1">
                Asserted (low) when data and control signals from an Aurora core are valid.
            </port>
            <port   name="RX_SOF_N"         dir="out"   width="1">
                Signals the start of the incoming frame (Active-low, asserted for a single user clock cycle).
            </port>
            <port   name="RX_SOP_N"         dir="in"    width="1">
                Signals the start of the incoming packet (the frame's sub-block) (Active-low, asserted for a single user clock cycle).
            </port>
            <port   name="RX_EOF_N"         dir="out"   width="1">
                Signals the end of the incoming frame (Active-low, asserted for a single user clock cycle).
            </port>
            <port   name="RX_EOP_N"         dir="in"    width="1">
                Signals the end of the incoming packet (the frame's sub-block) (Active-low, asserted for a single user clock cycle).
            </port>
            <port   name="RX_DST_RDY_N"     dir="in"    width="1">
                Asserted (low) when the destination logic is ready to receive data.
            </port>

            <port   name="HARD_ERROR"     dir="out"   width="1">
                Hard error detected. (Active-high, asserted until Aurora core resets).
            </port>
            <port   name="SOFT_ERROR"     dir="out"   width="1">
                Soft error detected in the incoming serial stream. (Active-high, asserted for a single clock).
            </port>
            <port   name="FRAME_ERROR"    dir="out"   width="1">
                Channel frame/protocol error detected. This port is active-high and is asserted for a single clock.
            </port>

            <port   name="TX_STATUS"      dir="out"   width="TX_STATUS_WIDTH">
                TX fifo status.
            </port>
            <port   name="RX_STATUS"      dir="out"   width="RX_STATUS_WIDTH">
                RX fifo status.
            </port>
            <port   name="CHANNEL_UP"     dir="out"   width="1">
                Signals whether Aurora channel is up. Channel is up when asserted.
            </port>

            <port   name="RXN"            dir="in"    width="DATA_WIDTH/32">
                Negative differential serial data input pin.
            </port>
            <port   name="RXP"            dir="in"    width="DATA_WIDTH/32">
                Positive differential serial data input pin.
            </port>
            <port   name="TXN"            dir="out"   width="DATA_WIDTH/32">
                Negative differential serial data output pin.
            </port>
            <port   name="TXP"            dir="out"   width="DATA_WIDTH/32">
                Positive differential serial data output pin.
            </port>

        </port_map>

    </interface>

    <!-- BODY ************************************************* -->
    <body>
        <p>
            Component is designated to transport data via Aurora interface supporting configurable flow 
            control (XON/XOFF). Flow control can be configured
            by XON_LIMIT and XOFF_LIMIT generics which corresponds to 3-bit-wide status of RX buffer.
        </p>

        <h1>Framing Efficiency</h1>
        <p>
            Following table shows the efficiency for an 8-byte, 4-lane channel and illustrates that the efficiency increases as the length
            of channel frames increases. See the Aurora user guide (ug61.doc) for more information.
        </p>

        <pre>
        User Data Bytes         Efficiency %
                    100                92.92
                  1,000                99.14
                 10,000                99.81
        </pre>
        
        <h1>Data Remainder</h1>
        <p>
            LocalLink allows the last word of a frame to be a partial word. This lets a frame contain any number of bytes, regardless of the
            word size. The TX/RX_REM bus is used to indicate the number of valid bytes in the final word of the frame. The bus is only used
            when TX/RX_EOF_N is asserted. Aurora uses encoded REM values. REM is the binary encoding of the number of valid bytes minus 1. A
            zero REM value indicates the left-most byte in the TX/RX_D port (the MSB) is the only valid byte in the word. 
            Following table shows the mapping between TX/RX_REM values and valid byte counts for the TX/RX_D port.
        </p>

        <pre>
            TX_REM Value        Number of Valid Bytes
                       0                            1
                       1                            2
                       2                            3
                       3                            4
                                    .
                                    .
                                    .
                                    .
                                    .
                                    .
                       n                          n+1
        </pre>
            
        <h1>Architectures</h1>
        <p>
            Aurfc design must include the right Aurora core for current data width and other options. So, you
            must specify the right Aurfc architecture option in your Modules.tcl.
        </p>

        <p>
            List of available architectures:

            <ul>
                <li>
                    4BYTE - For DATA_WIDTH = 32
                </li>
                <li>
                    8BYTE - For DATA_WIDTH = 64 (two RIO lanes bonded)
                </li>
            </ul>
        </p>
        
    <h1>Design UCF file constrains (Precision)</h1>
    <p>
        It is necassary to include following lines into your design .ucf file (depending on 
        used platform and RIO port):
    </p>

    <p>
        <b>For Combo6X VP50, RIO port 0:</b>
        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X122Y168:SLICE_X123Y169;

       INST YourComponentName_lane_0_mgt_i LOC=GT_X7Y1;
        </pre>
    </p>

    <p>
        <b>For Combo6X VP50, RIO port 1:</b>
        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X110Y168:SLICE_X111Y169;

       INST YourComponentName_lane_0_mgt_i LOC=GT_X6Y1;
        </pre>
    </p>

    <p>
        <b>For SFPRO, RIO port 0:</b>
        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X74Y0:SLICE_X75Y1;

       INST YourComponentName_lane_0_mgt_i LOC=GT_X3Y0;
        </pre>
    </p>

    <p>
        <b>For SFPRO, RIO port 1:</b>

        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X50Y0:SLICE_X51Y1;

       INST YourComponentName_lane_0_mgt_i LOC=GT_X2Y0;
        </pre>
    </p>

    <p>
        In case you use 2 lane aurora design, include these lines into your .ucf file:
    </p>

    <p>
        <b>For Combo6X, RIO ports 0 and 1:</b>


        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X110Y168:SLICE_X111Y169;

       INST *YourInstanceName_lane_1_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_1_GRP";
       AREA_GROUP "PHASE_ALIGN_1_GRP" RANGE=SLICE_X122Y168:SLICE_X123Y169;

       INST *YourInstanceName_lane_0_mgt_i LOC=GT_X6Y1;

       INST *YourInstanceName_lane_1_mgt_i LOC=GT_X7Y1;

        </pre>
    </p>

    <p>
        <b>For Combo6X VP50, RIO ports 2 and 3 (lanes to VP7):</b>

        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X122Y0:SLICE_X123Y1;

       INST *YourInstanceName_lane_1_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_1_GRP";
       AREA_GROUP "PHASE_ALIGN_1_GRP" RANGE=SLICE_X110Y0:SLICE_X111Y1;

       INST *YourInstanceName_lane_0_mgt_i LOC=GT_X7Y0;

       INST *YourInstanceName_lane_1_mgt_i LOC=GT_X6Y0;
        </pre>
    </p>

    <p>
        <b>For Combo6X VP7, RIO ports 2 and 3 (lanes to VP50):</b>

        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X38Y72:SLICE_X39Y73;

       INST *YourInstanceName_lane_1_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_1_GRP";
       AREA_GROUP "PHASE_ALIGN_1_GRP" RANGE=SLICE_X26Y72:SLICE_X27Y73;

       INST *YourInstanceName_lane_0_mgt_i LOC=GT_X2Y1;

       INST *YourInstanceName_lane_1_mgt_i LOC=GT_X1Y1;
        </pre>
    </p>

    <p>
        <b>For SFPRO, RIO ports 0 and 1:</b>

        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X50Y0:SLICE_X51Y1;

       INST *YourInstanceName_lane_1_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_1_GRP";
       AREA_GROUP "PHASE_ALIGN_1_GRP" RANGE=SLICE_X74Y0:SLICE_X75Y1;

       INST *YourInstanceName_lane_0_mgt_i LOC=GT_X2Y0;
       INST *YourInstanceName_lane_1_mgt_i LOC=GT_X3Y0;
        </pre>
    </p>

    <h1>Design UCF file constrains (XST)</h1>
    <p>
        Constraints for XST are similar. You must use different instance name: 
    </p>

    <p>
        <pre>
       INST *YourInstanceName*lane_0_phase_align_i*ENA_CALIGN_REC AREA_GROUP="PHASE_ALIGN_0_GRP";
       INST *YourInstanceName*lane_1_phase_align_i*ENA_CALIGN_REC AREA_GROUP="PHASE_ALIGN_1_GRP";
        </pre>
    </p>

    <h1>More Auroras in one FPGA</h1>
    <p>
        Be careful, that each AREA_GROUP constraint has different name. You can increment the number, e.g. AREA_GROUP="PHASE_ALIGN_3_GRP"
        etc.
    </p>


    </body>

</source>
