<source>

    <component>Aurora with Virtual Channels (AURVC)</component>

    <authors>
        <author login="pazdera">Jan Pazdera</author>
    </authors>

    <features>
        <item> Flow control </item>
        <item> Virtual channels </item>
    </features>

    <description>

        This component implements FrameLink comunication protocol via Aurora virtual channels extended with 
        configurable flow controller (XON/XOFF). Each link direction (uplink and downlink) can distributed 
        into an optional number (1-255) of virtual channels (VC). Each VC is idependent and can be configured separately.
        To put it more simply, each VC corresponds to one AURFC.

    </description>

    <interface>

        <generic_map>
            <divider> Base generics </divider>
            <generic name="LANES"         type="integer"   default="none">
                Number of used Aurora lanes. Available values are 1, 2.
            </generic>
            <generic name="DATA_PATHS"         type="integer"   default="none">
                Size of transported data in bytes. Available values are 2, 4, 8.
            </generic>
            <generic name="TX_CHANNELS"       type="integer"    default="none">
                Number of TX Buffers.
            </generic>
            <generic name="RX_CHANNELS"       type="integer"    default="none">
                Number of RX Buffers.
            </generic>
            <divider> BUFFERS_PARAM record </divider>
            <divider> TXBUF_PARAMS sub-record </divider>
            <generic name="BUFFERS_PARAM.TXBUF_PARAMS.CHANNEL_SIZE"      type="integer" default="none">
                TX Buffer size. If the CHANNEL_SIZE = 0 the TX logic will be omited for this channel.
            </generic>
            <generic name="BUFFERS_PARAM.TXBUF_PARAMS.BYTE_QUOTA"      type="integer"   default="none">
                TX Buffer Byte Quota. See the Channel Arbitration section.
            </generic>
            <divider> RXBUF_PARAMS sub-record </divider>
            <generic name="BUFFERS_PARAM.RXBUF_PARAMS.CHANNEL_SIZE"      type="integer" default="none">
                RX Buffer size. If the CHANNEL_SIZE = 0 the RX logic will be omited for this channel.
            </generic>
            <generic name="BUFFERS_PARAM.RXBUF_PARAMS.XON_LIMIT"          type="std_logic_vector(2 downto 0)"   default="none">
                RX Buffer XON_LIMIT. See the Channel Flow Control section.
            </generic>
            <generic name="BUFFERS_PARAM.RXBUF_PARAMS.XOFF_LIMIT"         type="std_logic_vector(2 downto 0)"   default="none">
                RX Buffer XOFF_LIMIT. See the Channel Flow Control section.
            </generic>
            <generic name="BUFFERS_PARAM.RXBUF_PARAMS.RX_IS_HEADER"      type="boolean" default="true">
                This generic is necassary for correct Frame reconstruction on receive side.
                It determines whether the frame contains a header or not.
            </generic>
            <generic name="BUFFERS_PARAM.RXBUF_PARAMS.RX_IS_FOOTER"      type="boolean" default="true">
                This generic is necassary for correct Frame reconstruction on receive side.
                It determines whether the frame contains a footer or not.
            </generic>
            <divider> Other generics </divider>
            <generic name="LOOPBACK" type="std_logic_vector(1 downto 0)" default="00">
                "00": no loopback (standart mode), "01": parallel loopbach, "10": serial loopback
            </generic>
        </generic_map>

        <port_map>

            <divider> Clocks and reset </divider>
            <port name="RESET" dir="in" width="1">
                Design reset
            </port>
            <port name="REFCLK" dir="in" width="1">
                RocketIO clock (connected to xtal directly - no DCMs). It is necessary to insert the BUFG buffer.
            </port>
            <port name="USRCLK" dir="in" width="1">
                Clock to clock transmit and receive logic
            </port>
            <port name="USRCLK2" dir="in" width="1">
                Clock to clock transmit and receive logic (USRCLK halfrated and shifted)
            </port>
            <port name="FLCLK" dir="in" width="1">
                Clock to clock FrameLink interface 
            </port>

            <divider> FrameLink TX interface </divider>
            <port name="TX_D" dir="in" width="TX_CHANNELS*(DATA_PATHS*8)">
                Outgoing data (Ascending bit order).
            </port>
            <port name="TX_REM" dir="in" width="TX_CHANNELS*log2(DATA_PATHS)">
                Specifies the number of valid bytes in the last data beat; valid only when RX_EOF_N is asserted.
            </port>
            <port name="TX_SRC_RDY_N" dir="in" width="TX_CHANNELS">
                Asserted (low) when LocalLink signals from the source are valid.
            </port>
            <port name="TX_SOF_N" dir="in" width="TX_CHANNELS">
                Signals the start of the incoming frame (Active-low, asserted for a single user clock cycle).
            </port>
            <port name="TX_SOP_N" dir="in" width="TX_CHANNELS">
                Signals the start of the incoming packet (the frame's sub-block) (Active-low, asserted for a single user clock cycle).
            </port>
            <port name="TX_EOF_N" dir="in" width="TX_CHANNELS">
                Signals the end of the incoming frame (Active-low, asserted for a single user clock cycle).
            </port>
            <port name="TX_EOP_N" dir="in" width="TX_CHANNELS">
                Signals the end of the incoming packet (the frame's sub-block) (Active-low, asserted for a single user clock cycle).
            </port>
            <port name="TX_DST_RDY_N" dir="out" width="TX_CHANNELS">
                Asserted (low) during clock edges when signals from the source will be accepted (if TX_SRC_RDY_N is also asserted).
            </port>
      
            <divider> FrameLink RX interface </divider>
            <port name="RX_D" dir="out" width="RX_CHANNELS*(DATA_PATHS*8)">
                Incoming data from channel partner (Ascending bit order).
            </port>
            <port name="RX_REM" dir="out" width="RX_CHANNELS*log2(DATA_PATHS)">
                Specifies the number of valid bytes in the last data beat; valid only when RX_EOF_N is asserted.
            </port>
            <port name="RX_SRC_RDY_N" dir="out" width="RX_CHANNELS">
                Asserted (low) when data and control signals from an Aurora core are valid.
            </port>
            <port name="RX_SOF_N" dir="out" width="RX_CHANNELS">
                Signals the start of the incoming frame (Active-low, asserted for a single user clock cycle).
            </port>
            <port name="RX_SOP_N" dir="in" width="RX_CHANNELS">
                Signals the start of the incoming packet (the frame's sub-block) (Active-low, asserted for a single user clock cycle).
            </port>
            <port name="RX_EOF_N" dir="out" width="RX_CHANNELS">
                Signals the end of the incoming frame (Active-low, asserted for a single user clock cycle).
            </port>
            <port name="RX_EOP_N" dir="in" width="RX_CHANNELS">
                Signals the end of the incoming packet (the frame's sub-block) (Active-low, asserted for a single user clock cycle).
            </port>
            <port name="RX_DST_RDY_N" dir="in" width="RX_CHANNELS">
                Asserted (low) when the destination logic is ready to receive data.
            </port>

            <divider> Status interface </divider>
            <port name="HARD_ERROR" dir="out" width="1">
                Hard error detected. (Active-high, asserted until Aurora core resets).
            </port>
            <port name="SOFT_ERROR" dir="out" width="1">
                Soft error detected in the incoming serial stream. (Active-high, asserted for a single clock).
            </port>
            <port name="FRAME_ERROR" dir="out" width="1">
                Channel frame/protocol error detected. This port is active-high and is asserted for a single clock.
            </port>

            <port name="TX_STATUS" dir="out" width="TX_STATUS_WIDTH">
                TX fifo status.
            </port>
            <port name="RX_STATUS" dir="out" width="RX_STATUS_WIDTH">
                RX fifo status.
            </port>
            <port name="CHANNEL_UP" dir="out" width="1">
                Signals whether Aurora channel is up. Channel is up when asserted.
            </port>

            <divider> RocketIO pins </divider>
            <port name="RXN" dir="in" width="LANES">
                Negative differential serial data input pin.
            </port>
            <port name="RXP" dir="in" width="LANES">
                Positive differential serial data input pin.
            </port>
            <port name="TXN" dir="out" width="LANES">
                Negative differential serial data output pin.
            </port>
            <port name="TXP" dir="out" width="LANES">
                Positive differential serial data output pin.
            </port>

        </port_map>

</interface>

<body>

        <h1>AURVC component description</h1>
        <p>
        
            AURVC component implements FrameLink comunication protocol via Aurora virtual channels extended with configurable flow
            controller (XON/XOFF). Each link direction (uplink and downlink) can distributed into an optional number (1-255) of half-duplex
            virtual channels (VC). Each VC is independent and can be configured separately. To put it more simply, each VC corresponds to
            one AURFC. The base scheme of two connected AURVC components (AURCV 1 and 2) is shown in the following picture. There are N VCs
            from AURVC 1 to AURVC 2 and M VCs from AURVC 2 to AURVC 1.

        </p>
        
        <p>
            <obr src="./fig/base_struct.fig" mag="0.5">Two connected AURVC components</obr>
        </p>

        <p>

            AURVC comprises of three main sub-components: TX Buffer(s), RX Buffer(s) and AURVC core. TX/RX Buffers performs FrameLink
            protocol and outgoing/incoming frames buffering. Each buffer can be configured separately. TX and RX Buffers options follows:
        
        </p>

        <h3>TX Buffer Options</h3>
        <p>
            
            <ul>
                <li>
                    CHANNEL_SIZE (integer) - Number of items in channel buffer
                </li>
                <li>
                    BYTE_QUOTA (integer) - Byte quota for this channel (see the 'Channel Arbitration' section for more details)
                </li>
            </ul>
            
        </p>

        <h3>RX Buffer Options</h3>
        <p>
            
            <ul>
                <li>
                    CHANNEL_SIZE (integer) - Number of items in channel buffer
                </li>
                <li>
                    XON_LIMIT (std_logic_vector (2 downto 0)) - XON limit for this channel (see the 'Channel Flow Control' section)
                </li>
                <li>
                    XOFF_LIMIT (std_logic_vector (2 downto 0)) - XOFF limit for this channel (see the 'Channel Flow Control' section)
                </li>
                <li>
                    RX_IS_HEADER (boolean) - Channel includes header (see the 'Frame Structure' section)
                </li>
                <li>
                    RX_IS_FOOTER (boolean) - Channel includes footer (see the 'Frame Structure' section)
                </li>
            </ul>
            
        </p>

        <p>

            The main functionality is implemented in AURVC core sub-component. It performs an arbitration of channels that request
            transmition, flow control and Aurora module handling. It is composed of Aurora Module, TX Channel Controller (TXCC) and RX
            Channel Controller (RXCC). The Aurora Module performs the Aurora protocol over RocketIO Multi-Gigabit Transceiver. TXCC provides
            TX Buffer arbitration and frame transmition via Aurora Module. RXCC performs frame reception from Aurora Module and channel flow
            control to avoid RX Buffer overflow causing frame discarding.
            
        </p>

        <h1>Frame Structure</h1>
        <p>

            AURVC component performs the FrameLink frame transmition via Virtual Channel (VC). Each frame is composed of at most 3 parts:
            Header, Payload and Footer. Header and Footer parts are optional. The FRAME PART is called COMPLETE when it is completely stored
            in the buffer (i.e. TX_EOP_N signal has been asserted). The FRAME is called COMPLETE when all its parts are complete. Each
            complete part can be transmitted separately even the whole frame is not complete. Please, see the FrameLink documentation for
            more information.
            
        </p>

        <h1>Channel Arbitration</h1>
        <p>

            If the VC's TX buffer holds at least one complete frame part, it is called READY. If a VC is not ready then it will be called
            EMPTY. If the VC is ready, doesn't exceed its BYTE QUOTA and the WOKEN VC has less Channel Number, then it is called ACTIVE. The
            TX Channel Controller (TXCC) scans all active VCs and assigns the link to one of them according to the following rule. All
            active VCs are sorted in the ACTIVE LIST in ascending order according to their Channel Number. The link is assigned to the first
            VC in active-list to transmit one frame part. The VC which is currently transmitting is called WOKEN, the other VCs in
            active-list are called SLEEPING. If the woken VC exceeds its byte quota during the transmition, it will be removed from the
            active-list as soon as it finishes its transmition. If the woken VC exceeds its byte quota during the transmition, it will be
            removed from the active-list as soon as it finishes its transmition. If the woken VC becomes empty after the transmittion, it
            will be removed from the ready-list. If there is no VC in active-list, the byte quota status of each VC will be reset and the
            process will continue from the beggining. If there is no VC in ready-list, the link will be idle until any VC becomes ready. The
            whole arbitration process is shown in the following picture.
            
        </p>
        
        <p>
            <obr src="./fig/arbit.fig" mag="0.5">AURVC TX channel arbitration</obr>
        </p>

        <h1>Channel Flow Control</h1>
        <p>

            The AURVC provides configurable flow control (XON/XOFF) for each VC. When the RX Buffer is becoming full (the full status
            overreach the XOFF_LIMIT), the RXCC will send the XOFF message via Aurora to the joint AURVC that provides the transmition. Upon
            the XOFF reception, the TXCC in joint AURVC stops transmition via the corresponding VC. When the full status of RX Buffer is
            equal to the XON_LIMIT, the RXCC will send the XON message to the joint AURVC the resume transmittion via the corresponding VC.
            You can specify the XON_LIMIT and XOFF_LIMIT by the XON_LIMIT and XOFF_LIMIT generics which correspond to the 3-bit-wide status
            of RX Buffer. To get the proper value for the  XOFF_LIMIT generic you must take into account the Aurora Framing
            Latency. You must assure yourself that the RX Buffer can not overflow until the corresponding VC is stopped (the 'Stopping
            Time'). You can calculate the Stopping Time this way:


            <pre>
           Stopping Time = XOFF Message Transmition Latency + Frame Transmition Latency
            </pre>

        </p>

        <p>

            <ul>
                <li>
                    XON/XOFF Message Transmition Latency - the time it takes to transmit the XOFF message to the joint TXCC
                </li>
                <li>
                    Frame Transmition Latency - the time it takes the frame to get from the TX Buffer to the RX Buffer
                </li>
            </ul>

            Please, see the Aurora Framing Interface Latency section to find out the maximum Aurora latencies.
            
        </p>

        <p>
            The value of the XON_LIMIT generic must be less than the XOFF_LIMIT! Recommended value is:

            <pre>
           XON_LIMIT = XOFF_LIMIT - 1
            </pre>
        </p>

        <h1>AURVC Architectures</h1>
        <p>

            AURVC design must include the proper Aurora core for current data width. You must specify the right AURVC architecture option in
            your Modules.tcl. The list of available architectures is listed below:

        </p>

        <p>
            List of available architectures:

            <ul>
                <li>
                    2BYTE - For DATA_WIDTH = 16 (one RIO lane)
                </li>
                <li>
                    4BYTE1LANE - For DATA_WIDTH = 32 (one RIO lane)
                </li>
                <li>
                    4BYTE2LANE - For DATA_WIDTH = 32 (two RIO lanes)
                </li>
                <li>
                    8BYTE - For DATA_WIDTH = 64 (two RIO lanes bonded)
                </li>
            </ul>
        </p>
        
        <h1>Aurora Framing Interface Latency</h1>
        <p>

            This section outlines expected latency for the Aurora interface in terms of USER_CLK cycles for 2-Byte Architectures, 4-Byte
            Architectures and 8-Byte Architectures. Note that these figures do not include the latency incurred due to the length of the
            serial connection between each side of the Aurora channel. The USER_CLK cycle frequency is 125MHz for 2BYTE architecture and
            62.5MHz for other architectures.

        </p>
        
        <p>
            <tab sloupce="lcc">
                <tr>
                    <th>AURVC architecture</th>
                    <th>Min Latency Time</th>
                    <th>Max Latency Time</th>
                </tr>
                <tr>
                    <td>2-Byte</td>
                    <td>54.5</td>
                    <td>57.5</td>
                </tr>
                <tr>
                    <td>4-Byte</td>
                    <td>57.5</td>
                    <td>60.5</td>
                </tr>
                <tr>
                    <td>8-Byte</td>
                    <td>57.5</td>
                    <td>60.5</td>
                </tr>
                <nazev>Frame Transmition Latency</nazev>
            </tab>

            <tab sloupce="lcc">
                <tr>
                    <th>AURVC architecture</th>
                    <th>Min Latency Time</th>
                    <th>Max Latency Time</th>
                </tr>
                <tr>
                    <td>2-Byte</td>
                    <td>46.5</td>
                    <td>49.5</td>
                </tr>
                <tr>
                    <td>4-Byte</td>
                    <td>49.5</td>
                    <td>52.5</td>
                </tr>
                <tr>
                    <td>8-Byte</td>
                    <td>49.5</td>
                    <td>52.5</td>
                </tr>
                <nazev>XON/XOFF Message Transmition Latency</nazev>
            </tab>

        </p>

        <h1>Framing Efficiency</h1>
        <p>

            Following table shows the efficiency for an 8-byte, 4-lane channel and illustrates the the efficiency increases as the length
            of channel frames increases. See the Aurora user guide (ug61.doc) for more information.


            <pre>
        User Data Bytes         Efficiency %
                    100                92.92
                  1,000                99.14
                 10,000                99.81
             </pre>
        </p>
        
<h1>Frequency and Resources usage</h1>

	<p>

        <!--Resources usage and max. frequency by Precision-->
	
		<tab sloupce="ccc">
			<tr>
				<th>Generic settings</th>
				<th>Slices (% of C6X slices)</th>
				<th>BlockRams (+ % of C6X BRAMs)</th>
			</tr>
			<tr>
                <th>LANES = 1, DATA_PATHS=2, TX/RX_CHANNELS=2, CHANNEL_SIZE(all channels)=1023</th> 
				<td>471(1.99%)</td>
				<td>8(3.45%)</td>
			</tr>
			<tr>
                <th>LANES = 1, DATA_PATHS=4, TX/RX_CHANNELS=2, CHANNEL_SIZE(all channels)=1023</th> 
				<td>728(3.08%)</td>
				<td>8(3.45%)</td>
			</tr>
			<tr>
                <th>LANES = 2, DATA_PATHS=4, TX/RX_CHANNELS=2, CHANNEL_SIZE(all channels)=1023</th> 
				<td>771(3.26%)</td>
				<td>8(3.45%)</td>
			</tr>
			<tr>
                <th>LANES = 2, DATA_PATHS=8, TX/RX_CHANNELS=2, CHANNEL_SIZE(all channels)=1023</th> 
				<td>1144(4.84%)</td>
				<td>16(6.90%)</td>
			</tr>
		<nazev>Chip utilization</nazev>
		</tab> 
	
		<tab sloupce="ccc">
			<tr>
				<th>Generic settings</th>
                <th>Max.frequency by Precision (USRCLK(2)/FLCLK)</th>
				<th>Frequency tested in HW (USRCLK(2)/FLCLK)</th>
			</tr>
			<tr>
				<th>LANES = 1, DATA_PATHS=2, TX/RX_CHANNELS=2, CHANNEL_SIZE(all channels)=1023</th> 
                <td>112/225 MHz</td>
                <td>125/100 MHz</td>
			</tr>
			<tr>
                <th>LANES = 1, DATA_PATHS=4, TX/RX_CHANNELS=2, CHANNEL_SIZE(all channels)=1023</th> 
                <td>112/225 MHz</td>
                <td>62,5/100 MHz</td>
			</tr>
			<tr>
                <th>LANES = 2, DATA_PATHS=4, TX/RX_CHANNELS=2, CHANNEL_SIZE(all channels)=1023</th> 
                <td>112/225 MHz</td>
                <td>62,5/100 MHz</td>
			</tr>
			<tr>
                <th>LANES = 2, DATA_PATHS=8, TX/RX_CHANNELS=2, CHANNEL_SIZE(all channels)=1023</th> 
                <td>112/225 MHz</td>
                <td>62,5/100 MHz</td>
			</tr>
		<nazev>Maximal frequency</nazev>
		</tab> 
	
  </p> 

        <h1>Related components</h1>
	<p>
		<ref_comp ref="aurfc" tag_id="HEAD">AURFC - Aurora with Flow control</ref_comp>
	</p>

    <h1>Design UCF file constrains (Precision)</h1>
    <p>
        It is necassary to include following lines into your design .ucf file (depending on 
        used platform and RIO port):
    </p>

    <p>
        <b>For Combo6X VP50, RIO port 0:</b>
        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X122Y168:SLICE_X123Y169;

       INST YourComponentName_lane_0_mgt_i LOC=GT_X7Y1;
        </pre>
    </p>

    <p>
        <b>For Combo6X VP50, RIO port 1:</b>
        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X110Y168:SLICE_X111Y169;

       INST YourComponentName_lane_0_mgt_i LOC=GT_X6Y1;
        </pre>
    </p>

    <p>
        <b>For SFPRO, RIO port 0:</b>
        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X74Y0:SLICE_X75Y1;

       INST YourComponentName_lane_0_mgt_i LOC=GT_X3Y0;
        </pre>
    </p>

    <p>
        <b>For SFPRO, RIO port 1:</b>

        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X50Y0:SLICE_X51Y1;

       INST YourComponentName_lane_0_mgt_i LOC=GT_X2Y0;
        </pre>
    </p>

    <p>
        In case you use 2 lane aurora design, include these lines into your .ucf file:
    </p>

    <p>
        <b>For Combo6X, RIO ports 0 and 1:</b>


        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X110Y168:SLICE_X111Y169;

       INST *YourInstanceName_lane_1_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_1_GRP";
       AREA_GROUP "PHASE_ALIGN_1_GRP" RANGE=SLICE_X122Y168:SLICE_X123Y169;

       INST *YourInstanceName_lane_0_mgt_i LOC=GT_X6Y1;

       INST *YourInstanceName_lane_1_mgt_i LOC=GT_X7Y1;

        </pre>
    </p>

    <p>
        <b>For Combo6X VP50, RIO ports 2 and 3 (lanes to VP7):</b>

        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X122Y0:SLICE_X123Y1;

       INST *YourInstanceName_lane_1_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_1_GRP";
       AREA_GROUP "PHASE_ALIGN_1_GRP" RANGE=SLICE_X110Y0:SLICE_X111Y1;

       INST *YourInstanceName_lane_0_mgt_i LOC=GT_X7Y0;

       INST *YourInstanceName_lane_1_mgt_i LOC=GT_X6Y0;
        </pre>
    </p>

    <p>
        <b>For Combo6X VP7, RIO ports 2 and 3 (lanes to VP50):</b>

        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X38Y72:SLICE_X39Y73;

       INST *YourInstanceName_lane_1_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_1_GRP";
       AREA_GROUP "PHASE_ALIGN_1_GRP" RANGE=SLICE_X26Y72:SLICE_X27Y73;

       INST *YourInstanceName_lane_0_mgt_i LOC=GT_X2Y1;

       INST *YourInstanceName_lane_1_mgt_i LOC=GT_X1Y1;
        </pre>
    </p>

    <p>
        <b>For SFPRO, RIO ports 0 and 1:</b>

        <pre>
       INST *YourInstanceName_lane_0_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_0_GRP";
       AREA_GROUP "PHASE_ALIGN_0_GRP" RANGE=SLICE_X50Y0:SLICE_X51Y1;

       INST *YourInstanceName_lane_1_phase_align_i_reg_phase_align_flops_r* AREA_GROUP="PHASE_ALIGN_1_GRP";
       AREA_GROUP "PHASE_ALIGN_1_GRP" RANGE=SLICE_X74Y0:SLICE_X75Y1;

       INST *YourInstanceName_lane_0_mgt_i LOC=GT_X2Y0;
       INST *YourInstanceName_lane_1_mgt_i LOC=GT_X3Y0;
        </pre>
    </p>

    <h1>Design UCF file constrains (XST)</h1>
    <p>
        Constraints for XST are similar. You must use different instance name: 
    </p>

    <p>
        <pre>
       INST *YourInstanceName*lane_0_phase_align_i*ENA_CALIGN_REC AREA_GROUP="PHASE_ALIGN_0_GRP";
       INST *YourInstanceName*lane_1_phase_align_i*ENA_CALIGN_REC AREA_GROUP="PHASE_ALIGN_1_GRP";
        </pre>
    </p>

    <h1>More Auroras in one FPGA</h1>
    <p>
        Be careful, that each AREA_GROUP constraint has different name. You can increment the number, e.g. AREA_GROUP="PHASE_ALIGN_3_GRP"
        etc.
    </p>


    </body>

</source>
