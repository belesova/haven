<?xml version="1.0" encoding="iso-8859-2"?>
<source>
   <component>Local Bus Endpoint</component>

   <authors>
      <author login="xkobie00">Petr Kobiersky</author>
   </authors>

   <features>
      <item>Full and Half frequency version</item>
      <item>Version with buffer for slow components</item>
      <item>User friendly memory interface</item>
   </features>
   
   <description>
      Component convert local bus into general 32-bits address decoder interface. Endpoint
      component support two architectures: (1) Full frequency: component work on the same
      frequency as Local Bus. (2) Half frequency: component work on half localbus frequency.
      For components which write or read data immediately (ARDY is set to logical one all the
      time) there is a Endpoint without buffer. Endpoint with buffer is used when user component
      is slow and don't provide data after read or write request straight away.
   </description>

   <interface>
      <generic_map>
         <generic name="BASE_ADDR" type="std_logic_vector(31:0)" default="">
			   Specify Localbus Endpoint base address. Must be N*LIMIT, N=0,1,... 
         </generic>
         
		   <generic name="LIMIT" type="std_logic_vector(31:0)" default="">
			   Size of user address space. User component ADDRR_WIDTH = log2(LIMIT)
         </generic>
                  
		   <generic name="FREQUENCY" type="integer" default="100">
			   Specify user component frequency
         </generic>
                  
		   <generic name="BUFFER_EN" type="boolean" default="false">
			   Enable or Disable endpoint buffer
         </generic>
      </generic_map>
      
      <port_map>
       <divider>Common Interface</divider>
         <port name="RESET" dir="in" width="1">
            Reset.
         </port>

       <divider>Local Bus Interface</divider>
         
         <port name="LB_CLK" dir="in" width="1">
            Local Bus Clock.
         </port>

         <port name="LOCALBUS" dir="inout" width="t_local_bus16">
            Local Bus
         </port> 

       <divider>User Component Interface</divider>
         
         <port name="CLK" dir="in" width="1">
            User component CLK
         </port> 

         <port name="DWR" dir="out" width="31">
            Data to write
         </port>

         <port name="BE" dir="out" width="4">
            Read/Write Byte Enable
         </port>

         <port name="ADDR" dir="out" width="ADDR_WIDTH">
            Read/Write address
         </port> 

         <port name="RD" dir="out" width="1">
            Read Enable. BE and ADDR is valid during RD
         </port> 

         <port name="WR" dir="out" width="1">
            Write Enable. DWR, BE and ADDR is valid during WR
         </port> 
        
         <port name="ARDY" dir="in" width="1">
            RD or WR Ack signal (next Read/Write item)
         </port> 
         
         <port name="DRD" dir="in" width="32">
            User component send readed data throw this port
         </port>
                
         <port name="DRDY" dir="in" width="1">
            Readed data valid
         </port> 

      </port_map>
   </interface>
      
   <body>

   <h2>User interface description with timing diagrams</h2>
    <p>
       User memory interface of ib_endpoint will be desribed in this 
       paragraph. There is 4 posible scenarios of using lb_endpoint:
       write, delay write, read, delay read.
    </p>

    <p>
       During writing is WR signal set. Data, address and byte enables are
       valid during WR. User component sets ARDY for next write item. Write
       transaction can be delayed by not seting ARDY signal, but for this
       feature the endpoint with buffer must be used.
    </p>

    <p>
       Reading from user component is performed by setting RD signal with
       address and byte enables. User component sets ARDY for next read
       address. Read transaction can be delayed by not seting ARDY signal,
       but for this feature the endpoint with buffer must be used. Readed 
       data is send to DRD port with seting DRDY signal. Readed data can be
       send to DRD port immediately or can be delayed.
    </p>

    <p>
      <obr src="./fig/lb_endpoint_diagrams.fig">Endpoint timing diagrams</obr>
    </p>

   <h2>Frequency and Resources</h2>
      <p>
         <tab sloupce="ccccc">
          <tr>
            <th>Type</th>
            <th>LUTs (% of C6X LUTs)</th>
      	   <th>Slices (% of C6X Slices)</th>
            <th>BlockRAMs (% of C6X BRAMs)</th>
            <th>Max. HW frequency</th>
         </tr>
         <tr>
            <th>LB_ENDPOINT(Full Freq.)</th>
            <th>65 (0%)</th>
            <th>44 (0%)</th>
            <th>0 (0%)</th>
            <th>226 MHz</th>
         </tr>
         <tr>
            <th>LB_ENDPOINT(Full Freq. Buffer)</th>
            <th>71 (0%)</th>
            <th>120 (0%)</th>
            <th>0 (0%)</th>
            <th>167 MHz</th>
         </tr>

         <tr>
            <th>LB_ENDPOINT(Half Freq.)</th>
            <th>56 (0%)</th>
            <th>91 (0%)</th>
            <th>0 (0%)</th>
            <th>238 MHz</th>
         </tr>
         <tr>
            <th>LB_ENDPOINT(Half Freq. Buffer)</th>
            <th>96 (0%)</th>
            <th>132 (0%)</th>
            <th>0 (0%)</th>
            <th>177 MHz</th>
         </tr>

         <nazev>Chip utilization</nazev>
         </tab>
      </p>


    <h2>HW architecture</h2>
    <p>
       Local Bus Endpoint component is consist of address decoder, control part, addres counter
       and optionally buffer for delay transactions. Block schema of Local Bus Endpoint can be
       seen on the following picture.
    </p>
    
    <p>
      <obr src="./fig/lb_endpoint.fig">Endpoint block schema</obr>
    </p>

    <p>
       On the following picture the Local Bus Endpoint RTL schema can be seen. Half
       frequency endpoint needs more registers for clok domain synchronization. Slow
       user components need buffer in endpoint becouse of propagation of RDY signal
       in Local Bus infrastructure.
    </p>
   
    <p>
      <obr src="./fig/endpoint_100mhz.fig">Full Frequency Endpoint</obr>
    </p>

    <p>
      <obr src="./fig/endpoint_100mhz_buffer.fig">Full Frequency Endpoint with buffer</obr>
    </p>
    <p>
      <obr src="./fig/endpoint_50mhz.fig">Half Frequency Endpoint</obr>
    </p>

    <p>
      <obr src="./fig/endpoint_50mhz_buffer.fig">Half Frequency Endpoint with buffer</obr>
    </p>

   </body>  
</source>
