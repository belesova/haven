<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->


<!-- Component name -->
<component>sw_txbuf_top</component>


<!-- Authors -->
<authors>
       <author login="xvozen00">Jan Vozenilek</author>
</authors>


<!-- Features -->
<features>
	<item>Generic Internal bus interface width.</item>
	<item>Generic number of output FrameLink interfaces (of generic width).</item>
	<item>Control interface to new DMA Controllers.</item>
	<item>Parses output data - generates FrameLink signals, removes alignments.</item>
</features>


<!-- Bugs -->
<bugs>
	<item>No known bugs.</item>
</bugs>


<!-- Things to do -->
<todo>
    <item>Nothing (only if more FL widths need to be supported).</item>
</todo>


<!-- Short Block description -->
<description>

	<!-- THE MOST IMPORTANT PART!!! There should be about 8 rows which
	     fully describe the component and its main functions -->

  Data into component are written via Internal bus (see info in HW section
  for address meaning). After writing a block of data DMA controller sends
  TX_NEWLEN signal with number of written Bytes. TX buffer than starts sending
  data to appropriate interface. FrameLink signals are generated on output
  and padding after head and payload are removed in parsing process (see info
  in HW section for details). After sending a FrameLink frame (TX_EOF_N)
  component generates TX_RELLEN signal for DMA controller with number of Bytes
  read out (including alignments - for memory usage).

</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>

	<!-- Generic description -->
	<generic_map>
		
		<generic name="DATA_WIDTH" type="integer" default="64">
			Input data width (to Internal bus).
		</generic>
		<generic name="BLOCK_SIZE" type="integer" default="512">
			Maximum number of items (of DATA_WIDTH) that can be stored for each block (input flow).
		</generic>
		<generic name="FLOWS" type="integer" default="4">
			Number of output FrameLink interfaces (each DATA_WIDTH/FLOWS wide) - can also be 1.
		</generic>
		<generic name="TOTAL_FLOW_SIZE" type="integer" default="16384">
			Total size (bytes) for one flow (interface).
		</generic>
		<generic name="SIZE_LENGTH" type="integer" default="16">
			Length of one size (head or data) in used protocol (16 bits for FrameLink).
		</generic>
		<generic name="USE_FL_PIPE" type="boolean" default="false">
			FL_PIPE is always UNCONNECTED, generic has no efect!
      (Can turn on/off usage of component that inserts register to output flows (to reduce critical path).)
		</generic>
		
	</generic_map>

	<!-- Port description -->
	<port_map>

		<divider>Common signals</divider>		
		<port  name="CLK" dir="in" width="1">
			Global FPGA clock.
		</port>
		<port  name="RESET" dir="in" width="1">
			Global synchronous reset.
		</port>

		<divider>Input interface (Internal bus)</divider> 
		<port name="WR_ADDR" dir="in" width="32">
			Internal bus write address (see description for meaning).
		</port>
		<port name="WR_BE" dir="in" width="8">
			Internal bus byte enable - not used.
		</port>
		<port name="WR_REQ" dir="in" width="1">
			Internal bus write request.
		</port>
		<port name="WR_RDY" dir="out" width="1">
			Internal bus ready - '1' indicates free space in current block (given by WR_ADDR).
		</port>
		<port name="WR_DATA" dir="in" width="DATA_WIDTH">
			Internal bus input data.
		</port>

		<divider>Output interface (FrameLink)</divider> 		
		<port name="TX_DATA" dir="out" width="DATA_WIDTH">
			Output FrameLink data (DATA_WIDTH/FLOWS bits for each flow).
		</port>
		<port name="TX_SOP_N" dir="out" width="FLOWS">
			Output FrameLink signal - start of part (one bit for each flow).
		</port>
		<port name="TX_EOP_N" dir="out" width="FLOWS">
			Output FrameLink signal - end of part (one bit for each flow).
		</port>
		<port name="TX_SOF_N" dir="out" width="FLOWS">
			Output FrameLink signal - start of frame (one bit for each flow).
		</port>
		<port name="TX_EOF_N" dir="out" width="FLOWS">
			Output FrameLink signal - end of frame (one bit for each flow).
		</port>
		<port name="TX_REM" dir="out" width="log2((DATA_WIDTH/FLOWS)/8)*FLOWS">
			Output FrameLink signal - drem.
		</port>
		<port name="TX_SRC_RDY_N" dir="out" width="FLOWS">
			Output FrameLink signal - source ready (one bit for each flow).
		</port>
		<port name="TX_DST_RDY_N" dir="in" width="FLOWS">
			Input FrameLink signal - destination ready (one bit for each flow).
		</port>

		<divider>DMA ctrl interface</divider> 
		<port name="TX_NEWLEN" dir="in" width="FLOWS*16">
			Number of Bytes written via Internal bus interface (aligned) - 16 bits for each flow.
      Number of Bytes to be marked as valid in memory.
		</port>
		<port name="TX_NEWLEN_DV" dir="in" width="FLOWS">
			Valid signal for RX_NELLEN - one bit for each flow.
      Requests start ofparsing and sending data.
		</port>
		<port name="TX_NEWLEN_RDY" dir="out" width="FLOWS">
			Ready signal to controller - one bit for each flow - always set to '1'.
		</port>
		<port name="TX_RELLEN" dir="out" width="FLOWS*16">
			Number of Bytes sent on FrameLink interface (including alignment) - 16 bits for each flow.
		</port>
		<port name="TX_RELLEN_DV" dir="out" width="FLOWS">
			Valid signal for RX_RELLEN - one bit for each flow.
		</port>

	</port_map>

</interface>


<!-- HW BODY SECTION **************************************************** -->
<!-- information for HW designers, structure should be as follow          -->
<body>

<h1>TX DMA buffer info</h1>

	<p>
    Data (of DATA_WIDTH) are written via Internal bus interface, but are kept
    in memory until TX_NEWLEN_DV is received. After then parsing begins and
    data appears on appropriate FrameLink interface (DATA_WIDTH/FLOWS wide,
    therefore (DATA_WIDTH mod FLOWS = 0) is asserted). TX buffer uses
    MEM2NFIFO for storing data and PARSER for generating FL signals.
    Note: PARSER now supports only 16, 32 and 64 bits of data width.
	</p>

  <h2>DMA controller signals</h2>
  <p>
    After writing data controller sends TX_NEWLEN signal (with TX_NEWLEN_DV)
    with number of valid Bytes (aligned to DATA_WIDTH). When whole FrameLink
    frame is sent and alignment read out, component generates TX_RELLEN signal
    (with TX_RELLEN_DV) with number of Bytes released from flow's memory space.
  </p>

  <h2>Internal bus address</h2>
  <p>
    IB address' width is 32 bits and is parsed in the folowing way (example is
    for DATA_WIDTH = 64, BLOCK_SIZE = 512, FLOWS = 2 and TOTAL_FLOW_SIZE = 16384;
    Other bits are ignored):
    <tab sloupce="ccc">
      <tr>
        <th>Generic width</th>
        <th>Example</th>
        <th>Meaning</th>
      </tr>
      <tr>
        <td>log2(DATA_WIDTH/8)-1 downto 0</td>
        <td>2:0</td>
        <td>ignored (number is items of DATA_WIDTH, needs Bytes)</td>
      </tr>
      <tr>
        <td>log2(BLOCK_SIZE)+log2(DATA_WIDTH/8)-1 downto log2(DATA_WIDTH/8)</td>
        <td>11:3</td>
        <td>offset in flow's memory (log2(BLOCK_SIZE) bits)</td>
      </tr>
      <tr>
        <td>log2(FLOWS)+log2(TOTAL_FLOW_SIZE)-1 downto log2(TOTAL_FLOW_SIZE)</td>
        <td>14:14</td>
        <td>number of interface where data was received (log2(FLOWS) bits)</td>
      </tr>
      <nazev>Internal bus address meaning.</nazev>
    </tab>
  </p>

  <h2>Output data parsing</h2>
  <p>
    Data are parsed in following way:
    <tab sloupce="ccc">
      <tr>
        <th>Offset</th>
        <th>Meaning</th>
        <th>TX_SRC_RDY_N active</th>
      </tr>
      <tr>
        <td>15 downto 0</td>
        <td>Frame size (in Bytes) including frame and head size (first 4 Bytes)</td>
        <td>No</td>
      </tr>
      <tr>
        <td>31 downto 16</td>
        <td>Head size (in Bytes)</td>
        <td>No</td>
      </tr>
      <tr>
        <td>(32+Head size) downto 32</td>
        <td>Head (starts with TX_SOF_N and TX_SOP_N, ends with TX_EOP_N)</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>aligned(32+Head size) downto (32+Head size)</td>
        <td>Head alignment (up to DATA_WIDTH)</td>
        <td>No</td>
      </tr>
      <tr>
        <td>(32+Frame size) downto aligned(32+Head size)</td>
        <td>Payload (starts with TX_SOP_N, ends with TX_EOP_N and TX_EOF_N)</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>aligned(32+Frame size) downto (32+Frame size)</td>
        <td>Payload alignment (up to DATA_WIDTH)</td>
        <td>No</td>
      </tr>
      <nazev>Output data parsing.</nazev>
    </tab>
    </p>
  <h3>Example:</h3>
  <p>
    Frame size is 60 Bytes (0x3C). Head size is 3 Bytes: a0, a1, a2.
    Payload: 00..33. Other data are alignments.
    <tab sloupce="cccccccc">
      <tr>
        <th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th>
      </tr>
      <tr>
        <td>00</td><td>a2</td><td>a1</td><td>a0</td><td>00</td><td>03</td><td>00</td><td>3c</td>
      </tr>
      <tr>
        <td>07</td><td>06</td><td>05</td><td>04</td><td>03</td><td>02</td><td>01</td><td>00</td>
      </tr>
      <tr>
        <td>0f</td><td>0e</td><td>0d</td><td>0c</td><td>0b</td><td>0a</td><td>09</td><td>08</td>
      </tr>
      <tr>
        <td>17</td><td>16</td><td>15</td><td>14</td><td>13</td><td>12</td><td>11</td><td>10</td>
      </tr>
      <tr>
        <td>1f</td><td>1e</td><td>1d</td><td>1c</td><td>1b</td><td>1a</td><td>19</td><td>18</td>
      </tr>
      <tr>
        <td>27</td><td>26</td><td>25</td><td>24</td><td>23</td><td>22</td><td>21</td><td>20</td>
      </tr>
      <tr>
        <td>2f</td><td>2e</td><td>2d</td><td>2c</td><td>2b</td><td>2a</td><td>29</td><td>28</td>
      </tr>
      <tr>
        <td>00</td><td>00</td><td>00</td><td>00</td><td>33</td><td>32</td><td>31</td><td>30</td>
      </tr>
      <nazev>Output data parsing example.</nazev>
    </tab>
  </p>
		
<h1>Schemes</h1>
	
	<p>
		The component converts MEM2NFIFO's interface to Internal bus on input and
    FrameLink on output. DMA ctrl interface is added (modification of RELLEN
    to fit subcomponent's needs and generation of NEWLEN signal - counter).
		<obr src="./fig/sw_txbuf_top.fig">TX DMA buffer architecture</obr>
	</p>			

<h1>Frequency and resources usage</h1>
<p>
   <tab sloupce="cccccc">
   <tr>
      <th>FPGA</th>
      <th>Architecture</th>
      <th>Tool</th>
      <th>Generic settings</th>
      <th>Slices</th>
      <th>Max. Frequency</th>
   </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=1 </td>
         <td>234</td>
         <td>111.343</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=2 </td>
         <td>300</td>
         <td>150.691</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=4 </td>
         <td>608</td>
         <td>131.718</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>precision</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=1 </td>
         <td>174</td>
         <td>98.135</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>precision</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=2 </td>
         <td>259</td>
         <td>140.766</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>precision</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=4 </td>
         <td>529</td>
         <td>139.645</td>
      </tr>
      <tr>
         <td>xc5vlx110t</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=1 </td>
         <td>233</td>
         <td>191.883</td>
      </tr>
      <tr>
         <td>xc5vlx110t</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=2 </td>
         <td>215</td>
         <td>241.546</td>
      </tr>
      <tr>
         <td>xc5vlx110t</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=4 </td>
         <td>403</td>
         <td>202.102</td>
      </tr>
<nazev>Chip utilization and maximal frequency.</nazev>
</tab>
</p>

</body>

</source>
