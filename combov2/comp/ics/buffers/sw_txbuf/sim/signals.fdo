# signals.fdo : Include file with signals
# Copyright (C) 2006 CESNET
# Author: Martin Kosek <kosek@liberouter.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of the Company nor the names of its contributors
#    may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# This software is provided ``as is'', and any express or implied
# warranties, including, but not limited to, the implied warranties of
# merchantability and fitness for a particular purpose are disclaimed.
# In no event shall the company or contributors be liable for any
# direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute
# goods or services; loss of use, data, or profits; or business
# interruption) however caused and on any theory of liability, whether
# in contract, strict liability, or tort (including negligence or
# otherwise) arising in any way out of the use of this software, even
# if advised of the possibility of such damage.
#
# $Id: signals.fdo 5180 2008-08-23 21:56:11Z solanka $

   view wave
   delete wave *

proc blk_TXBUF { BASE DESC } {

   add wave -divider "SW TX Buffer - $DESC"

   add wave -divider "SW TX Buffer - IFC"
   add_wave "-noupdate -hex -label clk               " $BASE/clk 
   add_wave "-noupdate -hex -label reset             " $BASE/reset 

   add wave -divider "SW TX Buffer - IB"
   add_wave "-noupdate -hex -label wr_addr      " $BASE/wr_addr
   add_wave "-noupdate -hex -label wr_be        " $BASE/wr_be
   add_wave "-noupdate -hex -label wr_req       " $BASE/wr_req
   add_wave "-noupdate -hex -label wr_rdy       " $BASE/wr_rdy
   add_wave "-noupdate -hex -label wr_data      " $BASE/wr_data

   add wave -divider "SW TX Buffer - DMA IFC"
   add_wave "-noupdate -hex -label tx_newlen    " $BASE/tx_newlen
   add_wave "-noupdate -hex -label tx_newlen_dv " $BASE/tx_newlen_dv
   add_wave "-noupdate -hex -label tx_newlen_rdy" $BASE/tx_newlen_rdy
   add_wave "-noupdate -hex -label tx_rellen    " $BASE/tx_rellen
   add_wave "-noupdate -hex -label tx_rellen_dv " $BASE/tx_rellen_dv

   add wave -divider "SW TX Buffer - TX FrameLink"
   add_wave "-noupdate -hex -label tx_data      " $BASE/tx_data
   add_wave "-noupdate -hex -label tx_sof_n     " $BASE/tx_sof_n
   add_wave "-noupdate -hex -label tx_sop_n     " $BASE/tx_sop_n
   add_wave "-noupdate -hex -label tx_eop_n     " $BASE/tx_eop_n
   add_wave "-noupdate -hex -label tx_eof_n     " $BASE/tx_eof_n
   add_wave "-noupdate -hex -label tx_rem       " $BASE/tx_rem
   add_wave "-noupdate -hex -label tx_src_rdy_n " $BASE/tx_src_rdy_n
   add_wave "-noupdate -hex -label tx_dst_rdy_n " $BASE/tx_dst_rdy_n
}

proc blk_SW_TXBUF_PARSER { BASE DESC DATA_WIDTH } {

   if { $DATA_WIDTH == "16" || $DATA_WIDTH == "32"} {

      set BASE "$BASE/gen${DATA_WIDTH}b/parser_i"

      add wave -divider "SW_TXBUF parser - $DESC"
      add_wave "-label clk              " $BASE/clk
      add_wave "-label reset            " $BASE/reset

      add wave -divider "mem2nfifo interface"
      add_wave "-hex -label fifo_data_out    " $BASE/fifo_data_out
      add_wave "     -label fifo_data_vld    " $BASE/fifo_data_vld
      add_wave "     -label fifo_rd          " $BASE/fifo_rd

      add wave -divider "Control interface"
      add_wave "-label sending_word     " $BASE/sending_word
      add_wave "-label sending_last_word" $BASE/sending_last_word

      add wave -divider "Output Framelink interface"
      add_wave "-hex -label fl_data          " $BASE/fl_data
      add_wave "     -label fl_sof_n         " $BASE/fl_sof_n
      add_wave "     -label fl_sop_n         " $BASE/fl_sop_n
      add_wave "     -label fl_eop_n         " $BASE/fl_eop_n
      add_wave "     -label fl_eof_n         " $BASE/fl_eof_n
      add_wave "     -label fl_rem           " $BASE/fl_rem
      add_wave "     -label fl_src_rdy_n     " $BASE/fl_src_rdy_n
      add_wave "     -label fl_dst_rdy_n     " $BASE/fl_dst_rdy_n

      add wave -divider "Internal signals"
      add_wave "     -label curr_state             " $BASE/curr_state
      add_wave "     -label next_state             " $BASE/next_state
      add_wave "-hex -label cnt_hwd_size           " $BASE/cnt_hwd_size           
      add_wave "     -label cnt_hwd_size_ce        " $BASE/cnt_hwd_size_ce        
      add_wave "     -label cnt_hwd_size_ld        " $BASE/cnt_hwd_size_ld        
      add_wave "-hex -label cnt_seg_size           " $BASE/cnt_seg_size           
      add_wave "     -label cnt_seg_size_ce        " $BASE/cnt_seg_size_ce        
      add_wave "     -label cnt_seg_size_ld        " $BASE/cnt_seg_size_ld        
      add_wave "-hex -label cnt_data_aligned_64b   " $BASE/cnt_data_aligned_64b   
      add_wave "     -label cnt_data_aligned_64b_ce" $BASE/cnt_data_aligned_64b_ce
      add_wave "     -label cmp_data_aligned       " $BASE/cmp_data_aligned 
      add_wave "     -label last_hwdata_word       " $BASE/last_hwdata_word 
      add_wave "     -label last_payload_word      " $BASE/last_payload_word
      add_wave "     -label reg_sof_set            " $BASE/reg_sof_set      
      add_wave "     -label reg_sop_set            " $BASE/reg_sop_set      
      add_wave "     -label zero_hwdata_size       " $BASE/zero_hwdata_size 
      add_wave "     -label reg_sop                " $BASE/reg_sop          
      add_wave "     -label reg_sof                " $BASE/reg_sof          
      add_wave "     -label fifo_rd_req            " $BASE/fifo_rd_req      
      add_wave "     -label data_transmission      " $BASE/data_transmission
      add_wave "     -label src_rdy_n              " $BASE/src_rdy_n        
   }

   if { $DATA_WIDTH == "64" } {

      set BASE "$BASE/gen64b/parser_i"

      add wave -divider "SW_TXBUF parser - $DESC"
      add_wave "-label clk              " $BASE/clk
      add_wave "-label reset            " $BASE/reset

      add wave -divider "mem2nfifo interface"
      add_wave "-hex -label fifo_data_out    " $BASE/fifo_data_out
      add_wave "     -label fifo_data_vld    " $BASE/fifo_data_vld
      add_wave "     -label fifo_rd          " $BASE/fifo_rd

      add wave -divider "Control interface"
      add_wave "-label sending_word     " $BASE/sending_word
      add_wave "-label sending_last_word" $BASE/sending_last_word
      add_wave "-label zero_header_size " $BASE/zero_header_size

      add wave -divider "Output Framelink interface"
      add_wave "-hex -label fl_data          " $BASE/fl_data
      add_wave "     -label fl_sof_n         " $BASE/fl_sof_n
      add_wave "     -label fl_sop_n         " $BASE/fl_sop_n
      add_wave "     -label fl_eop_n         " $BASE/fl_eop_n
      add_wave "     -label fl_eof_n         " $BASE/fl_eof_n
      add_wave "     -label fl_rem           " $BASE/fl_rem
      add_wave "     -label fl_src_rdy_n     " $BASE/fl_src_rdy_n
      add_wave "     -label fl_dst_rdy_n     " $BASE/fl_dst_rdy_n

      add wave -divider "Internal signals"
      add_wave "     -label curr_state              " $BASE/curr_state
      add_wave "     -label next_state              " $BASE/next_state
      add_wave "-hex -label cnt_hwd_size            " $BASE/cnt_hwd_size           
      add_wave "     -label cnt_hwd_size_ce         " $BASE/cnt_hwd_size_ce        
      add_wave "     -label cnt_hwd_size_ld         " $BASE/cnt_hwd_size_ld        
      add_wave "-hex -label cnt_seg_size            " $BASE/cnt_seg_size           
      add_wave "     -label cnt_seg_size_ce         " $BASE/cnt_seg_size_ce        
      add_wave "     -label cnt_seg_size_ld         " $BASE/cnt_seg_size_ld        
      add_wave "     -label cnt_seg_size_ld_full    " $BASE/cnt_seg_size_ld_full
      add_wave "     -label last_hwdata_word        " $BASE/last_hwdata_word 
      add_wave "     -label last_payload_word       " $BASE/last_payload_word
      add_wave "     -label zero_hwdata_size        " $BASE/zero_hwdata_size 
      add_wave "     -label zero_hwdata_size        " $BASE/zero_hwdata_size 
      add_wave "     -label hwdata_first_word       " $BASE/hwdata_first_word
      add_wave "     -label reg_sof_set             " $BASE/reg_sof_set      
      add_wave "     -label reg_sop_set             " $BASE/reg_sop_set      
      add_wave "     -label reg_zero_hwdata_size_set" $BASE/reg_zero_hwdata_size_set
      add_wave "     -label reg_zero_hwdata_size    " $BASE/reg_zero_hwdata_size
      add_wave "     -label reg_sop                 " $BASE/reg_sop          
      add_wave "     -label reg_sof                 " $BASE/reg_sof          
      add_wave "     -label fifo_rd_req             " $BASE/fifo_rd_req      
      add_wave "     -label data_transmission       " $BASE/data_transmission
      add_wave "     -label src_rdy_n               " $BASE/src_rdy_n        
      add_wave "     -label hwdata_drem_generator   " $BASE/hwdata_drem_generator
      add_wave "     -label payload_drem_generator  " $BASE/payload_drem_generator
   }
}


