--------------------------------------------------------------------
-- Name: tx_dma_ctrl_opt_arch_8b.vhd
-- Created: 12/5/2010 @ 9:49
-- Description: this file contains the top level entity
-- Generated by: DK Design Suite, version 5.1.6051.16784
-- Family: Xilinx Virtex-5
-- Output Style: Xilinx Synthesis Tool
--
-- File structure:
--
-- -tx_dma_ctrl_opt_arch_8b.vhd
--------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY DK;
USE DK.DKPackage.ALL;
LIBRARY unisim;
USE unisim.vcomponents.ALL;
-- this is the top level entity
ENTITY tx_dma_ctrl_opt_arch_8b IS
  -- interface description
  PORT (
    BUF_NEWLEN : OUT std_logic_vector(15 DOWNTO 0);
    BUF_NEWLEN_DV : OUT std_logic;
    BUF_NEWLEN_RDY : IN std_logic;
    BUF_RELLEN : IN std_logic_vector(15 DOWNTO 0);
    BUF_RELLEN_DV : IN std_logic;
    BUFFER_ADDR : IN std_logic_vector(31 DOWNTO 0);
    BUFFER_SIZE : IN std_logic_vector(15 DOWNTO 0);
    DESC_DO : IN std_logic_vector(7 DOWNTO 0);
    DESC_EMPTY : IN std_logic;
    DESC_READ : OUT std_logic;
    DMA_ACK : IN std_logic;
    DMA_ADDR : IN std_logic_vector(3 DOWNTO 0);
    DMA_DONE : IN std_logic;
    DMA_DOUT : OUT std_logic_vector(7 DOWNTO 0);
    DMA_REQ : OUT std_logic;
    DMA_TAG : IN std_logic_vector(15 DOWNTO 0);
    DMA_TAG_ID : IN std_logic_vector(7 DOWNTO 0);
    ENABLE : OUT std_logic;
    INTERRUPT : OUT std_logic_vector(1 DOWNTO 0);
    PIN_CLK : IN std_logic;
    PIN_RESET : IN std_logic;
    SW_ADDR : IN std_logic_vector(31 DOWNTO 0);
    SW_ARDY : OUT std_logic;
    SW_DRD : OUT std_logic_vector(31 DOWNTO 0);
    SW_DRDY : OUT std_logic;
    SW_DWR : IN std_logic_vector(31 DOWNTO 0);
    SW_RD : IN std_logic;
    SW_WR : IN std_logic
  );
END;

-- this is the top level entity
ARCHITECTURE behaviour OF tx_dma_ctrl_opt_arch_8b IS
component RAM16X1D
        generic (
           INIT : bit_vector := X"0000"
        );
        port (
           D     : in std_logic;
           WE    : in std_logic;
           WCLK  : in std_logic;
           A0    : in std_logic;
           A1    : in std_logic;
           A2    : in std_logic;
           A3    : in std_logic;
           DPRA0 : in std_logic;
           DPRA1 : in std_logic;
           DPRA2 : in std_logic;
           DPRA3 : in std_logic;
           SPO   : out std_logic;
           DPO   : out std_logic
        );
end component;
component RAM32X1D
        generic (
           INIT : bit_vector := X"00000000"
        );
        port (
           D     : in std_logic;
           WE    : in std_logic;
           WCLK  : in std_logic;
           A0    : in std_logic;
           A1    : in std_logic;
           A2    : in std_logic;
           A3    : in std_logic;
           A4    : in std_logic;
           DPRA0 : in std_logic;
           DPRA1 : in std_logic;
           DPRA2 : in std_logic;
           DPRA3 : in std_logic;
           DPRA4 : in std_logic;
           SPO   : out std_logic;
           DPO   : out std_logic
        );
end component;
component RAM64X1D
        generic (
           INIT : bit_vector := X"0000000000000000"
        );
        port (
           D     : in std_logic;
           WE    : in std_logic;
           WCLK  : in std_logic;
           A0    : in std_logic;
           A1    : in std_logic;
           A2    : in std_logic;
           A3    : in std_logic;
           A4    : in std_logic;
           A5    : in std_logic;
           DPRA0 : in std_logic;
           DPRA1 : in std_logic;
           DPRA2 : in std_logic;
           DPRA3 : in std_logic;
           DPRA4 : in std_logic;
           DPRA5 : in std_logic;
           SPO   : out std_logic;
           DPO   : out std_logic
        );
end component;
  -- Power cable
  CONSTANT VCC : std_logic := '1';
  -- Ground cable
  CONSTANT GND : std_logic := '0';
  -- Register 'cnt_dma_ack'
  SIGNAL cnt_dma_ack : unsigned(7 DOWNTO 0);
  -- Register 'cnt_not_buf_rellen'
  SIGNAL cnt_not_buf_rellen : unsigned(7 DOWNTO 0);
  -- Register 'cnt_space_available'
  SIGNAL cnt_space_available : unsigned(7 DOWNTO 0);
  -- Register 'cnt_no_space'
  SIGNAL cnt_no_space : unsigned(7 DOWNTO 0);
  -- Register 'cnt_down_descs'
  SIGNAL cnt_down_descs : unsigned(7 DOWNTO 0);
  -- Register 'cnt_desc_empty'
  SIGNAL cnt_desc_empty : unsigned(7 DOWNTO 0);
  -- Register 'debug_status'
  SIGNAL debug_status : unsigned(8 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_interrupt : unsigned(1 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_interrupt0 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_interrupt1 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_enable : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_buf_newlen : unsigned(15 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_desc_read : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_sw_ardy : unsigned(0 DOWNTO 0);
  -- Register 'ifc_sw_drdy'
  SIGNAL ifc_sw_drdy : unsigned(0 DOWNTO 0);
  -- Register 'ifc_sw_drd'
  SIGNAL ifc_sw_drd : unsigned(31 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_dma_dout : unsigned(7 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_dma_req : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL dma_done_release : unsigned(0 DOWNTO 0);
  -- Register 'dma_done_cnt'
  SIGNAL dma_done_cnt : unsigned(2 DOWNTO 0);
  -- Register 'sw_str_ptr'
  SIGNAL sw_str_ptr : unsigned(31 DOWNTO 0);
  -- Register 'sw_end_ptr'
  SIGNAL sw_end_ptr : unsigned(31 DOWNTO 0);
  -- Register 'sw_last_end_ptr'
  SIGNAL sw_last_end_ptr : unsigned(31 DOWNTO 0);
  -- Register 'hw_buffer_mask'
  SIGNAL hw_buffer_mask : unsigned(15 DOWNTO 0);
  -- Register 'hw_end_ptr'
  SIGNAL hw_end_ptr : unsigned(15 DOWNTO 0);
  -- Register 'hw_buffer_free_space'
  SIGNAL hw_buffer_free_space : unsigned(15 DOWNTO 0);
  -- Register 'hw_str_ptr'
  SIGNAL hw_str_ptr : unsigned(15 DOWNTO 0);
  -- Register 'control_reg'
  SIGNAL control_reg : unsigned(2 DOWNTO 0);
  -- Register 'status_reg'
  SIGNAL status_reg : unsigned(3 DOWNTO 0);
  -- Register 'interrupt_reg'
  SIGNAL interrupt_reg : unsigned(31 DOWNTO 0);
  -- Register 'interrupt_mon'
  SIGNAL interrupt_mon : unsigned(31 DOWNTO 0);
  -- Register 'timeout_reg'
  SIGNAL timeout_reg : unsigned(31 DOWNTO 0);
  -- Register 'interrupt_reset'
  SIGNAL interrupt_reset : unsigned(0 DOWNTO 0);
  -- Register 'interrupt_enable'
  SIGNAL interrupt_enable : unsigned(0 DOWNTO 0);
  -- Register 'timeout_enable'
  SIGNAL timeout_enable : unsigned(0 DOWNTO 0);
  -- Register 'sw_buffer_mask'
  SIGNAL sw_buffer_mask : unsigned(31 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL hw_buffer_full : unsigned(0 DOWNTO 0);
  -- Concatenation
  SIGNAL S_0 : unsigned(7 DOWNTO 0);
  -- Concatenation
  SIGNAL S_1 : unsigned(7 DOWNTO 0);
  -- Register 'getNextDesc'
  SIGNAL getNextDesc : unsigned(0 DOWNTO 0);
  -- Register 'newDescReady'
  SIGNAL newDescReady : unsigned(0 DOWNTO 0);
  -- Start out
  SIGNAL StartOut : std_logic;
  -- Start out
  SIGNAL StartOut_1 : std_logic;
  -- Start out
  SIGNAL StartOut_2 : std_logic;
  -- Start out
  SIGNAL StartOut_3 : std_logic;
  -- Start out
  SIGNAL StartOut_4 : std_logic;
  -- Start out
  SIGNAL StartOut_5 : std_logic;
  -- Start out
  SIGNAL StartOut_6 : std_logic;
  -- Start out
  SIGNAL StartOut_7 : std_logic;
  -- Start out
  SIGNAL StartOut_8 : std_logic;
  -- Start out
  SIGNAL StartOut_9 : std_logic;
  -- Start out
  SIGNAL StartOut_10 : std_logic;
  -- Start out
  SIGNAL StartOut_11 : std_logic;
  -- Register 'parts'
  SIGNAL parts : unsigned(3 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL LoopZ : std_logic;
  -- Constant value
  CONSTANT ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- Test for equality
  SIGNAL BinOpOut : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse : std_logic;
  -- Control path join
  SIGNAL BodyStart : std_logic;
  -- Clock cycle delay
  SIGNAL BodyEnd : std_logic;
  -- One-Hot Multiplexer
  SIGNAL SeqChain : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_1 : std_logic;
  -- Constant value
  CONSTANT ConstOut_1 : unsigned(3 DOWNTO 0) := "0000";
  -- Constant value
  CONSTANT ConstOut_2 : unsigned(0 DOWNTO 0) := "1";
  -- Test for equality
  SIGNAL BinOpOut_1 : std_logic;
  -- Control path join
  SIGNAL BodyStart_1 : std_logic;
  -- Clock cycle delay
  SIGNAL BodyEnd_1 : std_logic;
  -- Plus
  SIGNAL BinOpOut_2 : unsigned(7 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue : std_logic;
  -- Plus
  SIGNAL BinOpOut_3 : unsigned(3 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_4 : unsigned(3 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_3 : std_logic;
  -- Plus
  SIGNAL BinOpOut_5 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_3 : unsigned(3 DOWNTO 0) := "1000";
  -- Test for unsigned less than
  SIGNAL BinOpOut_6 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_1 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_1 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_1 : std_logic;
  -- Control path join
  SIGNAL CForkIn_1 : std_logic;
  -- Bitwise AND
  SIGNAL BinOpOut_7 : unsigned(15 DOWNTO 0);
  -- Register 'data_length'
  SIGNAL data_length : unsigned(31 DOWNTO 0);
  -- Register 'page_offset'
  SIGNAL page_offset : unsigned(11 DOWNTO 0);
  -- Register 'page_free_space'
  SIGNAL page_free_space : unsigned(12 DOWNTO 0);
  -- Register 'need_new_desc'
  SIGNAL need_new_desc : unsigned(0 DOWNTO 0);
  -- Register 'mem_l_addr'
  SIGNAL mem_l_addr : unsigned(31 DOWNTO 0);
  -- Register 'mem_length'
  SIGNAL mem_length : unsigned(11 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_2 : std_logic;
  -- Constant value
  CONSTANT ConstOut_4 : unsigned(3 DOWNTO 0) := "0001";
  -- Test for equality
  SIGNAL BinOpOut_8 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_2 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_1 : std_logic;
  -- Constant value
  CONSTANT ConstOut_5 : unsigned(12 DOWNTO 0) := "1000000000000";
  -- Constant value
  CONSTANT ConstOut_6 : unsigned(11 DOWNTO 0) := (OTHERS => '0');
  -- Constant value
  CONSTANT ConstOut_7 : unsigned(8 DOWNTO 0) := "000000001";
  -- Clock cycle delay
  SIGNAL Z_Dones_6 : std_logic;
  -- Constant value
  CONSTANT ConstOut_8 : unsigned(15 DOWNTO 0) := "0000000000000001";
  -- Minus
  SIGNAL BinOpOut_9 : unsigned(15 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL SeqChain_2 : std_logic;
  -- Constant value
  CONSTANT ConstOut_9 : unsigned(7 DOWNTO 0) := "00000000";
  -- Concatenation
  SIGNAL BinOpOut_10 : unsigned(15 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_11 : unsigned(7 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_12 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_10 : unsigned(3 DOWNTO 0) := "0011";
  -- Constant value
  CONSTANT ConstOut_11 : unsigned(3 DOWNTO 0) := "0100";
  -- Test for equality
  SIGNAL BinOpOut_13 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_3 : std_logic;
  -- Constant value
  CONSTANT ConstOut_12 : unsigned(3 DOWNTO 0) := "0010";
  -- Bitwise OR
  SIGNAL BinOpOut_14 : unsigned(0 DOWNTO 0);
  -- Conditional false branch
  SIGNAL WireFalse_4 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_2 : std_logic;
  -- Test for inequality
  SIGNAL BinOpOut_15 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_5 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_2 : std_logic;
  -- Control path join
  SIGNAL CForkIn_3 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_3 : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_16 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_6 : std_logic;
  -- Bitwise AND
  SIGNAL BinOpOut_17 : unsigned(31 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_1_1 : std_logic;
  -- Constant value
  CONSTANT ConstOut_13 : unsigned(8 DOWNTO 0) := "000000010";
  -- Clock cycle delay
  SIGNAL SeqChain_3 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_18 : unsigned(7 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL SeqChain_4 : std_logic;
  -- Constant value
  CONSTANT ConstOut_14 : unsigned(3 DOWNTO 0) := "1001";
  -- Concatenation
  SIGNAL BinOpOut_19 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_15 : unsigned(15 DOWNTO 0) := (OTHERS => '0');
  -- Test for equality
  SIGNAL BinOpOut_20 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_7 : std_logic;
  -- Control path join
  SIGNAL BodyStart_2 : std_logic;
  -- Plus
  SIGNAL BinOpOut_21 : unsigned(7 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_2 : std_logic;
  -- Constant value
  CONSTANT ConstOut_16 : unsigned(8 DOWNTO 0) := "000000011";
  -- Clock cycle delay
  SIGNAL SeqChain_5 : std_logic;
  -- Plus
  SIGNAL BinOpOut_22 : unsigned(7 DOWNTO 0);
  -- Control path join
  SIGNAL SeqChain_6 : std_logic;
  -- Concatenation
  SIGNAL BinOpOut_23 : unsigned(31 DOWNTO 0);
  -- Test for unsigned greater than
  SIGNAL BinOpOut_24 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_4 : std_logic;
  -- Clock cycle delay
  SIGNAL Z_Dones_1_2 : std_logic;
  -- Constant value
  CONSTANT ConstOut_17 : unsigned(8 DOWNTO 0) := "000000100";
  -- Constant value
  CONSTANT ConstOut_18 : unsigned(18 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_25 : unsigned(31 DOWNTO 0);
  -- Test for unsigned less than
  SIGNAL BinOpOut_26 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_8 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_5 : std_logic;
  -- Constant value
  CONSTANT ConstOut_19 : unsigned(8 DOWNTO 0) := "000000101";
  -- Take LSBs
  SIGNAL BinOpOut_27 : unsigned(11 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_28 : unsigned(11 DOWNTO 0);
  -- Take LSBs
  SIGNAL BinOpOut_29 : unsigned(12 DOWNTO 0);
  -- Minus
  SIGNAL BinOpOut_30 : unsigned(12 DOWNTO 0);
  -- Bitwise AND
  SIGNAL BinOpOut_31 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_20 : unsigned(8 DOWNTO 0) := "000000110";
  -- Bitwise AND
  SIGNAL BinOpOut_32 : unsigned(31 DOWNTO 0);
  -- Conditional true branch
  SIGNAL WireTrue_6 : std_logic;
  -- Plus
  SIGNAL BinOpOut_33 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_21 : unsigned(8 DOWNTO 0) := "000000111";
  -- Test for equality
  SIGNAL BinOpOut_34 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_9 : std_logic;
  -- Constant value
  CONSTANT ConstOut_22 : unsigned(8 DOWNTO 0) := "000001000";
  -- Concatenation
  SIGNAL BinOpOut_35 : unsigned(31 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_36 : unsigned(31 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_3_1 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_7 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_8 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_37 : unsigned(7 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL SeqChain_9 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_38 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_23 : unsigned(3 DOWNTO 0) := "0101";
  -- Clock cycle delay
  SIGNAL SeqChain_10 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_39 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_24 : unsigned(3 DOWNTO 0) := "0110";
  -- Bit range selection
  SIGNAL BinOpOut_40 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_25 : unsigned(3 DOWNTO 0) := "0111";
  -- Clock cycle delay
  SIGNAL SeqChain_11 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_12 : std_logic;
  -- Concatenation
  SIGNAL BinOpOut_41 : unsigned(15 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_42 : unsigned(7 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_43 : unsigned(7 DOWNTO 0);
  -- Conditional true branch
  SIGNAL WireTrue_7 : std_logic;
  -- Constant value
  CONSTANT ConstOut_26 : unsigned(8 DOWNTO 0) := "000001001";
  -- Test for equality
  SIGNAL BinOpOut_44 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_10 : std_logic;
  -- Bitwise AND
  SIGNAL BinOpOut_45 : unsigned(15 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_46 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_27 : unsigned(8 DOWNTO 0) := "000001010";
  -- Constant value
  CONSTANT ConstOut_28 : unsigned(8 DOWNTO 0) := "000001011";
  -- Constant value
  CONSTANT ConstOut_29 : unsigned(8 DOWNTO 0) := "000001100";
  -- Control path join
  SIGNAL CForkIn_4 : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_47 : std_logic;
  -- Constant value
  CONSTANT ConstOut_30 : unsigned(7 DOWNTO 0) := "00000001";
  -- Bitwise OR
  SIGNAL BinOpOut_48 : unsigned(7 DOWNTO 0);
  -- Test for equality
  SIGNAL BinOpOut_49 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_11 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_8 : std_logic;
  -- Constant value
  CONSTANT ConstOut_31 : unsigned(2 DOWNTO 0) := "001";
  -- Plus
  SIGNAL BinOpOut_50 : unsigned(2 DOWNTO 0);
  -- Test for equality
  SIGNAL BinOpOut_51 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_12 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_9 : std_logic;
  -- Minus
  SIGNAL BinOpOut_52 : unsigned(2 DOWNTO 0);
  -- Register 'length'
  SIGNAL length : unsigned(12 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_5 : std_logic;
  -- Constant value
  CONSTANT ConstOut_32 : unsigned(2 DOWNTO 0) := "000";
  -- Test for inequality
  SIGNAL BinOpOut_53 : std_logic;
  -- Concatenation
  SIGNAL BinOpOut_54 : unsigned(15 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_55 : unsigned(31 DOWNTO 0);
  -- Bitwise AND
  SIGNAL BinOpOut_56 : unsigned(31 DOWNTO 0);
  -- Test for equality
  SIGNAL BinOpOut_57 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_13 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_10 : std_logic;
  -- Plus
  SIGNAL BinOpOut_58 : unsigned(31 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL LoopZ_3 : std_logic;
  -- Control path join
  SIGNAL CForkIn_6 : std_logic;
  -- Concatenation
  SIGNAL BinOpOut_59 : unsigned(1 DOWNTO 0);
  -- Register 'int_timeout'
  SIGNAL int_timeout : unsigned(31 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_7 : std_logic;
  -- Constant value
  CONSTANT ConstOut_33 : unsigned(31 DOWNTO 0) := "11111111111111111111111111111100";
  -- Conditional true branch
  SIGNAL WireTrue_11 : std_logic;
  -- Bitwise OR
  SIGNAL BinOpOut_60 : unsigned(0 DOWNTO 0);
  -- Conditional false branch
  SIGNAL WireFalse_14 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_12 : std_logic;
  -- Constant value
  CONSTANT ConstOut_34 : unsigned(31 DOWNTO 0) := (OTHERS => '0');
  -- Bitwise AND
  SIGNAL BinOpOut_61 : unsigned(0 DOWNTO 0);
  -- Conditional false branch
  SIGNAL WireFalse_15 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_13 : std_logic;
  -- Constant value
  CONSTANT ConstOut_35 : unsigned(31 DOWNTO 0) := "00000000000000000000000000000001";
  -- Plus
  SIGNAL BinOpOut_62 : unsigned(31 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_8 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_14 : std_logic;
  -- Bitwise AND
  SIGNAL BinOpOut_63 : unsigned(15 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_9 : std_logic;
  -- Clock cycle delay
  SIGNAL Z_Dones_0 : std_logic;
  -- Control path join
  SIGNAL CForkIn_10 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_13 : std_logic;
  -- Control path join
  SIGNAL CJoinOut : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_64 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_16 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_15 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_14 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_15 : std_logic;
  -- Bit selection
  SIGNAL DefaultWire : std_logic;
  -- Bit selection
  SIGNAL LinkWire_2 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_3 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_4 : std_logic;
  -- Control path join
  SIGNAL CForkIn_11 : std_logic;
  -- One-Hot Multiplexer
  SIGNAL ConstOut_36 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL LoopZ_5 : unsigned(0 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_12 : std_logic;
  -- Bitwise OR
  SIGNAL BinOpOut_65 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_1_3 : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_66 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_17 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_16 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_67 : unsigned(5 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_68 : unsigned(2 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_69 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_70 : unsigned(0 DOWNTO 0);
  -- Bit selection
  SIGNAL LinkWire_0 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_2_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_3_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_4 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_5 : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_71 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_17 : std_logic;
  -- Constant value
  CONSTANT ConstOut_37 : unsigned(28 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_72 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_38 : unsigned(27 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_73 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_74 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_39 : unsigned(23 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_75 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_40 : unsigned(30 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_76 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_77 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_78 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_41 : unsigned(6 DOWNTO 0) := "0000000";
  -- Concatenation
  SIGNAL BinOpOut_79 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_80 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_42 : unsigned(22 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_81 : unsigned(31 DOWNTO 0);
  -- Bit selection
  SIGNAL DefaultWire_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_0_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_1_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_2_2 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_3_2 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_4_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_5_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_6 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_7 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_8 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_9 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_10 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_11 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_12 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_13 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_14 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_15 : std_logic;
  -- Conditional false branch
  SIGNAL False_fork_input : std_logic;
  -- Conditional true branch
  SIGNAL S_2 : std_logic;
  -- Bitwise OR
  SIGNAL S_3 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_4 : std_logic;
  -- Clock cycle delay
  SIGNAL S_5 : std_logic;
  -- Conditional false branch
  SIGNAL False_fork_input_1 : std_logic;
  -- Bitwise OR
  SIGNAL S_6 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_7 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_6 : std_logic;
  -- Control path join
  SIGNAL S_8 : std_logic;
  -- Clock cycle delay
  SIGNAL CForkIn_13 : std_logic;
  -- Control path join
  SIGNAL S_9 : std_logic;
  -- Clock cycle delay
  SIGNAL CForkIn_14 : std_logic;
  -- Control path join
  SIGNAL S_10 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_7 : std_logic;
  -- Control path join
  SIGNAL S_11 : std_logic;
  -- Clock cycle delay
  SIGNAL Z_Dones_0_1 : std_logic;
  -- Control path join
  SIGNAL S_12 : std_logic;
  -- Clock cycle delay
  SIGNAL Z_Dones_1_4 : std_logic;
  -- Control path join
  SIGNAL S_13 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_8 : std_logic;
  -- Control path join
  SIGNAL S_14 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_16 : std_logic;
  -- Control path join
  SIGNAL S_15 : std_logic;
  -- Concatenation
  SIGNAL BinOpOut_82 : unsigned(15 DOWNTO 0);
  -- Control path OR
  SIGNAL S_16 : std_logic;
  -- Control path OR
  SIGNAL S_17 : std_logic;
  -- Bitwise XOR
  SIGNAL S_18 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_19 : std_logic;
  -- Bitwise XOR
  SIGNAL S_20 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL int_timeout_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL int_timeout_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL need_new_desc_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL need_new_desc_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL page_free_space_MuxOut : unsigned(12 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL page_offset_MuxOut : unsigned(11 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL data_length_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL data_length_CE : std_logic;
  -- Bitwise XOR
  SIGNAL S_21 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_22 : std_logic;
  -- Bitwise XOR
  SIGNAL S_23 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL parts_MuxOut : unsigned(3 DOWNTO 0);
  -- Control path OR
  SIGNAL parts_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL BinOpOut_83 : unsigned(3 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL S_24 : unsigned(7 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_25 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_26 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_27 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_28 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_0 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_1_1 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_2_1 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_3_1 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_29 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_30 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_31 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_32 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_33 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_34 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_35 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_36 : unsigned(0 DOWNTO 0);
  -- MPRAM 'dma_mem'
  SIGNAL S_37 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_38 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_39 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_40 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_41 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_42 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_43 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_44 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_45 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_46 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_47 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_48 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_49 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_50 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_51 : std_logic;
  -- MPRAM 'dma_mem'
  SIGNAL S_52 : std_logic;
  -- One-Hot Multiplexer
  SIGNAL newDescReady_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL newDescReady_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL getNextDesc_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL getNextDesc_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL timeout_enable_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL timeout_enable_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL interrupt_enable_MuxOut : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL interrupt_reset_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL interrupt_reset_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL interrupt_mon_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL interrupt_mon_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL status_reg_MuxOut : unsigned(3 DOWNTO 0);
  -- Control path OR
  SIGNAL status_reg_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL sw_last_end_ptr_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL sw_last_end_ptr_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL sw_str_ptr_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL sw_str_ptr_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL dma_done_cnt_MuxOut : unsigned(2 DOWNTO 0);
  -- Control path OR
  SIGNAL dma_done_cnt_CE : std_logic;
  -- Control path inverter
  SIGNAL S_53 : std_logic;
  -- Bitwise AND
  SIGNAL AckOut : unsigned(0 DOWNTO 0);
  -- Register 'IdReg0'
  SIGNAL S_54 : unsigned(1 DOWNTO 0);
  -- Constant value
  CONSTANT C_0 : unsigned(1 DOWNTO 0) := "01";
  -- Plus
  SIGNAL S_55 : unsigned(1 DOWNTO 0);
  -- Register 'IdReg0'
  SIGNAL S_56 : unsigned(1 DOWNTO 0);
  -- Plus
  SIGNAL S_57 : unsigned(1 DOWNTO 0);
  -- Concatenation
  SIGNAL S_58 : unsigned(12 DOWNTO 0);
  -- Test for equality
  SIGNAL S_59 : std_logic;
  -- Bitwise XOR
  SIGNAL S_60 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL S_61 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_62 : std_logic;
  -- Bitwise not
  SIGNAL S_63 : unsigned(0 DOWNTO 0);
  -- Bitwise AND
  SIGNAL S_64 : unsigned(0 DOWNTO 0);
  -- Bitwise not
  SIGNAL S_65 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_66 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_67 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_68 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_69 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_0 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_1 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_2 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_3 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_4 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_5 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_6 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_7 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_8 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_9 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_10 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_11 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_12 : unsigned(0 DOWNTO 0);
  -- MPRAM 'FIFORam'
  SIGNAL S_70 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_71 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_72 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_73 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_74 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_75 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_76 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_77 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_78 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_79 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_80 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_81 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_82 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_83 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_84 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_85 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_86 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_87 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_88 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_89 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_90 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_91 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_92 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_93 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_94 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_95 : std_logic;
  -- One-Hot Multiplexer
  SIGNAL ifc_sw_drd_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL ifc_sw_drd_CE : std_logic;
  -- Constant value
  CONSTANT ifc_interrupt_1 : unsigned(1 DOWNTO 0) := "00";
  -- One-Hot Multiplexer
  SIGNAL debug_status_MuxOut : unsigned(8 DOWNTO 0);
  -- Control path OR
  SIGNAL debug_status_CE : std_logic;
  -- Bitwise AND
  SIGNAL S_96 : unsigned(0 DOWNTO 0);
  -- Bitwise AND
  SIGNAL S_97 : unsigned(0 DOWNTO 0);
  -- Bitwise AND
  SIGNAL S_98 : unsigned(0 DOWNTO 0);
  -- Bitwise OR
  SIGNAL S_99 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_2_1 : std_logic;
  -- Control path join
  SIGNAL S_100 : std_logic;
  -- Clock cycle delay
  SIGNAL S_101 : std_logic;
  -- Bitwise OR
  SIGNAL S_102 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_103 : std_logic;
  -- Clock cycle delay
  SIGNAL S_104 : std_logic;
  -- Clock cycle delay
  SIGNAL S_105 : std_logic;
  -- Clock cycle delay
  SIGNAL S_106 : std_logic;
  -- Bitwise OR
  SIGNAL S_107 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_108 : std_logic;
  -- Bitwise OR
  SIGNAL S_109 : unsigned(0 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables : std_logic_vector(11 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_1 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_2 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_3 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_4 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_5 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_6 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_7 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_8 : std_logic_vector(16 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_9 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_10 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_11 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_12 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_13 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_14 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_15 : std_logic_vector(2 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_16 : std_logic_vector(4 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_17 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_18 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_19 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_20 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_21 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_22 : std_logic_vector(2 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_23 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_24 : std_logic_vector(1 DOWNTO 0);
  -- Switch Decoder
  SIGNAL SwitchOut : std_logic_vector(16 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast : unsigned(31 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_1 : unsigned(31 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_2 : unsigned(31 DOWNTO 0);
  -- Switch Decoder
  SIGNAL SwitchOut_1 : std_logic_vector(6 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_3 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_25 : std_logic_vector(1 DOWNTO 0);
  -- Switch Decoder
  SIGNAL SwitchOut_2 : std_logic_vector(4 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_26 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_27 : std_logic_vector(2 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_28 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_29 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_30 : std_logic_vector(1 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_4 : unsigned(15 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_31 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_32 : std_logic_vector(1 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_5 : unsigned(3 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_6 : unsigned(3 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_7 : unsigned(3 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_8 : unsigned(3 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_33 : std_logic_vector(10 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_34 : std_logic_vector(10 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_12 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_11 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_10 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_9 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_8 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_7 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_6 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_5 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_4 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_3 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_2 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_1 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_0 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_D : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_DPRA2 : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_DPRA3 : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_WE : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_D : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_DPRA2 : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_DPRA3 : std_logic;
  -- Component Connector
  SIGNAL I1_dma_mem_tx_dma_ctrl_opt_299_WE : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_D : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_DPRA2 : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_DPRA3 : std_logic;
  -- Component Connector
  SIGNAL I2_dma_mem_tx_dma_ctrl_opt_299_WE : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_D : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_DPRA2 : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_DPRA3 : std_logic;
  -- Component Connector
  SIGNAL I3_dma_mem_tx_dma_ctrl_opt_299_WE : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_D : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_DPRA2 : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_DPRA3 : std_logic;
  -- Component Connector
  SIGNAL I4_dma_mem_tx_dma_ctrl_opt_299_WE : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_D : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_DPRA2 : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_DPRA3 : std_logic;
  -- Component Connector
  SIGNAL I5_dma_mem_tx_dma_ctrl_opt_299_WE : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_D : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_DPRA2 : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_DPRA3 : std_logic;
  -- Component Connector
  SIGNAL I6_dma_mem_tx_dma_ctrl_opt_299_WE : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_D : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_DPRA2 : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_DPRA3 : std_logic;
  -- Component Connector
  SIGNAL I7_dma_mem_tx_dma_ctrl_opt_299_WE : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_693_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_674_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_646_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_628_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_617_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_590_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_584_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_556_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_544_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_345_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_335_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_305_aclr_GND : std_logic;

BEGIN

  -- Processes:

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      IF ( PIN_RESET='1' ) THEN
        debug_status <= (OTHERS => '0');
        S_62 <= '0';
        S_56 <= "00";
        S_54 <= "00";
        dma_done_cnt <= "000";
        sw_str_ptr <= (OTHERS => '0');
        sw_last_end_ptr <= (OTHERS => '0');
        status_reg <= "0001";
        interrupt_mon <= (OTHERS => '0');
        interrupt_reset <= "0";
        interrupt_enable <= "0";
        timeout_enable <= "0";
        getNextDesc <= "0";
        newDescReady <= "0";
        Z_Dones_1_3 <= '0';
        S_19 <= '0';
        Z_Dones_2_1 <= '0';
        LoopZ_4 <= '0';
        SeqChain_13 <= '0';
        SeqChain_14 <= '0';
        SeqChain_15 <= '0';
        SeqChain_16 <= '0';
        Z_Dones_0 <= '0';
        LoopZ_8 <= '0';
        Z_Dones_1_4 <= '0';
        LoopZ_3 <= '0';
        LoopZ_7 <= '0';
        S_5 <= '0';
        S_4 <= '0';
        Z_Dones_0_1 <= '0';
        LoopZ_6 <= '0';
        SeqChain_4 <= '0';
        SeqChain_5 <= '0';
        S_7 <= '0';
        CForkIn_14 <= '0';
        SeqChain_11 <= '0';
        SeqChain_12 <= '0';
        SeqChain_7 <= '0';
        SeqChain_10 <= '0';
        SeqChain_9 <= '0';
        SeqChain_8 <= '0';
        Z_Dones_3_1 <= '0';
        CForkIn_13 <= '0';
        Z_Dones_1_2 <= '0';
        Z_Dones_2 <= '0';
        SeqChain_3 <= '0';
        Z_Dones_1_1 <= '0';
        LoopZ_2 <= '0';
        SeqChain_2 <= '0';
        Z_Dones_6 <= '0';
      ELSE
        -- Update of register 'debug_status'
        IF ( debug_status_CE='1' ) THEN
          debug_status <= debug_status_MuxOut;
        END IF;

        S_62 <= to_stdlogic(S_61);

        -- Update of register 'IdReg0'
        IF ( to_stdlogic(AckOut)='1' ) THEN
          S_56 <= S_57;
        END IF;

        -- Update of register 'IdReg0'
        IF ( to_stdlogic(S_64)='1' ) THEN
          S_54 <= S_55;
        END IF;

        -- Update of register 'dma_done_cnt'
        IF ( dma_done_cnt_CE='1' ) THEN
          dma_done_cnt <= dma_done_cnt_MuxOut;
        END IF;

        -- Update of register 'sw_str_ptr'
        IF ( sw_str_ptr_CE='1' ) THEN
          sw_str_ptr <= sw_str_ptr_MuxOut;
        END IF;

        -- Update of register 'sw_last_end_ptr'
        IF ( sw_last_end_ptr_CE='1' ) THEN
          sw_last_end_ptr <= sw_last_end_ptr_MuxOut;
        END IF;

        -- Update of register 'status_reg'
        IF ( status_reg_CE='1' ) THEN
          status_reg <= status_reg_MuxOut;
        END IF;

        -- Update of register 'interrupt_mon'
        IF ( interrupt_mon_CE='1' ) THEN
          interrupt_mon <= interrupt_mon_MuxOut;
        END IF;

        -- Update of register 'interrupt_reset'
        IF ( interrupt_reset_CE='1' ) THEN
          interrupt_reset <= interrupt_reset_MuxOut;
        END IF;

        -- Update of register 'interrupt_enable'
        IF ( timeout_enable_CE='1' ) THEN
          interrupt_enable <= interrupt_enable_MuxOut;
        END IF;

        -- Update of register 'timeout_enable'
        IF ( timeout_enable_CE='1' ) THEN
          timeout_enable <= timeout_enable_MuxOut;
        END IF;

        -- Update of register 'getNextDesc'
        IF ( getNextDesc_CE='1' ) THEN
          getNextDesc <= getNextDesc_MuxOut;
        END IF;

        -- Update of register 'newDescReady'
        IF ( newDescReady_CE='1' ) THEN
          newDescReady <= newDescReady_MuxOut;
        END IF;

        Z_Dones_1_3 <= CForkIn_12;
        S_19 <= to_stdlogic(S_18);
        Z_Dones_2_1 <= S_100;
        LoopZ_4 <= CForkIn_11;
        SeqChain_13 <= CJoinOut;
        SeqChain_14 <= LinkWire_3;
        SeqChain_15 <= DefaultWire;
        SeqChain_16 <= S_15;
        Z_Dones_0 <= CForkIn_9;
        LoopZ_8 <= S_14;
        Z_Dones_1_4 <= S_13;
        LoopZ_3 <= CForkIn_6;
        LoopZ_7 <= S_11;
        S_5 <= S_2;
        S_4 <= False_fork_input;
        Z_Dones_0_1 <= S_12;
        LoopZ_6 <= S_8;
        SeqChain_4 <= SeqChain_3;
        SeqChain_5 <= WireFalse_7;
        S_7 <= False_fork_input_1;
        CForkIn_14 <= S_10;
        SeqChain_11 <= SeqChain_12;
        SeqChain_12 <= SeqChain_7;
        SeqChain_7 <= SeqChain_10;
        SeqChain_10 <= SeqChain_9;
        SeqChain_9 <= SeqChain_8;
        SeqChain_8 <= Z_Dones_3_1;
        Z_Dones_3_1 <= WireFalse_9;
        CForkIn_13 <= S_9;
        Z_Dones_1_2 <= WireTrue_4;
        Z_Dones_2 <= BodyStart_2;
        SeqChain_3 <= Z_Dones_1_1;
        Z_Dones_1_1 <= WireFalse_6;
        LoopZ_2 <= WireTrue_3;
        SeqChain_2 <= Z_Dones_6;
        Z_Dones_6 <= WireTrue_1;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( MuxEnables ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables IS
      WHEN "100000000000" => debug_status_MuxOut <= ConstOut_7;
      WHEN "010000000000" => debug_status_MuxOut <= ConstOut_13;
      WHEN "001000000000" => debug_status_MuxOut <= ConstOut_16;
      WHEN "000100000000" => debug_status_MuxOut <= ConstOut_17;
      WHEN "000010000000" => debug_status_MuxOut <= ConstOut_19;
      WHEN "000001000000" => debug_status_MuxOut <= ConstOut_20;
      WHEN "000000100000" => debug_status_MuxOut <= ConstOut_21;
      WHEN "000000010000" => debug_status_MuxOut <= ConstOut_22;
      WHEN "000000001000" => debug_status_MuxOut <= ConstOut_26;
      WHEN "000000000100" => debug_status_MuxOut <= ConstOut_27;
      WHEN "000000000010" => debug_status_MuxOut <= ConstOut_28;
      WHEN "000000000001" => debug_status_MuxOut <= ConstOut_29;
      WHEN OTHERS => debug_status_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_59, MuxEnables_1 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_1 IS
      WHEN "10" => ifc_interrupt <= BinOpOut_59;
      WHEN "01" => ifc_interrupt <= ifc_interrupt_1;
      WHEN OTHERS => ifc_interrupt <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_2 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_2 IS
      WHEN "10" => ifc_interrupt0 <= ConstOut_2;
      WHEN "01" => ifc_interrupt0 <= ConstOut;
      WHEN OTHERS => ifc_interrupt0 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_3 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_3 IS
      WHEN "10" => ifc_interrupt1 <= ConstOut_2;
      WHEN "01" => ifc_interrupt1 <= ConstOut;
      WHEN OTHERS => ifc_interrupt1 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( ConstOut_36, MuxEnables_4 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_4 IS
      WHEN "10" => ifc_enable <= ConstOut_36;
      WHEN "01" => ifc_enable <= ConstOut;
      WHEN OTHERS => ifc_enable <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_54, MuxEnables_5 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_5 IS
      WHEN "10" => ifc_buf_newlen <= BinOpOut_54;
      WHEN "01" => ifc_buf_newlen <= ConstOut_15;
      WHEN OTHERS => ifc_buf_newlen <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_6 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_6 IS
      WHEN "10" => ifc_desc_read <= ConstOut_2;
      WHEN "01" => ifc_desc_read <= ConstOut;
      WHEN OTHERS => ifc_desc_read <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_65, MuxEnables_7 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_7 IS
      WHEN "10" => ifc_sw_ardy <= BinOpOut_65;
      WHEN "01" => ifc_sw_ardy <= ConstOut;
      WHEN OTHERS => ifc_sw_ardy <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      -- Update of register 'ifc_sw_drd'
      IF ( ifc_sw_drd_CE='1' ) THEN
        ifc_sw_drd <= ifc_sw_drd_MuxOut;
      END IF;

      -- Update of register 'int_timeout'
      IF ( int_timeout_CE='1' ) THEN
        int_timeout <= int_timeout_MuxOut;
      END IF;

      -- Update of register 'length'
      IF ( S_2='1' ) THEN
        length <= S_58;
      END IF;

      -- Update of register 'data_length'
      IF ( data_length_CE='1' ) THEN
        data_length <= data_length_MuxOut;
      END IF;

      -- Update of register 'page_offset'
      IF ( need_new_desc_CE='1' ) THEN
        page_offset <= page_offset_MuxOut;
      END IF;

      -- Update of register 'page_free_space'
      IF ( need_new_desc_CE='1' ) THEN
        page_free_space <= page_free_space_MuxOut;
      END IF;

      -- Update of register 'need_new_desc'
      IF ( need_new_desc_CE='1' ) THEN
        need_new_desc <= need_new_desc_MuxOut;
      END IF;

      -- Update of register 'mem_length'
      IF ( WireFalse_9='1' ) THEN
        mem_length <= BinOpOut_27;
      END IF;

      -- Update of register 'mem_l_addr'
      IF ( WireFalse_9='1' ) THEN
        mem_l_addr <= BinOpOut_36;
      END IF;

      -- Update of register 'parts'
      IF ( parts_CE='1' ) THEN
        parts <= parts_MuxOut;
      END IF;

      -- Update of register 'hw_buffer_free_space'
      IF ( CForkIn_1='1' ) THEN
        hw_buffer_free_space <= BinOpOut_7;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( sw_str_ptr, sw_end_ptr, interrupt_reg, timeout_reg, sw_buffer_mask, BinOpOut_23, BinOpOut_72, 
    BinOpOut_73, BinOpOut_74, BinOpOut_75, BinOpOut_76, BinOpOut_77, BinOpOut_78, BinOpOut_79, BinOpOut_80, 
    BinOpOut_81, MuxEnables_8 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_8 IS
      WHEN "10000000000000000" => ifc_sw_drd_MuxOut <= BinOpOut_72;
      WHEN "01000000000000000" => ifc_sw_drd_MuxOut <= BinOpOut_73;
      WHEN "00100000000000000" => ifc_sw_drd_MuxOut <= sw_str_ptr;
      WHEN "00010000000000000" => ifc_sw_drd_MuxOut <= sw_end_ptr;
      WHEN "00001000000000000" => ifc_sw_drd_MuxOut <= sw_buffer_mask;
      WHEN "00000100000000000" => ifc_sw_drd_MuxOut <= interrupt_reg;
      WHEN "00000010000000000" => ifc_sw_drd_MuxOut <= timeout_reg;
      WHEN "00000001000000000" => ifc_sw_drd_MuxOut <= BinOpOut_23;
      WHEN "00000000100000000" => ifc_sw_drd_MuxOut <= BinOpOut_74;
      WHEN "00000000010000000" => ifc_sw_drd_MuxOut <= BinOpOut_75;
      WHEN "00000000001000000" => ifc_sw_drd_MuxOut <= BinOpOut_76;
      WHEN "00000000000100000" => ifc_sw_drd_MuxOut <= BinOpOut_77;
      WHEN "00000000000010000" => ifc_sw_drd_MuxOut <= BinOpOut_78;
      WHEN "00000000000001000" => ifc_sw_drd_MuxOut <= BinOpOut_79;
      WHEN "00000000000000100" => ifc_sw_drd_MuxOut <= BinOpOut_80;
      WHEN "00000000000000010" => ifc_sw_drd_MuxOut <= BinOpOut_81;
      WHEN "00000000000000001" => ifc_sw_drd_MuxOut <= ConstOut_34;
      WHEN OTHERS => ifc_sw_drd_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( S_0, MuxEnables_9 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_9 IS
      WHEN "10" => ifc_dma_dout <= S_0;
      WHEN "01" => ifc_dma_dout <= ConstOut_9;
      WHEN OTHERS => ifc_dma_dout <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_10 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_10 IS
      WHEN "10" => ifc_dma_req <= ConstOut_2;
      WHEN "01" => ifc_dma_req <= ConstOut;
      WHEN OTHERS => ifc_dma_req <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( S_62, S_64, MuxEnables_11 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_11 IS
      WHEN "10" => S_61 <= to_unsigned(S_62);
      WHEN "01" => S_61 <= S_64;
      WHEN OTHERS => S_61 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_12 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_12 IS
      WHEN "10" => dma_done_release <= ConstOut_2;
      WHEN "01" => dma_done_release <= ConstOut;
      WHEN OTHERS => dma_done_release <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_50, BinOpOut_52, MuxEnables_13 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_13 IS
      WHEN "10" => dma_done_cnt_MuxOut <= BinOpOut_50;
      WHEN "01" => dma_done_cnt_MuxOut <= BinOpOut_52;
      WHEN OTHERS => dma_done_cnt_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( SW_DWR, BinOpOut_56, MuxEnables_14 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_14 IS
      WHEN "10" => sw_str_ptr_MuxOut <= BinOpOut_56;
      WHEN "01" => sw_str_ptr_MuxOut <= UNSIGNED(SW_DWR);
      WHEN OTHERS => sw_str_ptr_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( sw_str_ptr, BinOpOut_31, BinOpOut_32, MuxEnables_15 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_15 IS
      WHEN "100" => sw_last_end_ptr_MuxOut <= sw_str_ptr;
      WHEN "010" => sw_last_end_ptr_MuxOut <= BinOpOut_31;
      WHEN "001" => sw_last_end_ptr_MuxOut <= BinOpOut_32;
      WHEN OTHERS => sw_last_end_ptr_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_16 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_16 IS
      WHEN "10000" => status_reg_MuxOut <= ConstOut_4;
      WHEN "01000" => status_reg_MuxOut <= ConstOut_3;
      WHEN "00100" => status_reg_MuxOut <= ConstOut_12;
      WHEN "00010" => status_reg_MuxOut <= ConstOut_11;
      WHEN "00001" => status_reg_MuxOut <= ConstOut_1;
      WHEN OTHERS => status_reg_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_55, BinOpOut_58, MuxEnables_17 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_17 IS
      WHEN "10" => interrupt_mon_MuxOut <= BinOpOut_55;
      WHEN "01" => interrupt_mon_MuxOut <= BinOpOut_58;
      WHEN OTHERS => interrupt_mon_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_18 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_18 IS
      WHEN "10" => interrupt_reset_MuxOut <= ConstOut;
      WHEN "01" => interrupt_reset_MuxOut <= ConstOut_2;
      WHEN OTHERS => interrupt_reset_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_69, MuxEnables_19 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_19 IS
      WHEN "10" => interrupt_enable_MuxOut <= ConstOut;
      WHEN "01" => interrupt_enable_MuxOut <= BinOpOut_69;
      WHEN OTHERS => interrupt_enable_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_70, MuxEnables_20 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_20 IS
      WHEN "10" => timeout_enable_MuxOut <= ConstOut;
      WHEN "01" => timeout_enable_MuxOut <= BinOpOut_70;
      WHEN OTHERS => timeout_enable_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_21 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_21 IS
      WHEN "10" => hw_buffer_full <= ConstOut_2;
      WHEN "01" => hw_buffer_full <= ConstOut;
      WHEN OTHERS => hw_buffer_full <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( need_new_desc, MuxEnables_22 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_22 IS
      WHEN "100" => getNextDesc_MuxOut <= ConstOut;
      WHEN "010" => getNextDesc_MuxOut <= ConstOut_2;
      WHEN "001" => getNextDesc_MuxOut <= need_new_desc;
      WHEN OTHERS => getNextDesc_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_23 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_23 IS
      WHEN "10" => newDescReady_MuxOut <= ConstOut;
      WHEN "01" => newDescReady_MuxOut <= ConstOut_2;
      WHEN OTHERS => newDescReady_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( Z_Dones_1_3, S_19, MuxEnables_24 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_24 IS
      WHEN "10" => LoopZ_5 <= to_unsigned(S_19);
      WHEN "01" => LoopZ_5 <= to_unsigned(Z_Dones_1_3);
      WHEN OTHERS => LoopZ_5 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_67, WireTrue_17 ) BEGIN
    -- Switch Decoder
    CASE BinOpOut_67 IS
      WHEN "000000" => SwitchOut <= WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "000100" => SwitchOut <= '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "001000" => SwitchOut <= '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "001100" => SwitchOut <= '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "010000" => SwitchOut <= '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "010100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "011000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "011100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "100000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "100100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "101000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "101100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0' & '0' & '0' & '0' & '0';
      WHEN "110000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0' & '0' & '0' & '0';
      WHEN "110100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0' & '0' & '0';
      WHEN "111000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0' & '0';
      WHEN "111100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0';
      WHEN OTHERS => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17;
    END CASE;
  END PROCESS;

  PROCESS( WireTrue_16, BinOpOut_67 ) BEGIN
    -- Switch Decoder
    CASE BinOpOut_67 IS
      WHEN "000000" => SwitchOut_1 <= WireTrue_16 & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "001000" => SwitchOut_1 <= '0' & WireTrue_16 & '0' & '0' & '0' & '0' & '0';
      WHEN "001100" => SwitchOut_1 <= '0' & '0' & WireTrue_16 & '0' & '0' & '0' & '0';
      WHEN "010000" => SwitchOut_1 <= '0' & '0' & '0' & WireTrue_16 & '0' & '0' & '0';
      WHEN "010100" => SwitchOut_1 <= '0' & '0' & '0' & '0' & WireTrue_16 & '0' & '0';
      WHEN "011000" => SwitchOut_1 <= '0' & '0' & '0' & '0' & '0' & WireTrue_16 & '0';
      WHEN OTHERS => SwitchOut_1 <= '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_16;
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_25 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_25 IS
      WHEN "10" => ConstOut_36 <= ConstOut;
      WHEN "01" => ConstOut_36 <= ConstOut_2;
      WHEN OTHERS => ConstOut_36 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( control_reg, CForkIn_10 ) BEGIN
    -- Switch Decoder
    CASE control_reg IS
      WHEN "000" => SwitchOut_2 <= CForkIn_10 & '0' & '0' & '0' & '0';
      WHEN "100" => SwitchOut_2 <= '0' & CForkIn_10 & '0' & '0' & '0';
      WHEN "001" => SwitchOut_2 <= '0' & '0' & CForkIn_10 & '0' & '0';
      WHEN "010" => SwitchOut_2 <= '0' & '0' & '0' & CForkIn_10 & '0';
      WHEN OTHERS => SwitchOut_2 <= '0' & '0' & '0' & '0' & CForkIn_10;
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_62, MuxEnables_26 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_26 IS
      WHEN "10" => int_timeout_MuxOut <= ConstOut_34;
      WHEN "01" => int_timeout_MuxOut <= BinOpOut_62;
      WHEN OTHERS => int_timeout_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_17, BinOpOut_23, BinOpOut_25, MuxEnables_27 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_27 IS
      WHEN "100" => data_length_MuxOut <= BinOpOut_17;
      WHEN "010" => data_length_MuxOut <= BinOpOut_23;
      WHEN "001" => data_length_MuxOut <= BinOpOut_25;
      WHEN OTHERS => data_length_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_28, MuxEnables_28 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_28 IS
      WHEN "10" => page_offset_MuxOut <= ConstOut_6;
      WHEN "01" => page_offset_MuxOut <= BinOpOut_28;
      WHEN OTHERS => page_offset_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_30, MuxEnables_29 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_29 IS
      WHEN "10" => page_free_space_MuxOut <= ConstOut_5;
      WHEN "01" => page_free_space_MuxOut <= BinOpOut_30;
      WHEN OTHERS => page_free_space_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_30 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_30 IS
      WHEN "10" => need_new_desc_MuxOut <= ConstOut_2;
      WHEN "01" => need_new_desc_MuxOut <= ConstOut;
      WHEN OTHERS => need_new_desc_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      IF ( PIN_RESET='1' ) THEN
        LoopZ_1 <= '0';
        SeqChain_1 <= '0';
        LoopZ <= '0';
        Z_Dones_3 <= '0';
        Z_Dones_1 <= '0';
        S_22 <= '0';
        BodyEnd_1 <= '0';
        BodyEnd <= '0';
        S_108 <= '0';
        S_106 <= '0';
        S_105 <= '0';
        S_104 <= '0';
        S_103 <= '0';
        S_101 <= '0';
        sw_buffer_mask <= (OTHERS => '0');
        timeout_reg <= "00000000000000000000000000001010";
        interrupt_reg <= (OTHERS => '0');
        control_reg <= "100";
        hw_str_ptr <= (OTHERS => '0');
        hw_end_ptr <= (OTHERS => '0');
        hw_buffer_mask <= (OTHERS => '0');
        sw_end_ptr <= (OTHERS => '0');
        ifc_sw_drdy <= "0";
        cnt_desc_empty <= "00000000";
        cnt_down_descs <= "00000000";
        cnt_no_space <= "00000000";
        cnt_space_available <= "00000000";
        cnt_not_buf_rellen <= "00000000";
        cnt_dma_ack <= "00000000";
      ELSE
        LoopZ_1 <= CForkIn_1;
        SeqChain_1 <= WireFalse_1;
        LoopZ <= SeqChain_1;
        Z_Dones_3 <= WireTrue;
        Z_Dones_1 <= WireFalse;
        S_22 <= to_stdlogic(S_21);
        BodyEnd_1 <= BodyStart_1;
        BodyEnd <= BodyStart;
        S_108 <= to_stdlogic(S_109);
        S_106 <= to_stdlogic(S_107);
        S_105 <= S_106;
        S_104 <= S_105;
        S_103 <= S_101;
        S_101 <= to_stdlogic(S_102);

        -- Update of register 'sw_buffer_mask'
        IF ( LinkWire_3_1='1' ) THEN
          sw_buffer_mask <= UNSIGNED(SW_DWR);
        END IF;

        -- Update of register 'timeout_reg'
        IF ( LinkWire_5='1' ) THEN
          timeout_reg <= UNSIGNED(SW_DWR);
        END IF;

        -- Update of register 'interrupt_reg'
        IF ( LinkWire_4='1' ) THEN
          interrupt_reg <= UNSIGNED(SW_DWR);
        END IF;

        -- Update of register 'control_reg'
        IF ( LinkWire_0='1' ) THEN
          control_reg <= BinOpOut_68;
        END IF;

        -- Update of register 'hw_str_ptr'
        IF ( WireTrue_14='1' ) THEN
          hw_str_ptr <= BinOpOut_63;
        END IF;

        -- Update of register 'hw_end_ptr'
        IF ( WireFalse_10='1' ) THEN
          hw_end_ptr <= BinOpOut_45;
        END IF;

        -- Update of register 'hw_buffer_mask'
        IF ( WireTrue_1='1' ) THEN
          hw_buffer_mask <= BinOpOut_9;
        END IF;

        -- Update of register 'sw_end_ptr'
        IF ( LinkWire_2_1='1' ) THEN
          sw_end_ptr <= UNSIGNED(SW_DWR);
        END IF;

        -- Update of register 'ifc_sw_drdy'
        IF ( CForkIn_12='1' ) THEN
          ifc_sw_drdy <= to_unsigned(SW_RD);
        END IF;

        -- Update of register 'cnt_desc_empty'
        IF ( BodyStart_1='1' ) THEN
          cnt_desc_empty <= BinOpOut_2;
        END IF;

        -- Update of register 'cnt_down_descs'
        IF ( WireTrue='1' ) THEN
          cnt_down_descs <= BinOpOut_5;
        END IF;

        -- Update of register 'cnt_no_space'
        IF ( BodyStart_2='1' ) THEN
          cnt_no_space <= BinOpOut_21;
        END IF;

        -- Update of register 'cnt_space_available'
        IF ( WireFalse_7='1' ) THEN
          cnt_space_available <= BinOpOut_22;
        END IF;

        -- Update of register 'cnt_not_buf_rellen'
        IF ( WireTrue_6='1' ) THEN
          cnt_not_buf_rellen <= BinOpOut_33;
        END IF;

        -- Update of register 'cnt_dma_ack'
        IF ( WireFalse_10='1' ) THEN
          cnt_dma_ack <= BinOpOut_46;
        END IF;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( BinOpOut_4, MuxEnables_31 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_31 IS
      WHEN "10" => parts_MuxOut <= ConstOut_1;
      WHEN "01" => parts_MuxOut <= BinOpOut_4;
      WHEN OTHERS => parts_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( Z_Dones_1, S_22, MuxEnables_32 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_32 IS
      WHEN "10" => SeqChain <= to_unsigned(S_22);
      WHEN "01" => SeqChain <= to_unsigned(Z_Dones_1);
      WHEN OTHERS => SeqChain <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( DESC_DO, BinOpOut_11, BinOpOut_12, BinOpOut_18, BinOpOut_19, BinOpOut_37, BinOpOut_38, BinOpOut_39, 
    BinOpOut_40, BinOpOut_42, BinOpOut_43, MuxEnables_33 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_33 IS
      WHEN "10000000000" => S_24 <= UNSIGNED(DESC_DO);
      WHEN "01000000000" => S_24 <= BinOpOut_11;
      WHEN "00100000000" => S_24 <= BinOpOut_12;
      WHEN "00010000000" => S_24 <= BinOpOut_18;
      WHEN "00001000000" => S_24 <= BinOpOut_19;
      WHEN "00000100000" => S_24 <= BinOpOut_37;
      WHEN "00000010000" => S_24 <= BinOpOut_38;
      WHEN "00000001000" => S_24 <= BinOpOut_39;
      WHEN "00000000100" => S_24 <= BinOpOut_40;
      WHEN "00000000010" => S_24 <= BinOpOut_42;
      WHEN "00000000001" => S_24 <= BinOpOut_43;
      WHEN OTHERS => S_24 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_3, MuxEnables_34 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_34 IS
      WHEN "10000000000" => BinOpOut_83 <= ConstOut_1;
      WHEN "01000000000" => BinOpOut_83 <= BinOpOut_3;
      WHEN "00100000000" => BinOpOut_83 <= ConstOut_3;
      WHEN "00010000000" => BinOpOut_83 <= ConstOut_4;
      WHEN "00001000000" => BinOpOut_83 <= ConstOut_10;
      WHEN "00000100000" => BinOpOut_83 <= ConstOut_11;
      WHEN "00000010000" => BinOpOut_83 <= ConstOut_12;
      WHEN "00000001000" => BinOpOut_83 <= ConstOut_14;
      WHEN "00000000100" => BinOpOut_83 <= ConstOut_23;
      WHEN "00000000010" => BinOpOut_83 <= ConstOut_24;
      WHEN "00000000001" => BinOpOut_83 <= ConstOut_25;
      WHEN OTHERS => BinOpOut_83 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;


  -- Combinational expressions:

  debug_status_CE <= WireTrue_1 or WireFalse_6 or BodyStart_2 or WireTrue_4 or WireTrue_5 or WireFalse_8 or 
    WireTrue_6 or WireFalse_9 or WireTrue_7 or WireFalse_10 or WireFalse_5 or WireFalse_4;
  MuxEnables <= WireTrue_1 & WireFalse_6 & BodyStart_2 & WireTrue_4 & WireTrue_5 & WireFalse_8 & WireTrue_6 & 
    WireFalse_9 & WireTrue_7 & WireFalse_10 & WireFalse_5 & WireFalse_4;
  MuxEnables_1 <= CForkIn_6 & not(CForkIn_6);
  MuxEnables_2 <= WireTrue_11 & not(WireTrue_11);
  MuxEnables_3 <= WireTrue_13 & not(WireTrue_13);
  MuxEnables_4 <= CForkIn_11 & not(CForkIn_11);
  MuxEnables_5 <= S_5 & S_53;
  MuxEnables_6 <= WireTrue & not(WireTrue);
  MuxEnables_7 <= CForkIn_12 & not(CForkIn_12);
  ifc_sw_drd_CE <= LinkWire_0_1 or LinkWire_1_1 or LinkWire_2_2 or LinkWire_3_2 or LinkWire_4_1 or LinkWire_5_1 or 
    LinkWire_6 or LinkWire_7 or LinkWire_8 or LinkWire_9 or LinkWire_10 or LinkWire_11 or LinkWire_12 or 
    LinkWire_13 or LinkWire_14 or LinkWire_15 or DefaultWire_1;
  MuxEnables_8 <= LinkWire_0_1 & LinkWire_1_1 & LinkWire_2_2 & LinkWire_3_2 & LinkWire_4_1 & LinkWire_5_1 & 
    LinkWire_6 & LinkWire_7 & LinkWire_8 & LinkWire_9 & LinkWire_10 & LinkWire_11 & LinkWire_12 & LinkWire_13 & 
    LinkWire_14 & LinkWire_15 & DefaultWire_1;
  MuxEnables_9 <= CForkIn_9 & not(CForkIn_9);
  MuxEnables_10 <= SeqChain_11 & not(SeqChain_11);
  DataIntoFIFO_0 <= BinOpOut_29(0 DOWNTO 0);
  DataIntoFIFO_1 <= BinOpOut_29(1 DOWNTO 1);
  DataIntoFIFO_2 <= BinOpOut_29(2 DOWNTO 2);
  DataIntoFIFO_3 <= BinOpOut_29(3 DOWNTO 3);
  DataIntoFIFO_4 <= BinOpOut_29(4 DOWNTO 4);
  DataIntoFIFO_5 <= BinOpOut_29(5 DOWNTO 5);
  DataIntoFIFO_6 <= BinOpOut_29(6 DOWNTO 6);
  DataIntoFIFO_7 <= BinOpOut_29(7 DOWNTO 7);
  DataIntoFIFO_8 <= BinOpOut_29(8 DOWNTO 8);
  DataIntoFIFO_9 <= BinOpOut_29(9 DOWNTO 9);
  DataIntoFIFO_10 <= BinOpOut_29(10 DOWNTO 10);
  DataIntoFIFO_11 <= BinOpOut_29(11 DOWNTO 11);
  DataIntoFIFO_12 <= BinOpOut_29(12 DOWNTO 12);
  S_68 <= S_54(0 DOWNTO 0);
  S_69 <= S_54(1 DOWNTO 1);
  S_58 <= to_unsigned(S_82) & to_unsigned(S_81) & to_unsigned(S_80) & to_unsigned(S_79) & to_unsigned(S_78) & 
    to_unsigned(S_77) & to_unsigned(S_76) & to_unsigned(S_75) & to_unsigned(S_74) & to_unsigned(S_73) & 
    to_unsigned(S_72) & to_unsigned(S_71) & to_unsigned(S_70);
  S_66 <= S_56(0 DOWNTO 0);
  S_67 <= S_56(1 DOWNTO 1);
  S_65 <= not((to_unsigned(S_59) and not(to_unsigned(S_62))));
  S_64 <= S_63 and S_6;
  S_63 <= not((to_unsigned(S_59) and to_unsigned(S_62)));
  MuxEnables_11 <= to_stdlogic(not(S_60)) & to_stdlogic(S_60);
  S_60 <= S_64 xor AckOut;
  S_59 <= to_stdlogic(S_54 = S_56);
  S_57 <= S_56 + C_0;
  S_55 <= S_54 + C_0;
  AckOut <= S_3 and S_65;
  MuxEnables_12 <= S_5 & S_53;
  S_53 <= not(S_5);
  dma_done_cnt_CE <= WireTrue_8 or WireTrue_9;
  MuxEnables_13 <= WireTrue_8 & WireTrue_9;
  sw_str_ptr_CE <= S_5 or LinkWire_1;
  MuxEnables_14 <= S_5 & LinkWire_1;
  sw_last_end_ptr_CE <= WireTrue_1 or WireTrue_5 or WireFalse_8;
  MuxEnables_15 <= WireTrue_1 & WireTrue_5 & WireFalse_8;
  status_reg_CE <= CJoinOut or WireTrue_15 or WireFalse_16 or LinkWire_3 or DefaultWire;
  MuxEnables_16 <= CJoinOut & WireTrue_15 & WireFalse_16 & LinkWire_3 & DefaultWire;
  interrupt_mon_CE <= WireTrue_10 or WireFalse_13;
  MuxEnables_17 <= WireTrue_10 & WireFalse_13;
  interrupt_reset_CE <= WireTrue_10 or LinkWire_4;
  MuxEnables_18 <= WireTrue_10 & LinkWire_4;
  MuxEnables_19 <= S_17 & LinkWire_4;
  timeout_enable_CE <= S_17 or LinkWire_4;
  MuxEnables_20 <= S_17 & LinkWire_4;
  MuxEnables_21 <= BodyStart_2 & not(BodyStart_2);
  getNextDesc_CE <= SeqChain_1 or WireTrue_1 or WireFalse_10;
  MuxEnables_22 <= SeqChain_1 & WireTrue_1 & WireFalse_10;
  newDescReady_CE <= WireFalse or WireFalse_1 or WireFalse_8;
  MuxEnables_23 <= to_stdlogic(to_unsigned(WireFalse) or to_unsigned(WireFalse_8)) & WireFalse_1;
  S_18 <= to_unsigned(S_19) xor S_20;
  MuxEnables_24 <= to_stdlogic(S_20) & to_stdlogic(not(S_20));
  S_20 <= to_unsigned(Z_Dones_1_3) xor to_unsigned(Z_Dones_2_1);
  BinOpOut_81 <= ConstOut_42 & debug_status;
  BinOpOut_80 <= ConstOut_9 & cnt_no_space & cnt_down_descs & cnt_desc_empty;
  BinOpOut_79 <= ConstOut_41 & to_unsigned(DMA_DONE) & cnt_dma_ack & cnt_not_buf_rellen & cnt_space_available;
  BinOpOut_78 <= ConstOut_40 & dma_done_release;
  BinOpOut_77 <= ConstOut_15 & ifc_buf_newlen;
  BinOpOut_76 <= ConstOut_40 & to_unsigned(DESC_EMPTY);
  BinOpOut_75 <= ConstOut_39 & UNSIGNED(DESC_DO);
  BinOpOut_74 <= hw_end_ptr & hw_str_ptr;
  BinOpOut_73 <= ConstOut_38 & status_reg;
  BinOpOut_72 <= ConstOut_37 & control_reg;
  LinkWire_0_1 <= SwitchOut(16);
  LinkWire_1_1 <= SwitchOut(15);
  LinkWire_2_2 <= SwitchOut(14);
  LinkWire_3_2 <= SwitchOut(13);
  LinkWire_4_1 <= SwitchOut(12);
  LinkWire_5_1 <= SwitchOut(11);
  LinkWire_6 <= SwitchOut(10);
  LinkWire_7 <= SwitchOut(9);
  LinkWire_8 <= SwitchOut(8);
  LinkWire_9 <= SwitchOut(7);
  LinkWire_10 <= SwitchOut(6);
  LinkWire_11 <= SwitchOut(5);
  LinkWire_12 <= SwitchOut(4);
  LinkWire_13 <= SwitchOut(3);
  LinkWire_14 <= SwitchOut(2);
  LinkWire_15 <= SwitchOut(1);
  DefaultWire_1 <= SwitchOut(0);
  WireTrue_17 <= WireFalse_17 and BinOpOut_71;
  BinOpOut_71 <= to_stdlogic(to_unsigned(SW_RD) = ConstOut_2);
  RangeCast <= UNSIGNED(SW_DWR);
  BinOpOut_70 <= RangeCast(0 DOWNTO 0);
  RangeCast_1 <= UNSIGNED(SW_DWR);
  BinOpOut_69 <= RangeCast_1(1 DOWNTO 1);
  RangeCast_2 <= UNSIGNED(SW_DWR);
  BinOpOut_68 <= RangeCast_2(2 DOWNTO 0);
  LinkWire_0 <= SwitchOut_1(6);
  LinkWire_1 <= SwitchOut_1(5);
  LinkWire_2_1 <= SwitchOut_1(4);
  LinkWire_3_1 <= SwitchOut_1(3);
  LinkWire_4 <= SwitchOut_1(2);
  LinkWire_5 <= SwitchOut_1(1);
  RangeCast_3 <= UNSIGNED(SW_ADDR);
  BinOpOut_67 <= RangeCast_3(5 DOWNTO 0);
  S_100 <= LinkWire_15 or LinkWire_14 or LinkWire_13 or LinkWire_12 or LinkWire_11 or LinkWire_10 or 
    LinkWire_9 or LinkWire_8 or LinkWire_7 or LinkWire_6 or LinkWire_5_1 or LinkWire_4_1 or LinkWire_3_2 or 
    LinkWire_2_2 or LinkWire_1_1 or LinkWire_0_1 or DefaultWire_1 or (WireFalse_17 and not(BinOpOut_71)) or 
    LinkWire_5 or LinkWire_4 or LinkWire_3_1 or LinkWire_2_1 or LinkWire_1 or LinkWire_0 or SwitchOut_1(0);
  WireTrue_16 <= CForkIn_12 and BinOpOut_66;
  WireFalse_17 <= CForkIn_12 and not(BinOpOut_66);
  BinOpOut_66 <= to_stdlogic(to_unsigned(SW_WR) = ConstOut_2);
  BinOpOut_65 <= to_unsigned(SW_WR) or to_unsigned(SW_RD);
  CForkIn_12 <= StartOut_11 or to_stdlogic(LoopZ_5);
  MuxEnables_25 <= BinOpOut_8 & not(BinOpOut_8);
  CForkIn_11 <= StartOut_10 or LoopZ_4;
  S_15 <= WireTrue_15 or WireFalse_16;
  WireTrue_15 <= LinkWire_2 and BinOpOut_64;
  WireFalse_16 <= LinkWire_2 and not(BinOpOut_64);
  BinOpOut_64 <= to_stdlogic(hw_buffer_full = ConstOut_2);
  CJoinOut <= SwitchOut_2(4) or SwitchOut_2(3);
  LinkWire_2 <= SwitchOut_2(2);
  LinkWire_3 <= SwitchOut_2(1);
  DefaultWire <= SwitchOut_2(0);
  CForkIn_10 <= SeqChain_16 or SeqChain_15 or SeqChain_14 or SeqChain_13 or StartOut_9;
  CForkIn_9 <= StartOut_8 or Z_Dones_0;
  BinOpOut_63 <= hw_buffer_mask and (hw_str_ptr + UNSIGNED(BUF_RELLEN));
  S_14 <= WireTrue_14 or (CForkIn_8 and not(BinOpOut_34));
  WireTrue_14 <= CForkIn_8 and BinOpOut_34;
  CForkIn_8 <= StartOut_7 or LoopZ_8;
  int_timeout_CE <= WireTrue_12 or WireFalse_15;
  MuxEnables_26 <= WireTrue_12 & WireFalse_15;
  BinOpOut_62 <= int_timeout + ConstOut_35;
  WireTrue_13 <= WireFalse_14 and to_stdlogic(BinOpOut_61);
  WireFalse_15 <= WireFalse_14 and not(to_stdlogic(BinOpOut_61));
  BinOpOut_61 <= to_unsigned(to_stdlogic(timeout_enable = ConstOut_2)) and to_unsigned(to_stdlogic(int_timeout >= 
    timeout_reg));
  S_13 <= WireTrue_13 or WireFalse_15 or WireTrue_12;
  WireTrue_12 <= CForkIn_7 and to_stdlogic(BinOpOut_60);
  WireFalse_14 <= CForkIn_7 and not(to_stdlogic(BinOpOut_60));
  BinOpOut_60 <= to_unsigned(BinOpOut_51) or to_unsigned(BinOpOut_57);
  S_96 <= to_unsigned(to_stdlogic(interrupt_reset = ConstOut)) and to_unsigned(to_stdlogic(interrupt_mon >= 
    (interrupt_reg and ConstOut_33))) and to_unsigned(to_stdlogic(interrupt_enable = ConstOut_2));
  WireTrue_11 <= CForkIn_7 and to_stdlogic(S_96);
  CForkIn_7 <= StartOut_6 or Z_Dones_1_4;
  BinOpOut_59 <= ifc_interrupt1 & ifc_interrupt0;
  CForkIn_6 <= StartOut_5 or LoopZ_3;
  BinOpOut_58 <= interrupt_mon + BinOpOut_55;
  WireTrue_10 <= S_5 and BinOpOut_57;
  WireFalse_13 <= S_5 and not(BinOpOut_57);
  BinOpOut_57 <= to_stdlogic(interrupt_reset = ConstOut_2);
  BinOpOut_56 <= (sw_str_ptr + BinOpOut_55) and sw_buffer_mask;
  BinOpOut_55 <= ConstOut_18 & length;
  BinOpOut_54 <= ConstOut_32 & length;
  S_2 <= to_stdlogic(S_3) and to_stdlogic(S_65);
  False_fork_input <= to_stdlogic(S_3) and not(to_stdlogic(S_65));
  S_3 <= to_unsigned(CForkIn_5 and BinOpOut_53) or to_unsigned(S_4);
  S_11 <= WireTrue_10 or WireFalse_13 or (CForkIn_5 and not(BinOpOut_53));
  BinOpOut_53 <= to_stdlogic(dma_done_cnt /= ConstOut_32);
  CForkIn_5 <= StartOut_4 or LoopZ_7;
  BinOpOut_52 <= dma_done_cnt - ConstOut_31;
  WireTrue_9 <= WireFalse_12 and BinOpOut_51;
  S_97 <= to_unsigned(BinOpOut_51) and to_unsigned(BinOpOut_49) and to_unsigned(BinOpOut_47);
  WireFalse_12 <= WireFalse_11 and not(to_stdlogic(S_97));
  BinOpOut_51 <= to_stdlogic(dma_done_release = ConstOut_2);
  BinOpOut_49 <= to_stdlogic(RESIZE(UNSIGNED(DMA_TAG), 8) = BinOpOut_48);
  BinOpOut_48 <= UNSIGNED(DMA_TAG_ID) or ConstOut_30;
  S_98 <= to_unsigned(BinOpOut_49) and to_unsigned(to_stdlogic(dma_done_release = ConstOut)) and to_unsigned(BinOpOut_47);
  S_12 <= WireTrue_9 or (WireFalse_12 and not(BinOpOut_51)) or (WireFalse_11 and to_stdlogic(S_97)) or 
    WireTrue_8;
  BinOpOut_50 <= dma_done_cnt + ConstOut_31;
  WireTrue_8 <= CForkIn_4 and to_stdlogic(S_98);
  WireFalse_11 <= CForkIn_4 and not(to_stdlogic(S_98));
  BinOpOut_47 <= to_stdlogic(to_unsigned(DMA_DONE) = ConstOut_2);
  CForkIn_4 <= StartOut_3 or Z_Dones_0_1;
  data_length_CE <= WireFalse_6 or WireTrue_4 or WireFalse_8;
  MuxEnables_27 <= WireFalse_6 & WireTrue_4 & WireFalse_8;
  MuxEnables_28 <= S_16 & WireTrue_5;
  MuxEnables_29 <= S_16 & WireTrue_5;
  need_new_desc_CE <= S_16 or WireTrue_5;
  MuxEnables_30 <= S_16 & WireTrue_5;
  False_fork_input_1 <= to_stdlogic(S_6) and not(to_stdlogic(S_63));
  S_6 <= to_unsigned(WireFalse_10) or to_unsigned(S_7);
  BinOpOut_46 <= cnt_dma_ack + ConstOut_30;
  BinOpOut_45 <= hw_buffer_mask and (hw_end_ptr + RESIZE(data_length, 16));
  S_10 <= SeqChain_11 or WireTrue_7;
  WireTrue_7 <= CForkIn_14 and BinOpOut_44;
  WireFalse_10 <= CForkIn_14 and not(BinOpOut_44);
  BinOpOut_44 <= to_stdlogic(to_unsigned(DMA_ACK) = ConstOut);
  BinOpOut_43 <= BinOpOut_41(15 DOWNTO 8);
  BinOpOut_42 <= BinOpOut_41(7 DOWNTO 0);
  BinOpOut_41 <= mem_length & ConstOut_1;
  BinOpOut_40 <= mem_l_addr(31 DOWNTO 24);
  BinOpOut_39 <= mem_l_addr(23 DOWNTO 16);
  BinOpOut_38 <= mem_l_addr(15 DOWNTO 8);
  BinOpOut_37 <= mem_l_addr(7 DOWNTO 0);
  BinOpOut_36 <= BinOpOut_35 + UNSIGNED(BUFFER_ADDR);
  BinOpOut_35 <= ConstOut_15 & hw_end_ptr;
  BinOpOut_33 <= cnt_not_buf_rellen + ConstOut_30;
  S_9 <= WireTrue_6 or WireTrue_5 or WireFalse_8;
  WireTrue_6 <= CForkIn_13 and BinOpOut_34;
  WireFalse_9 <= CForkIn_13 and not(BinOpOut_34);
  BinOpOut_34 <= to_stdlogic(to_unsigned(BUF_RELLEN_DV) = ConstOut_2);
  BinOpOut_32 <= sw_buffer_mask and (sw_last_end_ptr + BinOpOut_25);
  BinOpOut_31 <= (sw_last_end_ptr + data_length) and sw_buffer_mask;
  BinOpOut_30 <= page_free_space - BinOpOut_29;
  BinOpOut_29 <= RESIZE(data_length, 13);
  BinOpOut_28 <= page_offset + BinOpOut_27;
  BinOpOut_27 <= RESIZE(data_length, 12);
  WireTrue_5 <= SeqChain_6 and BinOpOut_26;
  WireFalse_8 <= SeqChain_6 and not(BinOpOut_26);
  BinOpOut_26 <= to_stdlogic(data_length < BinOpOut_25);
  BinOpOut_25 <= ConstOut_18 & page_free_space;
  SeqChain_6 <= Z_Dones_1_2 or (SeqChain_5 and not(BinOpOut_24));
  WireTrue_4 <= SeqChain_5 and BinOpOut_24;
  BinOpOut_24 <= to_stdlogic(data_length > BinOpOut_23);
  BinOpOut_23 <= ConstOut_15 & hw_buffer_free_space;
  BinOpOut_21 <= cnt_no_space + ConstOut_30;
  BodyStart_2 <= SeqChain_4 or (Z_Dones_2 and BinOpOut_20);
  WireFalse_7 <= Z_Dones_2 and not(BinOpOut_20);
  BinOpOut_20 <= to_stdlogic(hw_buffer_free_space = ConstOut_15);
  BinOpOut_18 <= page_offset(7 DOWNTO 0);
  BinOpOut_17 <= (sw_end_ptr - sw_last_end_ptr) and sw_buffer_mask;
  WireTrue_3 <= CForkIn_3 and BinOpOut_16;
  WireFalse_6 <= CForkIn_3 and not(BinOpOut_16);
  BinOpOut_16 <= to_stdlogic(newDescReady = ConstOut);
  CForkIn_3 <= (WireTrue_2 and BinOpOut_15) or LoopZ_2;
  BinOpOut_22 <= cnt_space_available + ConstOut_30;
  BinOpOut_19 <= S_1(7 DOWNTO 4) & page_offset(11 DOWNTO 8);
  WireFalse_5 <= WireTrue_2 and not(BinOpOut_15);
  BinOpOut_15 <= to_stdlogic(sw_end_ptr /= sw_last_end_ptr);
  WireTrue_2 <= WireFalse_3 and to_stdlogic(BinOpOut_14);
  WireFalse_4 <= WireFalse_3 and not(to_stdlogic(BinOpOut_14));
  BinOpOut_14 <= to_unsigned(to_stdlogic(status_reg = ConstOut_12)) or to_unsigned(to_stdlogic(status_reg = 
    ConstOut_3));
  WireFalse_3 <= WireFalse_2 and not(BinOpOut_13);
  BinOpOut_13 <= to_stdlogic(status_reg = ConstOut_11);
  BinOpOut_12 <= BinOpOut_10(15 DOWNTO 8);
  BinOpOut_11 <= BinOpOut_10(7 DOWNTO 0);
  BinOpOut_10 <= ConstOut_9 & BinOpOut_48;
  BinOpOut_82 <= RangeCast_4(14 DOWNTO 0) & ConstOut;
  RangeCast_4 <= UNSIGNED(BUFFER_SIZE);
  BinOpOut_9 <= BinOpOut_82 - ConstOut_8;
  S_8 <= (to_stdlogic(S_6) and to_stdlogic(S_63)) or WireFalse_5 or WireFalse_4 or (WireFalse_2 and BinOpOut_13) or 
    SeqChain_2;
  WireTrue_1 <= CForkIn_2 and BinOpOut_8;
  WireFalse_2 <= CForkIn_2 and not(BinOpOut_8);
  BinOpOut_8 <= to_stdlogic(status_reg = ConstOut_4);
  CForkIn_2 <= StartOut_2 or LoopZ_6;
  S_16 <= WireTrue_1 or WireFalse_8;
  BinOpOut_7 <= hw_buffer_mask and ((hw_str_ptr + UNSIGNED(BUFFER_SIZE)) - hw_end_ptr);
  CForkIn_1 <= StartOut_1 or LoopZ_1;
  parts_CE <= WireFalse or WireTrue;
  MuxEnables_31 <= WireFalse & WireTrue;
  BinOpOut_5 <= cnt_down_descs + ConstOut_30;
  BinOpOut_4 <= parts + ConstOut_4;
  BinOpOut_3 <= ConstOut_3 + parts;
  WireTrue <= CForkIn and BinOpOut_6;
  WireFalse_1 <= CForkIn and not(BinOpOut_6);
  BinOpOut_6 <= to_stdlogic(parts < ConstOut_3);
  CForkIn <= to_stdlogic(SeqChain) or Z_Dones_3;
  S_21 <= to_unsigned(S_22) xor S_23;
  MuxEnables_32 <= to_stdlogic(S_23) & to_stdlogic(not(S_23));
  S_23 <= to_unsigned(Z_Dones_1) xor to_unsigned(BodyEnd_1 and not(BinOpOut_1));
  BinOpOut_2 <= cnt_desc_empty + ConstOut_30;
  BodyStart_1 <= WireFalse or (BodyEnd_1 and BinOpOut_1);
  BinOpOut_1 <= to_stdlogic(to_unsigned(DESC_EMPTY) = ConstOut_2);
  BodyStart <= (BodyEnd and BinOpOut) or LoopZ or StartOut;
  WireFalse <= BodyEnd and not(BinOpOut);
  BinOpOut <= to_stdlogic(getNextDesc = ConstOut);
  S_109 <= to_unsigned(Z_Dones_6) or to_unsigned(WireTrue_1) or to_unsigned(Z_Dones_1_1) or to_unsigned(WireFalse_6);
  S_107 <= to_unsigned(S_103) or to_unsigned(Z_Dones_3_1) or to_unsigned(WireFalse_9);
  S_102 <= to_unsigned(Z_Dones_3_1) or to_unsigned(WireFalse_9);
  S_99 <= to_unsigned(S_108) or to_unsigned(S_104) or to_unsigned(S_101) or to_unsigned(WireTrue);
  S_1 <= to_unsigned(S_52) & to_unsigned(S_51) & to_unsigned(S_50) & to_unsigned(S_49) & to_unsigned(S_48) & 
    to_unsigned(S_47) & to_unsigned(S_46) & to_unsigned(S_45);
  S_29 <= S_24(0 DOWNTO 0);
  S_30 <= S_24(1 DOWNTO 1);
  S_31 <= S_24(2 DOWNTO 2);
  S_32 <= S_24(3 DOWNTO 3);
  S_33 <= S_24(4 DOWNTO 4);
  S_34 <= S_24(5 DOWNTO 5);
  S_35 <= S_24(6 DOWNTO 6);
  S_36 <= S_24(7 DOWNTO 7);
  BinOpOut_0 <= BinOpOut_83(0 DOWNTO 0);
  BinOpOut_1_1 <= BinOpOut_83(1 DOWNTO 1);
  BinOpOut_2_1 <= BinOpOut_83(2 DOWNTO 2);
  BinOpOut_3_1 <= BinOpOut_83(3 DOWNTO 3);
  S_0 <= to_unsigned(S_44) & to_unsigned(S_43) & to_unsigned(S_42) & to_unsigned(S_41) & to_unsigned(S_40) & 
    to_unsigned(S_39) & to_unsigned(S_38) & to_unsigned(S_37);
  RangeCast_5 <= UNSIGNED(DMA_ADDR);
  S_25 <= RangeCast_5(0 DOWNTO 0);
  RangeCast_6 <= UNSIGNED(DMA_ADDR);
  S_26 <= RangeCast_6(1 DOWNTO 1);
  RangeCast_7 <= UNSIGNED(DMA_ADDR);
  S_27 <= RangeCast_7(2 DOWNTO 2);
  RangeCast_8 <= UNSIGNED(DMA_ADDR);
  S_28 <= RangeCast_8(3 DOWNTO 3);
  MuxEnables_33 <= WireTrue & Z_Dones_6 & SeqChain_2 & Z_Dones_1_1 & SeqChain_3 & Z_Dones_3_1 & SeqChain_8 & 
    SeqChain_9 & SeqChain_10 & SeqChain_7 & SeqChain_12;
  MuxEnables_34 <= SeqChain_7 & WireTrue & Z_Dones_1_1 & SeqChain_12 & SeqChain_2 & Z_Dones_3_1 & Z_Dones_6 & 
    SeqChain_3 & SeqChain_8 & SeqChain_9 & SeqChain_10;
  S_17 <= WireTrue_11 or WireTrue_13;
  I0_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I0_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I0_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I0_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I0_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_12 <= to_stdlogic(DataIntoFIFO_12);
  I0_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I0_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I0_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I0_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I0_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I1_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I1_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I1_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I1_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I1_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_11 <= to_stdlogic(DataIntoFIFO_11);
  I1_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I1_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I1_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I1_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I1_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I2_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I2_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I2_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I2_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I2_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_10 <= to_stdlogic(DataIntoFIFO_10);
  I2_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I2_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I2_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I2_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I2_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I3_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I3_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I3_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I3_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I3_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_9 <= to_stdlogic(DataIntoFIFO_9);
  I3_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I3_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I3_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I3_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I3_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I4_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I4_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I4_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I4_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I4_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_8 <= to_stdlogic(DataIntoFIFO_8);
  I4_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I4_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I4_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I4_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I4_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I5_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I5_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I5_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I5_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I5_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_7 <= to_stdlogic(DataIntoFIFO_7);
  I5_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I5_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I5_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I5_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I5_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I6_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I6_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I6_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I6_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I6_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_6 <= to_stdlogic(DataIntoFIFO_6);
  I6_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I6_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I6_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I6_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I6_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I7_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I7_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I7_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I7_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I7_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_5 <= to_stdlogic(DataIntoFIFO_5);
  I7_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I7_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I7_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I7_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I7_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I8_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I8_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I8_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I8_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I8_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_4 <= to_stdlogic(DataIntoFIFO_4);
  I8_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I8_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I8_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I8_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I8_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I9_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I9_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I9_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I9_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I9_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_3 <= to_stdlogic(DataIntoFIFO_3);
  I9_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I9_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I9_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I9_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I9_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I10_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I10_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I10_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I10_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I10_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_2 <= to_stdlogic(DataIntoFIFO_2);
  I10_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I10_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I10_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I10_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I10_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I11_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I11_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I11_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I11_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I11_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_1 <= to_stdlogic(DataIntoFIFO_1);
  I11_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I11_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I11_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I11_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I11_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I12_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_68);
  I12_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_69);
  I12_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I12_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I12_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_0 <= to_stdlogic(DataIntoFIFO_0);
  I12_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_66);
  I12_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_67);
  I12_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I12_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I12_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_64);
  I0_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 <= to_stdlogic(BinOpOut_0);
  I0_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 <= to_stdlogic(BinOpOut_1_1);
  I0_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 <= to_stdlogic(BinOpOut_2_1);
  I0_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 <= to_stdlogic(BinOpOut_3_1);
  I0_dma_mem_tx_dma_ctrl_opt_299_D <= to_stdlogic(S_36);
  I0_dma_mem_tx_dma_ctrl_opt_299_DPRA0 <= to_stdlogic(S_25);
  I0_dma_mem_tx_dma_ctrl_opt_299_DPRA1 <= to_stdlogic(S_26);
  I0_dma_mem_tx_dma_ctrl_opt_299_DPRA2 <= to_stdlogic(S_27);
  I0_dma_mem_tx_dma_ctrl_opt_299_DPRA3 <= to_stdlogic(S_28);
  I0_dma_mem_tx_dma_ctrl_opt_299_WE <= to_stdlogic(S_99);
  I1_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 <= to_stdlogic(BinOpOut_0);
  I1_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 <= to_stdlogic(BinOpOut_1_1);
  I1_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 <= to_stdlogic(BinOpOut_2_1);
  I1_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 <= to_stdlogic(BinOpOut_3_1);
  I1_dma_mem_tx_dma_ctrl_opt_299_D <= to_stdlogic(S_35);
  I1_dma_mem_tx_dma_ctrl_opt_299_DPRA0 <= to_stdlogic(S_25);
  I1_dma_mem_tx_dma_ctrl_opt_299_DPRA1 <= to_stdlogic(S_26);
  I1_dma_mem_tx_dma_ctrl_opt_299_DPRA2 <= to_stdlogic(S_27);
  I1_dma_mem_tx_dma_ctrl_opt_299_DPRA3 <= to_stdlogic(S_28);
  I1_dma_mem_tx_dma_ctrl_opt_299_WE <= to_stdlogic(S_99);
  I2_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 <= to_stdlogic(BinOpOut_0);
  I2_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 <= to_stdlogic(BinOpOut_1_1);
  I2_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 <= to_stdlogic(BinOpOut_2_1);
  I2_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 <= to_stdlogic(BinOpOut_3_1);
  I2_dma_mem_tx_dma_ctrl_opt_299_D <= to_stdlogic(S_34);
  I2_dma_mem_tx_dma_ctrl_opt_299_DPRA0 <= to_stdlogic(S_25);
  I2_dma_mem_tx_dma_ctrl_opt_299_DPRA1 <= to_stdlogic(S_26);
  I2_dma_mem_tx_dma_ctrl_opt_299_DPRA2 <= to_stdlogic(S_27);
  I2_dma_mem_tx_dma_ctrl_opt_299_DPRA3 <= to_stdlogic(S_28);
  I2_dma_mem_tx_dma_ctrl_opt_299_WE <= to_stdlogic(S_99);
  I3_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 <= to_stdlogic(BinOpOut_0);
  I3_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 <= to_stdlogic(BinOpOut_1_1);
  I3_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 <= to_stdlogic(BinOpOut_2_1);
  I3_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 <= to_stdlogic(BinOpOut_3_1);
  I3_dma_mem_tx_dma_ctrl_opt_299_D <= to_stdlogic(S_33);
  I3_dma_mem_tx_dma_ctrl_opt_299_DPRA0 <= to_stdlogic(S_25);
  I3_dma_mem_tx_dma_ctrl_opt_299_DPRA1 <= to_stdlogic(S_26);
  I3_dma_mem_tx_dma_ctrl_opt_299_DPRA2 <= to_stdlogic(S_27);
  I3_dma_mem_tx_dma_ctrl_opt_299_DPRA3 <= to_stdlogic(S_28);
  I3_dma_mem_tx_dma_ctrl_opt_299_WE <= to_stdlogic(S_99);
  I4_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 <= to_stdlogic(BinOpOut_0);
  I4_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 <= to_stdlogic(BinOpOut_1_1);
  I4_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 <= to_stdlogic(BinOpOut_2_1);
  I4_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 <= to_stdlogic(BinOpOut_3_1);
  I4_dma_mem_tx_dma_ctrl_opt_299_D <= to_stdlogic(S_32);
  I4_dma_mem_tx_dma_ctrl_opt_299_DPRA0 <= to_stdlogic(S_25);
  I4_dma_mem_tx_dma_ctrl_opt_299_DPRA1 <= to_stdlogic(S_26);
  I4_dma_mem_tx_dma_ctrl_opt_299_DPRA2 <= to_stdlogic(S_27);
  I4_dma_mem_tx_dma_ctrl_opt_299_DPRA3 <= to_stdlogic(S_28);
  I4_dma_mem_tx_dma_ctrl_opt_299_WE <= to_stdlogic(S_99);
  I5_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 <= to_stdlogic(BinOpOut_0);
  I5_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 <= to_stdlogic(BinOpOut_1_1);
  I5_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 <= to_stdlogic(BinOpOut_2_1);
  I5_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 <= to_stdlogic(BinOpOut_3_1);
  I5_dma_mem_tx_dma_ctrl_opt_299_D <= to_stdlogic(S_31);
  I5_dma_mem_tx_dma_ctrl_opt_299_DPRA0 <= to_stdlogic(S_25);
  I5_dma_mem_tx_dma_ctrl_opt_299_DPRA1 <= to_stdlogic(S_26);
  I5_dma_mem_tx_dma_ctrl_opt_299_DPRA2 <= to_stdlogic(S_27);
  I5_dma_mem_tx_dma_ctrl_opt_299_DPRA3 <= to_stdlogic(S_28);
  I5_dma_mem_tx_dma_ctrl_opt_299_WE <= to_stdlogic(S_99);
  I6_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 <= to_stdlogic(BinOpOut_0);
  I6_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 <= to_stdlogic(BinOpOut_1_1);
  I6_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 <= to_stdlogic(BinOpOut_2_1);
  I6_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 <= to_stdlogic(BinOpOut_3_1);
  I6_dma_mem_tx_dma_ctrl_opt_299_D <= to_stdlogic(S_30);
  I6_dma_mem_tx_dma_ctrl_opt_299_DPRA0 <= to_stdlogic(S_25);
  I6_dma_mem_tx_dma_ctrl_opt_299_DPRA1 <= to_stdlogic(S_26);
  I6_dma_mem_tx_dma_ctrl_opt_299_DPRA2 <= to_stdlogic(S_27);
  I6_dma_mem_tx_dma_ctrl_opt_299_DPRA3 <= to_stdlogic(S_28);
  I6_dma_mem_tx_dma_ctrl_opt_299_WE <= to_stdlogic(S_99);
  I7_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0 <= to_stdlogic(BinOpOut_0);
  I7_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1 <= to_stdlogic(BinOpOut_1_1);
  I7_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2 <= to_stdlogic(BinOpOut_2_1);
  I7_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3 <= to_stdlogic(BinOpOut_3_1);
  I7_dma_mem_tx_dma_ctrl_opt_299_D <= to_stdlogic(S_29);
  I7_dma_mem_tx_dma_ctrl_opt_299_DPRA0 <= to_stdlogic(S_25);
  I7_dma_mem_tx_dma_ctrl_opt_299_DPRA1 <= to_stdlogic(S_26);
  I7_dma_mem_tx_dma_ctrl_opt_299_DPRA2 <= to_stdlogic(S_27);
  I7_dma_mem_tx_dma_ctrl_opt_299_DPRA3 <= to_stdlogic(S_28);
  I7_dma_mem_tx_dma_ctrl_opt_299_WE <= to_stdlogic(S_99);
  I0_start_tx_dma_ctrl_opt_693_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_674_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_646_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_628_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_617_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_590_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_584_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_556_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_544_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_345_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_335_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_305_aclr_GND <= GND;


  -- Port connections:

  INTERRUPT <= STD_LOGIC_VECTOR(ifc_interrupt);
  ENABLE <= to_stdlogic(ifc_enable);
  BUF_NEWLEN <= STD_LOGIC_VECTOR(ifc_buf_newlen);
  BUF_NEWLEN_DV <= to_stdlogic(dma_done_release);
  DESC_READ <= to_stdlogic(ifc_desc_read);
  SW_DRD <= STD_LOGIC_VECTOR(ifc_sw_drd);
  SW_ARDY <= to_stdlogic(ifc_sw_ardy);
  SW_DRDY <= to_stdlogic(ifc_sw_drdy);
  DMA_DOUT <= STD_LOGIC_VECTOR(ifc_dma_dout);
  DMA_REQ <= to_stdlogic(ifc_dma_req);


  -- Component instances:

  -- MPRAM component instance 'FIFORam'
  I0_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I0_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I0_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I0_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I0_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I0_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_12,
      DPO => S_82,
      DPRA0 => I0_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I0_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I0_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I0_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_95,
      WCLK => PIN_CLK,
      WE => I0_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I1_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I1_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I1_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I1_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I1_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I1_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_11,
      DPO => S_81,
      DPRA0 => I1_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I1_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I1_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I1_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_94,
      WCLK => PIN_CLK,
      WE => I1_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I2_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I2_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I2_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I2_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I2_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I2_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_10,
      DPO => S_80,
      DPRA0 => I2_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I2_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I2_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I2_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_93,
      WCLK => PIN_CLK,
      WE => I2_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I3_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I3_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I3_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I3_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I3_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I3_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_9,
      DPO => S_79,
      DPRA0 => I3_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I3_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I3_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I3_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_92,
      WCLK => PIN_CLK,
      WE => I3_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I4_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I4_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I4_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I4_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I4_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I4_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_8,
      DPO => S_78,
      DPRA0 => I4_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I4_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I4_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I4_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_91,
      WCLK => PIN_CLK,
      WE => I4_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I5_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I5_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I5_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I5_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I5_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I5_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_7,
      DPO => S_77,
      DPRA0 => I5_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I5_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I5_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I5_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_90,
      WCLK => PIN_CLK,
      WE => I5_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I6_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I6_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I6_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I6_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I6_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I6_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_6,
      DPO => S_76,
      DPRA0 => I6_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I6_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I6_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I6_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_89,
      WCLK => PIN_CLK,
      WE => I6_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I7_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I7_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I7_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I7_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I7_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I7_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_5,
      DPO => S_75,
      DPRA0 => I7_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I7_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I7_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I7_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_88,
      WCLK => PIN_CLK,
      WE => I7_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I8_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I8_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I8_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I8_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I8_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I8_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_4,
      DPO => S_74,
      DPRA0 => I8_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I8_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I8_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I8_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_87,
      WCLK => PIN_CLK,
      WE => I8_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I9_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I9_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I9_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I9_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I9_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I9_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_3,
      DPO => S_73,
      DPRA0 => I9_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I9_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I9_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I9_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_86,
      WCLK => PIN_CLK,
      WE => I9_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I10_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I10_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I10_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I10_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I10_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I10_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_2,
      DPO => S_72,
      DPRA0 => I10_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I10_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I10_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I10_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_85,
      WCLK => PIN_CLK,
      WE => I10_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I11_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I11_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I11_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I11_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I11_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I11_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_1,
      DPO => S_71,
      DPRA0 => I11_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I11_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I11_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I11_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_84,
      WCLK => PIN_CLK,
      WE => I11_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I12_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I12_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I12_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I12_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I12_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I12_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_0,
      DPO => S_70,
      DPRA0 => I12_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I12_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I12_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I12_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_83,
      WCLK => PIN_CLK,
      WE => I12_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'dma_mem'
  I0_dma_mem_tx_dma_ctrl_opt_299 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I0_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0,
      A1 => I0_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1,
      A2 => I0_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2,
      A3 => I0_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3,
      D => I0_dma_mem_tx_dma_ctrl_opt_299_D,
      DPO => S_44,
      DPRA0 => I0_dma_mem_tx_dma_ctrl_opt_299_DPRA0,
      DPRA1 => I0_dma_mem_tx_dma_ctrl_opt_299_DPRA1,
      DPRA2 => I0_dma_mem_tx_dma_ctrl_opt_299_DPRA2,
      DPRA3 => I0_dma_mem_tx_dma_ctrl_opt_299_DPRA3,
      SPO => S_52,
      WCLK => PIN_CLK,
      WE => I0_dma_mem_tx_dma_ctrl_opt_299_WE
    );

  -- MPRAM component instance 'dma_mem'
  I1_dma_mem_tx_dma_ctrl_opt_299 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I1_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0,
      A1 => I1_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1,
      A2 => I1_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2,
      A3 => I1_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3,
      D => I1_dma_mem_tx_dma_ctrl_opt_299_D,
      DPO => S_43,
      DPRA0 => I1_dma_mem_tx_dma_ctrl_opt_299_DPRA0,
      DPRA1 => I1_dma_mem_tx_dma_ctrl_opt_299_DPRA1,
      DPRA2 => I1_dma_mem_tx_dma_ctrl_opt_299_DPRA2,
      DPRA3 => I1_dma_mem_tx_dma_ctrl_opt_299_DPRA3,
      SPO => S_51,
      WCLK => PIN_CLK,
      WE => I1_dma_mem_tx_dma_ctrl_opt_299_WE
    );

  -- MPRAM component instance 'dma_mem'
  I2_dma_mem_tx_dma_ctrl_opt_299 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I2_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0,
      A1 => I2_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1,
      A2 => I2_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2,
      A3 => I2_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3,
      D => I2_dma_mem_tx_dma_ctrl_opt_299_D,
      DPO => S_42,
      DPRA0 => I2_dma_mem_tx_dma_ctrl_opt_299_DPRA0,
      DPRA1 => I2_dma_mem_tx_dma_ctrl_opt_299_DPRA1,
      DPRA2 => I2_dma_mem_tx_dma_ctrl_opt_299_DPRA2,
      DPRA3 => I2_dma_mem_tx_dma_ctrl_opt_299_DPRA3,
      SPO => S_50,
      WCLK => PIN_CLK,
      WE => I2_dma_mem_tx_dma_ctrl_opt_299_WE
    );

  -- MPRAM component instance 'dma_mem'
  I3_dma_mem_tx_dma_ctrl_opt_299 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I3_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0,
      A1 => I3_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1,
      A2 => I3_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2,
      A3 => I3_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3,
      D => I3_dma_mem_tx_dma_ctrl_opt_299_D,
      DPO => S_41,
      DPRA0 => I3_dma_mem_tx_dma_ctrl_opt_299_DPRA0,
      DPRA1 => I3_dma_mem_tx_dma_ctrl_opt_299_DPRA1,
      DPRA2 => I3_dma_mem_tx_dma_ctrl_opt_299_DPRA2,
      DPRA3 => I3_dma_mem_tx_dma_ctrl_opt_299_DPRA3,
      SPO => S_49,
      WCLK => PIN_CLK,
      WE => I3_dma_mem_tx_dma_ctrl_opt_299_WE
    );

  -- MPRAM component instance 'dma_mem'
  I4_dma_mem_tx_dma_ctrl_opt_299 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I4_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0,
      A1 => I4_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1,
      A2 => I4_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2,
      A3 => I4_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3,
      D => I4_dma_mem_tx_dma_ctrl_opt_299_D,
      DPO => S_40,
      DPRA0 => I4_dma_mem_tx_dma_ctrl_opt_299_DPRA0,
      DPRA1 => I4_dma_mem_tx_dma_ctrl_opt_299_DPRA1,
      DPRA2 => I4_dma_mem_tx_dma_ctrl_opt_299_DPRA2,
      DPRA3 => I4_dma_mem_tx_dma_ctrl_opt_299_DPRA3,
      SPO => S_48,
      WCLK => PIN_CLK,
      WE => I4_dma_mem_tx_dma_ctrl_opt_299_WE
    );

  -- MPRAM component instance 'dma_mem'
  I5_dma_mem_tx_dma_ctrl_opt_299 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I5_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0,
      A1 => I5_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1,
      A2 => I5_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2,
      A3 => I5_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3,
      D => I5_dma_mem_tx_dma_ctrl_opt_299_D,
      DPO => S_39,
      DPRA0 => I5_dma_mem_tx_dma_ctrl_opt_299_DPRA0,
      DPRA1 => I5_dma_mem_tx_dma_ctrl_opt_299_DPRA1,
      DPRA2 => I5_dma_mem_tx_dma_ctrl_opt_299_DPRA2,
      DPRA3 => I5_dma_mem_tx_dma_ctrl_opt_299_DPRA3,
      SPO => S_47,
      WCLK => PIN_CLK,
      WE => I5_dma_mem_tx_dma_ctrl_opt_299_WE
    );

  -- MPRAM component instance 'dma_mem'
  I6_dma_mem_tx_dma_ctrl_opt_299 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I6_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0,
      A1 => I6_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1,
      A2 => I6_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2,
      A3 => I6_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3,
      D => I6_dma_mem_tx_dma_ctrl_opt_299_D,
      DPO => S_38,
      DPRA0 => I6_dma_mem_tx_dma_ctrl_opt_299_DPRA0,
      DPRA1 => I6_dma_mem_tx_dma_ctrl_opt_299_DPRA1,
      DPRA2 => I6_dma_mem_tx_dma_ctrl_opt_299_DPRA2,
      DPRA3 => I6_dma_mem_tx_dma_ctrl_opt_299_DPRA3,
      SPO => S_46,
      WCLK => PIN_CLK,
      WE => I6_dma_mem_tx_dma_ctrl_opt_299_WE
    );

  -- MPRAM component instance 'dma_mem'
  I7_dma_mem_tx_dma_ctrl_opt_299 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I7_dma_mem_tx_dma_ctrl_opt_299_A0_BinOpOut_0,
      A1 => I7_dma_mem_tx_dma_ctrl_opt_299_A1_BinOpOut_1,
      A2 => I7_dma_mem_tx_dma_ctrl_opt_299_A2_BinOpOut_2,
      A3 => I7_dma_mem_tx_dma_ctrl_opt_299_A3_BinOpOut_3,
      D => I7_dma_mem_tx_dma_ctrl_opt_299_D,
      DPO => S_37,
      DPRA0 => I7_dma_mem_tx_dma_ctrl_opt_299_DPRA0,
      DPRA1 => I7_dma_mem_tx_dma_ctrl_opt_299_DPRA1,
      DPRA2 => I7_dma_mem_tx_dma_ctrl_opt_299_DPRA2,
      DPRA3 => I7_dma_mem_tx_dma_ctrl_opt_299_DPRA3,
      SPO => S_45,
      WCLK => PIN_CLK,
      WE => I7_dma_mem_tx_dma_ctrl_opt_299_WE
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_693 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_693_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_11
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_674 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_674_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_10
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_646 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_646_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_9
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_628 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_628_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_8
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_617 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_617_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_7
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_590 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_590_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_6
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_584 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_584_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_5
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_556 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_556_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_4
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_544 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_544_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_3
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_345 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_345_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_2
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_335 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_335_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_1
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_305 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_305_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut
    );

END;

