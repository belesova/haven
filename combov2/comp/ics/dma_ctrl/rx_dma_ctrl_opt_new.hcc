/* rx_dma_ctrl_opt_opt.hcc: DMA engine controller - second round of 
 *                          optimalization
 * Copyright (C) 2008 CESNET
 * Author(s): Petr Kastovky <kastovksy@liberouter.org>
 *            Tomas Dedek <dedek@liberouter.org>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of the Company nor the names of its contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * This software is provided ``as is'', and any express or implied
 * warranties, including, but not limited to, the implied warranties of
 * merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall the company or contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute
 * goods or services; loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether
 * in contract, strict liability, or tort (including negligence or
 * otherwise) arising in any way out of the use of this software, even
 * if advised of the possibility of such damage.
 *
 *
 */

#include <stdlib.hch>

/*Settings of the DMA data width*/
//#define DMA_WIDTH_64
//#define DMA_WIDTH_32
#define DMA_WIDTH_16
//#define DMA_WIDTH_8
//#define DMA_WIDTH_4
//#define DMA_WIDTH_2
//#define DMA_WIDTH_1

#ifdef DMA_WIDTH_64
#define DMA_DATA_WIDTH     64  
#endif
#ifdef DMA_WIDTH_32
#define DMA_DATA_WIDTH     32  
#endif
#ifdef DMA_WIDTH_16
#define DMA_DATA_WIDTH     16  
#endif
#ifdef DMA_WIDTH_8
#define DMA_DATA_WIDTH     8  
#endif
#ifdef DMA_WIDTH_4
#define DMA_DATA_WIDTH     4  
#define DMA_DATA_WIDTH_124
#endif
#ifdef DMA_WIDTH_2
#define DMA_DATA_WIDTH     2  
#define DMA_DATA_WIDTH_124
#endif
#ifdef DMA_WIDTH_1
#define DMA_DATA_WIDTH     1  
#define DMA_DATA_WIDTH_124
#endif
#define DMA_MEM_STEPS      12/DMA_DATA_WIDTH //number of steps needed to save 12b 
                                             //to DMA request memory
 
#define DMA_MEM_ADDR_OFFSET DMA_MEM_STEPS/3 - 1 
#define DMA_MEM_ADDR_LENGHT exp2(0 + DMA_MEM_ADDR_OFFSET)
#define DMA_MEM_ADDR_LADDR  exp2(3 + DMA_MEM_ADDR_OFFSET)
#define DMA_MEM_ADDR_GADDR  exp2(4 + DMA_MEM_ADDR_OFFSET)

/* Constants definition block */
#define DESC_WIDTH         64
#define MEM_PAGE_SIZE      4096
#define PAGE_MASK_WIDTH    (log2ceil(MEM_PAGE_SIZE))
#define DESC_BASE_WIDTH    (DESC_WIDTH - PAGE_MASK_WIDTH)
#define DMA_ADDR_WIDTH     (log2ceil(128/DMA_DATA_WIDTH))
#define DESC_PARTS         (DESC_WIDTH/DMA_DATA_WIDTH) 
#define DESC_PARTS_WIDTH   (log2ceil(128/DMA_DATA_WIDTH))
#define SENT_LENGTH_FIFO_LENGTH 4 // should be power of 2

/*Pointers width*/
#define HW_BUFFER_SIZE      4096
#define HW_PTR_SIZE         (log2ceil(HW_BUFFER_SIZE) + 1)
#define SW_PTR_SIZE         24

#define SENT_LENGTH_FIFO_WIDTH  (HW_PTR_SIZE+1)
/*
Type           Popis
 0             Request data transfer RAM => FPGA
 2             Request data transfer FPGA => RAM
*/
#define TYPE_RAM2FPGA   0
#define TYPE_FPGA2RAM   1

/* Tag            Description */
#define TAG_DESC    0x0 // descriptor block transfer
#define TAG_DATA    0x1 // packet data transfer
#define TAG_WIDTH   12  // look only at lower 12 bits, 4 MSB bits used for DMA controller id

/*
Value     Status
  0       Undefined
  1       Idle
  2       Running
  4       Pause
*/
#define STATUS_UNDEFINED 0
#define STATUS_IDLE      1
#define STATUS_RUNNING   2
#define STATUS_PAUSE     4
#define STATUS_DEBUG     3

/*127              64       32 28 16   4 0
   #----------------|--------|-|---|---|-#
   global_addr
                    local_addr
                             reserved bits
                               tag
                                   lenght
                                       trans_type
*/


/*------ Output signals ----------------*/
signal unsigned 1  ifc_interrupt = 0;
signal unsigned 1  ifc_enable = 0;
/*-----+ receive buffer interface */
signal unsigned 16 ifc_buf_rellen = 0;
signal unsigned 1  ifc_buf_rellen_dv = 0;
signal unsigned 1  ifc_buf_newlen_rdy = 1;
/*-----+ descriptor fifo interface */
signal unsigned 1  ifc_desc_read = 0;
/*-----+ memory interface */
signal unsigned 32 ifc_sw_drd = 0;
signal unsigned 1  ifc_sw_ardy = 0;
signal unsigned 1  ifc_sw_drdy = 0;
/*-----+ dma interface */
signal unsigned 1  ifc_dma_req = 0;
signal unsigned DMA_DATA_WIDTH ifc_dma_dout = 0;
/*-----+ memory interface */
signal unsigned int 1 ifc_mem_wea = 0;
signal unsigned int DMA_ADDR_WIDTH ifc_mem_addra = 0;
signal unsigned int DMA_DATA_WIDTH ifc_mem_dia   = 0;
signal unsigned int DMA_ADDR_WIDTH ifc_mem_addrb = 0;

#if __VHDL__
/******  Common interface **************/
set reset = external "RESET";
set clock = external "CLK";
/*     + generics mapped to interface signals */
interface port_in                   (unsigned int 32 BUFFER_ADDR)    buffer_addr()  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 16 BUFFER_SIZE)    buffer_size()  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 8  DMA_TAG_ID)     dma_tag_id()   with {vhdl_type = "std_logic_vector"};
/*     + interrupt signal */
interface port_out() interrupt      (unsigned int 1  INTERRUPT = ifc_interrupt);
interface port_out() enable         (unsigned int 1  ENABLE    = ifc_enable);
/*     + receive buffer interface */
interface port_in                   (unsigned int 16 BUF_NEWLEN)     buf_newlen() with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 1  BUF_NEWLEN_DV)  buf_newlen_dv();
interface port_out() buf_newlen_rdy (unsigned int 1  BUF_NEWLEN_RDY = ifc_buf_newlen_rdy);
interface port_out() buf_rellen     (unsigned int 16 BUF_RELLEN     = ifc_buf_rellen) with {vhdl_type = "std_logic_vector"};
interface port_out() buf_rellen_dv  (unsigned int 1  BUF_RELLEN_DV  = ifc_buf_rellen_dv);
/*     + descriptor fifo interface */
interface port_out() desc_read      (unsigned int 1  DESC_READ = ifc_desc_read);
interface port_in                   (unsigned int DMA_DATA_WIDTH DESC_DO)    desc_do() with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 1  DESC_EMPTY) desc_empty();
/*     + memory interface */
interface port_in                   (unsigned int 32 SW_DWR)  sw_dwr()  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 32 SW_ADDR) sw_addr() with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 1  SW_RD)   sw_rd();
interface port_in                   (unsigned int 1  SW_WR)   sw_wr();
interface port_in                   (unsigned int 4  SW_BE)   sw_be()   with {vhdl_type = "std_logic_vector"};
interface port_out() sw_drd         (unsigned int 32 SW_DRD  = ifc_sw_drd)   with {vhdl_type = "std_logic_vector"};
interface port_out() sw_ardy        (unsigned int 1  SW_ARDY = ifc_sw_ardy);
interface port_out() sw_drdy        (unsigned int 1  SW_DRDY = ifc_sw_drdy);
/*     + DMA interface */
interface port_out() dma_req        (unsigned int 1  DMA_REQ  = ifc_dma_req);
interface port_out() dma_dout       (unsigned int DMA_DATA_WIDTH DMA_DOUT = ifc_dma_dout)  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int DMA_ADDR_WIDTH DMA_ADDR)  dma_addr()  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 1  DMA_ACK)   dma_ack();
interface port_in                   (unsigned int 1  DMA_DONE)  dma_done();
interface port_in                   (unsigned int 16 DMA_TAG)   dma_tag()  with {vhdl_type = "std_logic_vector"};
/*    + DMA request memory interface - memory is preloaded with the constant data*/
interface port_out() mem_wea        (unsigned int 1 MEM_WEA = ifc_mem_wea);
interface port_out() mem_addra      (unsigned int DMA_ADDR_WIDTH MEM_ADDRA = ifc_mem_addra) with {vhdl_type = "std_logic_vector"};
interface port_out() mem_dia        (unsigned int DMA_DATA_WIDTH MEM_DIA = ifc_mem_dia) with {vhdl_type = "std_logic_vector"};
interface port_out() mem_addrb      (unsigned int DMA_ADDR_WIDTH MEM_ADDRB = ifc_mem_addrb) with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int DMA_DATA_WIDTH MEM_DOB) mem_dob() with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int DMA_DATA_WIDTH MEM_DOA) mem_doa() with {vhdl_type = "std_logic_vector"};



/*     + input ports renaming */
#define TAG_ID          dma_tag_id.DMA_TAG_ID
#define ifc_buf_newlen  buf_newlen.BUF_NEWLEN
#define ifc_buf_newlen_dv buf_newlen_dv.BUF_NEWLEN_DV
#define ifc_desc_do     desc_do.DESC_DO
#define ifc_desc_empty  desc_empty.DESC_EMPTY
#define ifc_sw_dwr      sw_dwr.SW_DWR
#define ifc_sw_addr     sw_addr.SW_ADDR
#define ifc_sw_rd       sw_rd.SW_RD
#define ifc_sw_wr       sw_wr.SW_WR
#define ifc_sw_be       sw_be.SW_BE
#define ifc_dma_addr    dma_addr.DMA_ADDR
#define ifc_dma_ack     dma_ack.DMA_ACK
#define ifc_dma_done    dma_done.DMA_DONE
#define ifc_dma_tag     dma_tag.DMA_TAG
#define ifc_mem_dob     mem_dob.MEM_DOB
#define ifc_mem_doa     mem_doa.MEM_DOA

#endif


/* 1 bit for pageBreakFlag [12] @ 13 bits for length [11:0] */
chan unsigned SENT_LENGTH_FIFO_WIDTH  sentLengthFifo with 
                                 { fifolength = SENT_LENGTH_FIFO_LENGTH}; //, block = "BlockRAM" };

unsigned SW_PTR_SIZE swStrPtr = 0;
unsigned SW_PTR_SIZE swEndPtr = 0;
// Copy of the swEndPtr. Doesn't have to be the same as swEndPtr. Used to
// handle situations when the packet is split between physical pages and the SW
// buffer is nearly full. Then CTRL might think it has more space free in SW
// buffer than actual free space.
unsigned SW_PTR_SIZE localSwEndPtr = 0;                                 

unsigned 3 controlRegister = 0x4;
unsigned 3  statusRegister = STATUS_IDLE;
unsigned SW_PTR_SIZE bufSizeMask = 0xfff;
unsigned 32 intrRegister = 0x0;
unsigned 1  intrMonitor = 0x0;
unsigned 32 timeoutRegister = 0x0;
unsigned 32 timeoutMonitor = 0x0;

unsigned HW_PTR_SIZE hwStrPtr = 0x0;
unsigned HW_PTR_SIZE hwEndPtr = 0x0;

unsigned 8 dataDMAProgressCnt = 0x0;
signal unsigned 1 dataDMAProgressCnt_Up = 0x0;
signal unsigned 1 dataDMAProgressCnt_Down = 0x0;



/*
 * Reading and writing from DMA request memory.
 * Different memory ports are used for reading/writting
 */

macro proc ReadDMAMem(addr, data)
{
   par
   {
      ifc_mem_addrb = addr;
      data = ifc_mem_dob;
   }
}

macro proc WriteDMAMem(addr, data)
{
   par
   {
      ifc_mem_wea = 1;
      ifc_mem_addra = addr;
      ifc_mem_dia   = data;
   }
}




/* ------------ data DMA operations in progress counter --------*/
void main(void) {
    while (1)
    {
        par{
        if ((dataDMAProgressCnt_Up == 1) && (dataDMAProgressCnt_Down == 0)) dataDMAProgressCnt++;
        if ((dataDMAProgressCnt_Up == 0) && (dataDMAProgressCnt_Down == 1))  dataDMAProgressCnt--;
        delay;
        }    
    }
    

}
/* --------------- new data arrival & enable signaling & dma req output-------*/
void main(void) {
   
      do { 
      par { 
        if (ifc_buf_newlen_dv == 1)
         hwEndPtr += adju(ifc_buf_newlen,HW_PTR_SIZE);
        else { delay; }
        ifc_enable = !(statusRegister == STATUS_IDLE);
        ReadDMAMem(ifc_dma_addr, ifc_dma_dout);
       
      }
      }while (1);
}

/* --------------- statusRegister ----------------------------*/
unsigned 1 setStoped = 0x1;
unsigned 1 setPaused = 0x0;
void main(void) {
   while (1) {
     while (setStoped == 1)
            statusRegister =  STATUS_IDLE;
      while (setPaused == 1)
            statusRegister = STATUS_PAUSE;
      statusRegister = STATUS_RUNNING;
   }
}


signal unsigned 1 getNextDesc = 0;
       unsigned 1 newDescReady = 0;
/* --------------- descDownload ----------------------------*/
void main(void) {
   static unsigned DESC_PARTS_WIDTH parts = 0;
   while (1) {
      while (getNextDesc == 0) delay; // wait for new descriptor request
      
      newDescReady = 0;
       
      while (ifc_desc_empty == 1) delay; // no descriptors ready
      do
      {    
        par {
          ifc_desc_read = 1;
          WriteDMAMem((128/DMA_DATA_WIDTH - DESC_PARTS) + parts, ifc_desc_do);
          parts++;
         }
      } while (parts < DESC_PARTS);
      
      newDescReady = 1;
   }
}



/* --------------- P2 process ----------------------------*/
unsigned PAGE_MASK_WIDTH descOffset;
signal unsigned (HW_PTR_SIZE-1) dataLength = 0;/*-----+ dma interface */
signal unsigned 1 extDataLengthMSB = 0; 
signal unsigned (HW_PTR_SIZE) freeSpace = 0;
unsigned (HW_PTR_SIZE) length;
unsigned 1 pageBreakFlag;
signal unsigned SW_PTR_SIZE swFreeSpace; 

signal unsigned 4  trans_type;
signal unsigned int DMA_DATA_WIDTH desc_up = 0;
unsigned int 1 i = 0;


void main(void) { 
 
   par {

   while (1) {
      if (controlRegister[2] == 1) // dma engine stopped - reset variables - default state
      {
         par 
         { 
            descOffset = 0;
            setStoped = 1;
            setPaused = 0;
            getNextDesc = 1; // read out all descriptors from fifo - after start one desc would be automatically preread
         } 
      }
    
      else if (controlRegister[1] == 1) // dma engine is paused
      {
        par 
        { 
           setStoped = 0;
           setPaused = 1;
        }
      }
                                                                    
      else if ((controlRegister[0] == 1) && (hwStrPtr != hwEndPtr)) { // there are data to send 
            par {
               dataLength = hwEndPtr[HW_PTR_SIZE-2:0] - hwStrPtr[HW_PTR_SIZE-2:0] ;
               extDataLengthMSB = (dataLength==0); //if dataLength is 0, then the real value is 0x1000
               freeSpace = MEM_PAGE_SIZE  - (0@descOffset); 
               setStoped = 0;
               setPaused = 0;
               if (extDataLengthMSB@dataLength <= freeSpace) par {
                 length = extDataLengthMSB@dataLength;
                 pageBreakFlag = 0;
               }
              else par {
        
                 length = freeSpace;
                 pageBreakFlag = 1;
               }
            }
               
            do
            {
               par
               {
                  swFreeSpace = (swStrPtr - localSwEndPtr - 1) & bufSizeMask;
                  i = (adju(length,SW_PTR_SIZE) > swFreeSpace); 
               }
            }
            while ((newDescReady == 0) || (i == 0)); // wait for a descriptor and ready SW buffer
            

#ifdef DMA_WIDTH_124
            //lower part of the global address
            seq ( i = 0; i < DMA_MEM_STEPS; i++) {
               WriteDMAMem(DMA_MEM_ADDR_GADDR + i, descOffset[DMA_DATA_WIDTH*i + DMA_DATA_WIDTH-1 : DMA_DATA_WIDTH*i]);
            }
            //lower part of the local address
            seq ( i = 0; i < DMA_MEM_STEPS; i++) {
               WriteDMAMem(DMA_MEM_ADDR_LADDR + i, hwStrPtr[DMA_DATA_WIDTH*i + DMA_DATA_WIDTH-1 : DMA_DATA_WIDTH*i]);
            }
            //lenght
            seq ( i = 0; i < DMA_MEM_STEPS; i++) {
               WriteDMAMem(DMA_MEM_ADDR_LENGHT + i, length[DMA_DATA_WIDTH*i + DMA_DATA_WIDTH-1 : DMA_DATA_WIDTH*i]);
            }
#endif             

#ifdef DMA_WIDTH_8
            WriteDMAMem(9, ifc_mem_doa[7:4] @ descOffset[11:8]); //global addr
            WriteDMAMem(8, descOffset[7:0]);                     // global addr
            WriteDMAMem(5, 0@hwStrPtr[11:8]);                    // local addr
            WriteDMAMem(4, hwStrPtr[7:0]);                       //local addr
            WriteDMAMem(1, 0@length[11:8]);                      // length
            WriteDMAMem(0, length[7:4] @ TYPE_FPGA2RAM);         // length
#endif
            
#ifdef DMA_WIDTH_16
            WriteDMAMem(4, ifc_mem_doa[15:12]@descOffset); //global addr
            WriteDMAMem(2, 0@hwStrPtr[11:0]); //local address
            WriteDMAMem(0, length @ TYPE_FPGA2RAM); //length
#endif
#ifdef DMA_WIDTH_32
            WriteDMAMem(2, ifc_mem_doa[31:12]@descOffset); //global addr
            WriteDMAMem(1, adju(HW_BUFFER_ADDR,16)@adju(hwStrPtr[HW_PTR_SIZE-2:0],16)); //local addr
            WriteDMAMem(0, adju(TAG_DATA | TAG_ID, 16) @ length @ TYPE_FPGA2RAM); //length 
#endif
#ifdef DMA_WIDTH_64
            WriteDMAMem(1, ifc_mem_doa[63:12]@descOffset); //global addr
            //local addr and length
            WriteDMAMem(0, adju(HW_BUFFER_ADDR,16)@adju(hwStrPtr[11:0],16)@adju(TAG_DATA | TAG_ID, 16) @ length @ TYPE_FPGA2RAM);          
#endif

            par {
               ifc_dma_req = 1;
               dataDMAProgressCnt_Up = 1;
            }
            while (ifc_dma_ack == 0) { delay; }

            par {
               // add length to p2->p3 fifo
               sentLengthFifo ! (pageBreakFlag @ length);
               descOffset += adju(length, PAGE_MASK_WIDTH); 
               hwStrPtr += adju(length, HW_PTR_SIZE);
               //SW buffer overflow protection when
   	  	      // transmitting packet over page boundary
               localSwEndPtr = (localSwEndPtr + adju(length, SW_PTR_SIZE)) & bufSizeMask;
            }

            getNextDesc = (descOffset == 0) ; // page is full => get new descriptor
          
         }
         else par 
         {
          setStoped = 0;
          setPaused = 0;
        }
    } 
   }
}

 

/* --------------- P3 process ----------------------------*/
void main(void) {
static unsigned (HW_PTR_SIZE+1) flag_length;
static unsigned (HW_PTR_SIZE+1) length = 0; // was 12, 13 is for overflow protection

   while (1) {
       //dma done with the correct TAG
       if ((ifc_dma_done == 1) && ((ifc_dma_tag <- TAG_WIDTH) == adju(TAG_DATA | TAG_ID, TAG_WIDTH))) {
         sentLengthFifo ? flag_length;
         par {
            dataDMAProgressCnt_Down = 1;
            //there is a page break
            if (flag_length[HW_PTR_SIZE] == 1)
               length =  adju(flag_length[HW_PTR_SIZE-1:0], (HW_PTR_SIZE+1));
            //there is no pagebreak
            else
               length += adju(flag_length[HW_PTR_SIZE-1:0] , (HW_PTR_SIZE+1));
            
            // release data from buffer
            ifc_buf_rellen = 0@flag_length[HW_PTR_SIZE-1:0];
            ifc_buf_rellen_dv = 1;
         }
         
         //  if there is no pagebreak
         if (flag_length[HW_PTR_SIZE] == 0) par {
            swEndPtr = (swEndPtr + adju(length, SW_PTR_SIZE)) & bufSizeMask;
            length = 0;
         }
         else { delay; }
      }
      else { delay; }
   }
}

/* --------------- P4 process - interrupt signaling --------------------*/
unsigned int 1 timeoutExpired = 0;
void main(void) {
   while (1) {
      if (timeoutMonitor >= timeoutRegister)
         timeoutExpired = 1;
      else
         timeoutExpired = 0;
   }
}
void main(void) {
   while (1) par {
      if ((intrMonitor == 1) && (swEndPtr >= intrRegister[SW_PTR_SIZE+1:2] @ 0x0) && (intrRegister[1] == 1)) par {
         intrMonitor = 0;
         ifc_interrupt = 1;
      }
      else { delay; }
      
      if ((intrRegister[0] == 1) && (timeoutExpired == 1)) par {
         timeoutMonitor = 0x0;
         ifc_interrupt = 1;
      }
      else 
         if (ifc_buf_newlen_dv == 1)
            timeoutMonitor = 0x0;
         else
            timeoutMonitor++;
   }
}
/*
 * Address decoder
 *
 * Address space
 *
 * Offset  Hex   Length   Description
 *     00  00       4   Control Register
 *     04  04       4   Status Register
 *     08  08       4   Start Pointer
 *     12  0C       4   End Pointer
 *     16  10       4   Buffer Size Mask Register
 *     20  14       4   Interrupt Register
 *     24  18       4   Timeout Register
 *     28  1C       4   hwStrPtr -- debug purposes
 *     32  20       4   hwEndPtr -- debug purposes
 */

void main(void)
{
   while (1) par {
      ifc_sw_ardy = ifc_sw_wr | ifc_sw_rd;
      ifc_sw_drdy = ifc_sw_rd;
      //Writing to DMA controller
       if (ifc_sw_wr == 1) {
         switch (ifc_sw_addr[5:0]) {
            case 0x00 :
                  controlRegister = ifc_sw_dwr[2:0];
               break;
            case 0x08 :
                  swStrPtr = ifc_sw_dwr[SW_PTR_SIZE-1:0];
               break;
            case 0x0C :
                  swEndPtr = ifc_sw_dwr[SW_PTR_SIZE-1:0];
               break;
            case 0x10 :
                  bufSizeMask = ifc_sw_dwr[SW_PTR_SIZE-1:0];
               break;
            case 0x14 :
               par {
                  intrRegister = ifc_sw_dwr;
                  intrMonitor = 1;
               }
               break;
            case 0x18 :
                  timeoutRegister = ifc_sw_dwr;
               break;
            default :
                  delay;
               break;
         }
      }
      //Reading from controller
      else if (ifc_sw_rd == 1) {
         switch (ifc_sw_addr[5:0]) {
            case 0x00 :
               ifc_sw_drd = 0@controlRegister;
               break;
            case 0x04 :
               ifc_sw_drd = 0@statusRegister;
               break;
            case 0x08 :
               ifc_sw_drd = 0@swStrPtr;
               break;
            case 0x0C :
               ifc_sw_drd = 0@swEndPtr;
               break;
            case 0x10 : 
               ifc_sw_drd = 0@bufSizeMask;
               break;
            case 0x14 : 
               ifc_sw_drd = intrRegister;
               break;
            case 0x18 : 
               ifc_sw_drd = timeoutRegister;
               break;
            case 0x1C : 
               ifc_sw_drd = 0x0 @ hwStrPtr;
               break;
            case 0x20 : 
               ifc_sw_drd = 0x0 @ hwEndPtr;
               break;
           
            default : 
               ifc_sw_drd = 0x0;
               break; 
         } 
      }
      else { delay; }
   }
}
