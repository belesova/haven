<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->

<!-- Component name -->
<component>Frame Meter</component>


<!-- Authors -->
<authors>
       <author login="korcek">Pavol Korcek</author>
</authors>


<!-- Features -->
<features>
   <item>Supports RX/TX FrameLink data bus width of 16 and 32.</item>
</features>


<!-- Short Block description -->
<description>
	This component process every incoming frame link packet, which contains 
	header and payload data. Packet will be measured 
	(length of header and length of whole frame with header length
	alinged to 8 bytes).With these informations frame_meter modify 
	input packet and transmit modified packet to frame link output.
	Component can be used for szedata, which needs these lengths
	in process of packet deaggregation.
</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>

	<!-- Generic description -->
	<generic_map>
		
        <generic name="DATA_WIDTH" type="integer" default="">
           RX/TX interface data bus width
        </generic>

	</generic_map>

	<!-- Port description -->
	<port_map>

	<divider>Common signals</divider>		
        <port name="CLK" dir="in" width="1">
            Clock input
        </port>
        <port name="RESET" dir="in" width="1">
            Global reset
        </port>

        <divider>
            RX FrameLink interface
        </divider>
        <port name="RX_DATA" dir="in" width="DATA_WIDTH">
            RX data bus
        </port>
        <port name="RX_REM" dir="in" width="log2(DATA_WIDTH/8)">
            RX data remainder
        </port>
        <port name="RX_SOF_N" dir="in" width="1">
            RX start of frame
        </port>
        <port name="RX_EOF_N" dir="in" width="1">
            RX end of frame
        </port>
        <port name="RX_SOP_N" dir="in" width="1">
            RX start of part
        </port>
        <port name="RX_EOP_N" dir="in" width="1">
            RX end of part
        </port>
        <port name="RX_SRC_RDY_N" dir="in" width="1">
            RX source ready
        </port>
        <port name="RX_DST_RDY_N" dir="out" width="1">
            RX destination ready
        </port>

        <divider>
            TX FrameLink interface
        </divider>
        <port name="TX_DATA" dir="out" width="DATA_WIDTH">
            TX data bus
        </port>
        <port name="TX_REM" dir="out" width="log2(DATA_WIDTH/8)">
            TX data remainder
        </port>
        <port name="TX_SOF_N" dir="out" width="1">
            TX start of frame
        </port>
        <port name="TX_EOF_N" dir="out" width="1">
            TX end of frame
        </port>
        <port name="TX_SOP_N" dir="out" width="1">
            TX start of packet (segment)
        </port>
        <port name="TX_EOP_N" dir="out" width="1">
            TX end of packet (segment)
        </port>
        <port name="TX_SRC_RDY_N" dir="out" width="1">
            TX source ready
        </port>
        <port name="TX_DST_RDY_N" dir="in" width="1">
            TX destination ready
        </port>
		
	</port_map>

</interface>


<!-- HW BODY SECTION **************************************************** -->
<body>
   <h1>Frame meter</h1>
   
   <h2>Input logic</h2>
   <p>
	Input logic is designed to count length of received frame. There are two
	counters for storing parts of frame, so header and payload with header lengths
	are counted distinctively. First counter of header length counts only if header
	data are transmitted over flow link. Value stored in this counter is afterwards
	alinged to 8 bytes and added to second counter output.
	Second frame counter counts all the time when payload data are present. To this 
	value is added previous alinged output. Modificated length and true header length
	are stored in fifo as is shown on picture below. Last value stored in fifo is number, 
	which indicate how many idle cycles needs to be send to output for aligning. 
	This number is counted from previous values.
   </p>
   <p>
     <obr src="./fig/fifo.fig">Positions of data stored in fifo</obr>
   </p>


   <h2>Output logic</h2>
   <p>
	Function of this block is switching data to output. In first phase output logic
	send out counted lengths from fifo and checks if there is any idle cycle
	present. This information is stored in fifo, in last few bits. Length of
	idle cycles depends on data width. Now, when length is already transmitted,
	output logic starts to send data from fl_fifo. This is header of stored frame.

	If no idle cycle was present, output is again switched to fl_fifo. Another
	possibility is that there are some idle cycles stored in fifo, so output logic
	starts to send some redundant data. These data, needed to align header data as
	was specified, are pseudorandom values actually present on fifo output.

	Further data are frame payload data stored in fl_fifo. These data are
	transmitted to output and process starts again and again.
   </p>

  <h3>FSM</h3>
  <p>
	Output logic block is controlled by own finite state machine described below.

	First phase, initialization, sets output from FSM to zero values. Next phase
	wait for data from fifo in S_IDLE state. When some data in fifo are stored,
	automata switch to state S_SEND_LENGTH and two 16 bits long lengths are
	transmitted as one length in the width of 32 (if data width is not 32 bit,
	output length is divided to some parts). After this, an automaton goes to
	S_SEND_HEADER state. Header data from fl_fifo are transmitted to output. Later,
	decision if is necessary to send idle bytes, determine next state. It is
	S_SEND_IDLE, or finally S_SEND_DATA. Next new state is S_IDLE or again
	S_SEND_LENGTH (if data in fifo are ready).
  </p>  
  <p>
     <obr src="./fig/fsm.fig">Output logic FSM</obr>
  </p>

  <h2> Subcomponents </h2>
  <p>
	<ul>
	<li>
		<ref_comp ref="decoder"> Frame Link decoder</ref_comp>
	</li>
	<li>
		<ref_comp ref="fl_fifo"> Frame Link fifo </ref_comp>
	</li>
	<li>
		<ref_comp ref="fifo"> Fifo </ref_comp>
	</li>
	<li>
		<ref_comp ref="mux"> Generic output multiplexor </ref_comp>
	</li>
	</ul>
  </p>

   <h1>Frequency and Resources usage</h1>
   <p>
      <tab sloupce="cccc">
         <tr>
            <th>Generic settings</th>
            <th>Slices (% of C6X slices)</th>
            <th>BlockRams (% of C6X BRAMs)</th>
            <th>Max. HW frequency</th>
         </tr>
         <tr>
            <th>DATA_WIDTH = 32</th> 
            <td>160 (0.68%)</td>
            <td>1 (0.43%)</td>
            <td>165.948 MHz</td>
        </tr>   
         <tr>
            <th>DATA_WIDTH = 16</th> 
            <td>171 (0.72%)</td>
            <td>1 (0.43%)</td>
            <td>164.745  MHz</td>
        </tr>
      <nazev>Chip utilization &amp; max design frequency by Precision</nazev>
      </tab>  	
	
      <tab sloupce="cccc">
         <tr>
            <th>Generic settings</th>
            <th>Slices (% of C6X slices)</th>
            <th>BlockRams (% of C6X BRAMs)</th>
            <th>Max. HW frequency</th>
         </tr>
         <tr>
            <th>DATA_WIDTH = 32</th> 
            <td>272 (1%)</td>
            <td>1 (0%)</td>
            <td>163.038 MHz</td>
	 </tr>
         <tr>
            <th>DATA_WIDTH = 16</th> 
            <td>278 (1%)</td>
            <td>1 (0%)</td>
	    <td>163.038 MHz</td>
        </tr>
      <nazev>Chip utilization &amp; max design frequency by XST</nazev>
      </tab>  
	
   </p>
   <h1>Schemes</h1>
   <p>
      <obr src="./fig/schema.fig">Frame meter conceptional architecture</obr>
   </p>

</body>

</source>
