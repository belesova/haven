<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->

<!-- Component name -->
<component>FrameLink Agregator</component>


<!-- Authors -->
<authors>
       <author login="kosek">Martin Kosek</author>
</authors>


<!-- Features -->
<features>
   <item>Supports RX/TX FrameLink data bus width of 8, 16, 32, 64 and
      128 bits.</item>
   <item>Supports timeout - when chosen time runs out the last frame of 
      agregated flow is sent and new agregated flow is begun</item>
</features>


<!-- Short Block description -->
<description>

   Agregator component can be used to join several FrameLink frames to one
   long agregated frame. The maximal agregated frame length can be chosen
   by generic setting. This component could prove useful in transmits to 
   software, where many small packets could be sent as one large one to 
   increase transmit efficiency.

</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>

	<!-- Generic description -->
	<generic_map>
		
        <generic name="DATA_WIDTH" type="integer" default="">
           RX/TX interface data bus width
        </generic>

        <generic name="TIMEOUT" type="integer" default="100000">
           Timeout in clock cycles. Set to 0 to turn timeout off
        </generic>

        <generic name="BLOCK_SIZE" type="integer" default="4096">
           Maximal output block size in Bytes. This generic must be set to 
           value, thas is larger than the maximum input frame size (MTU)!
        </generic>

	</generic_map>

	<!-- Port description -->
	<port_map>

		<divider>Common signals</divider>		
        <port name="CLK" dir="in" width="1">
            Clock input
        </port>
        <port name="RESET" dir="in" width="1">
            Global reset
        </port>

        <divider>
            RX FrameLink interface
        </divider>
        <port name="RX_DATA" dir="in" width="DATA_WIDTH">
            RX data bus
        </port>
        <port name="RX_REM" dir="in" width="log2(DATA_WIDTH/8)">
            RX data remainder
        </port>
        <port name="RX_SOF_N" dir="in" width="1">
            RX start of frame
        </port>
        <port name="RX_EOF_N" dir="in" width="1">
            RX end of frame
        </port>
        <port name="RX_SOP_N" dir="in" width="1">
            RX start of part
        </port>
        <port name="RX_EOP_N" dir="in" width="1">
            RX end of part
        </port>
        <port name="RX_SRC_RDY_N" dir="in" width="1">
            RX source ready
        </port>
        <port name="RX_DST_RDY_N" dir="out" width="1">
            RX destination ready
        </port>

        <divider>
            TX FrameLink interface
        </divider>
        <port name="TX_DATA" dir="out" width="DATA_WIDTH">
            TX data bus
        </port>
        <port name="TX_REM" dir="out" width="log2(DATA_WIDTH/8)">
            TX data remainder
        </port>
        <port name="TX_SOF_N" dir="out" width="1">
            TX start of frame
        </port>
        <port name="TX_EOF_N" dir="out" width="1">
            TX end of frame
        </port>
        <port name="TX_SOP_N" dir="out" width="1">
            TX start of packet (segment)
        </port>
        <port name="TX_EOP_N" dir="out" width="1">
            TX end of packet (segment)
        </port>
        <port name="TX_SRC_RDY_N" dir="out" width="1">
            TX source ready
        </port>
        <port name="TX_DST_RDY_N" dir="in" width="1">
            TX destination ready
        </port>
		
	</port_map>

</interface>


<!-- HW BODY SECTION **************************************************** -->
<body>
   <h1>Agregator info</h1>
   <p>
      This component joins received FrameLink frames to one solid output frame.
      The output frame maximal size can be set by BLOCK_SIZE generic. Keep in mind
      that any input SOF, SOP, EOP, EOF signals won't be readable in output frame
      as there is only SOF&amp;SOP on the beginning of the agregated frame and 
      EOP&amp;EOF on it's end.
   </p>

   <h2>Timeout</h2>
   <p>
      This ability is useful to avoid waiting too long for for end of output 
      frame when there are long delays between packets and BLOCK_SIZE threshold
      still hasn't been hit. It especially useful for packet transmission to 
      software. Without timeout, when only one small packet arrives it wouldn't
      reach the software as it would be stuck in Agregator until another packets
      arrive and BLOCK_SIZE is reached.
   </p>
   <p>
      Timeout can be set to user interval (for example 1ms) to make sure, that 
      received packets won't be kept in Agregator over specified time.
   </p>

   <h1>Frequency and Resources usage</h1>
   <p>
      <tab sloupce="cccc">
         <tr>
            <th>Generic settings</th>
            <th>Slices (% of C6X slices)</th>
            <th>BlockRams (% of C6X BRAMs)</th>
            <th>Max. HW frequency</th>
         </tr>
         <tr>
            <th>64b input, timeout 100000 (1ms on 100MHz)</th> 
            <td>99 (0.42%)</td>
            <td>2 (0.86%)</td>
            <td>140 MHz</td>
         </tr>
      <nazev>Chip utilization &amp; max design frequency</nazev>
      </tab> 
   </p>
   <h1>Schemes</h1>
   <p>
      <obr src="./fig/agregator.fig">Agregator architecture</obr>
   </p>

</body>

</source>
