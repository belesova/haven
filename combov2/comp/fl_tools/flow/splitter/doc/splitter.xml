<?xml version="1.0" encoding="ISO-8859-1"?>
<source>

<component>FrameLink Splitter</component>

<authors>
   <author login="kosek">Martin Kosek</author>
</authors>

<features>
   <item>Generic data input width</item>
   <item>Queue choosing algorithm balancing queue load</item>
</features>

<description>
   <p>
      FrameLink Splitter is intended for splitting packet data flow (according to
      FrameLink protocol) from one interface to various number of output interfaces. 
      Splitter will prove very useful when there are components with high 
      throughput and lesser throughput in our design.
   </p>
   <p>
      We can use it to split data flow from one fast component to
      several slower components - throughput of our design will be increased
      because it will be no longer slowed down by slower components.
   </p>
</description>

<interface>
   <generic_map>
      <generic name="DATA_WIDTH" type="integer" default="">
         Input and output data width. Only values 8, 16, 32, 64, 128 supported
      </generic>
      <generic name="OUTPUT_COUNT" type="integer" default="">
         Number of output interfaces
      </generic>
   </generic_map>
   <port_map>

      <divider>Common Interface</divider>
      <port name="CLK" dir="in" width="1">
         Clock input
      </port>
      <port name="RESET" dir="in" width="1">
         Reset input
      </port>
      
      <divider>Input FrameLink Interface</divider>
      <port name="RX" dir="in" width="1">
         Input
      </port>

      <divider>Output FrameLink Interfaces</divider>
      <port name="TX0" dir="out" width="1">
         Output 0
      </port>
      <port name="TX1" dir="out" width="1">
         Output 1
      </port>
      <port name="TXN" dir="out" width="1">
         Output N (generic)
      </port>
   </port_map>
</interface>

<body>
   <h1>Splitter information</h1>
   
   <h2>Queue choosing</h2>
   <p>
   The output queue choosing is done via least used queue policy. That means
   that incoming frame will be redirected to the output queue (FIFO) with
   least occupied space.
   </p>

   <h2>Possible delays</h2>
   <p>
   The output queue choosing is processed parallel with actual frame transmition
   so there should be no delay on Splitter between two transmitted frames.
   </p>

   <h2>Output queue size</h2>
   <p>
      There is fixed space for data buffering. Every output interface has assigned
      a queue composed of one memory composed of BlockRAMs. When data width is less
      or equal to 32b, each memory will be composed of one BlockRAM. In case of higher
      data width there may be more BlockRAMs occupied (as maximal width of BlockRAM
      is 32b).
   </p>

   <h1>Frequency and Resources usage</h1>
   <p>
      <tab sloupce="cccc">
         <tr>
            <th>Generic settings</th>
            <th>Slices (% of C6X slices)</th>
            <th>BlockRams (% of C6X BRAMs)</th>
            <th>Max. HW frequency</th>
         </tr>
         <tr>
            <th>16b input, 2x 16b output</th> 
            <td>74 (0.3%)</td>
            <td>2 (0.9%)</td>
            <td>150 MHz</td>
         </tr>
         <tr>
            <th>64b input, 4x 64b output</th> 
            <td>217 (0.9%)</td>
            <td>8 (3.5%)</td>
            <td>100 MHz</td>
         </tr>
      <nazev>Chip utilization &amp; max design frequency</nazev>
      </tab> 
   </p>

   <h1>Schemes</h1>
   <p>
   The block structure of the component is in the following figures. It's 
   composed of Control Unit where output queue is choosen and FrameLink
   FIFOs itselves.
   </p>

   <p>
      <obr src="./fig/fls_arch.fig">Splitter architecture</obr>
      <obr src="./fig/fls_cu.fig">Control Unit</obr>
      <obr src="./fig/fls_cu_fsm.fig">Control Unit FSM</obr>
   </p>

</body>
</source>
