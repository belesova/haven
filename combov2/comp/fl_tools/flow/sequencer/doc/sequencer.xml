<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->


<!-- Component name -->
<component>FrameLink Sequencer</component>


<!-- Authors -->
<authors>
       <author login="polcak_l">Libor Polcak</author>
</authors>


<!-- Features -->
<features>
   <item>Data width 16, 32, 64, or 128 bits</item>
   <item>Generic data input and data output width</item>
   <item>Generic count of input interfaces</item>
   <item>Outgoing packets are in sequence defined by the input packet ticket number</item>
</features>


<!-- Bugs -->
<!--<bugs>
	<item>Known bug 1</item>
	<item>Known bug 2</item>
</bugs>-->


<!-- Things to do -->
<todo>
		<item>Test the component</item>
		<item>Find default value for FIFO_ITEMS</item>
</todo>


<!-- Short Block description -->
<description>
   <p>
      FrameLink Sequencer is intended for sorting packets from several input
			interfaces into one data flow, both with variable width, according to
			ticket number inserted in every received packet. This component will
			prove very useful when there are components with high throughput and
			lesser throughput in our design and we need to have packets in the same
			order on the output as they were received.
   </p>
   <p>
      We can use FrameLink Marker and FrameLink Splitter to split data flow
			from one fast component to several instances of slower components and
      then use FrameLink Sequencer to put the data flows into one.
   </p>
</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>

	<!-- Generic description -->
	<generic_map>
	    <divider>Input/Output interface</divider>		
      <generic name="INPUT_WIDTH" type="integer" default="">
         Data width of one input interface (16, 32, 64, 128)
      </generic>
      <generic name="INPUT_COUNT" type="integer" default="">
         Number of input interfaces.
      </generic>
      <generic name="OUTPUT_WIDTH" type="integer" default="">
         Output width.
			</generic>
		  <divider>Frame</divider>		
      <generic name="HEADER" type="boolean" default="true">
				Frames contains header
      </generic>
			<generic name="FOOTER" type="boolean" default="true">
				Frames contains footer
      </generic>
		  <divider>Part of frame, where the ticket is present (only 1 can be true)</divider>		
			<generic name="TICKET_HDR" type="boolean" default="true">
				Ticket is present in header part
      </generic>
      <generic name="TICKET_PLD" type="boolean" default="false">
				Ticket is present in payload part
      </generic>
      <generic name="TICKET_FTR" type="boolean" default="false">
				Ticket is present in footer part
      </generic>
		  <divider>Ticket options</divider>		
      <generic name="TICKET_OFFSET" type="integer" default="">
         Offset of the ticket.
      </generic>
      <generic name="TICKET_SIZE" type="integer" default="">
         Size of the ticket.
			</generic>
		  <divider>FIFOs</divider>		
      <generic name="TICKET_FIFO_ITEMS" type="integer" default="">
         Number of items in input ticket FIFOs.
      </generic>
      <generic name="TICKET_FIFO_TYPE" type="mem_type (fifo_pkg)" default="LUT">
         Number of items in input ticket FIFOs.
      </generic>
      <generic name="INPUT_FIFO_ITEMS" type="integer" default="">
         Number of items in input FL FIFOs.
      </generic>
      <generic name="OUTPUT_FIFO_ITEMS" type="integer" default="">
         Number of items in output FL FIFO.
      </generic>
		  <divider>Optional FL Relay</divider>		
      <generic name="SHIFT_FIFO_ITEMS" type="integer" default="0">
				 Number of items in optional shift register FIFO to avoid long paths
         at the FL Transformer input
         Possible values: 0 (off), 2 or more
      </generic>
	</generic_map>

	<!-- Port description -->
	<port_map>

      <divider>Common signals</divider>		
      <port  name="CLK" dir="in" width="1">
         Global FPGA clock
      </port>
      <port  name="RESET" dir="in" width="1">
         Global reset
      </port>

      <divider>Input FrameLink interfaces</divider>
      <port name="RX0" dir="inout" width="1">
         Recieve interface 0
      </port>
      <port name="RX1" dir="inout" width="1">
         Recieve interface 1
      </port>
      <port name="RXN" dir="inout" width="1">
         Recieve interface N (generic)
      </port>
  	
      
      <divider>Output FrameLink interface</divider>
      <port name="TX" dir="inout" width="">
         Transmit interface
      </port>
   </port_map>
</interface>

<!-- HW BODY SECTION **************************************************** -->
<!-- information for HW designers, structure should be as follow          -->
<body>

<h1>Sequencer information</h1>

	<h2>Input</h2>
	<p>
		FL Sequencer input is standard FrameLink protocol with one exception. In
		one part of the packet has to be a number of the packet. This number
		should be inserted by <ref_comp ref="fl_marker" tag_id="HEAD"> FrameLink
		marker component</ref_comp>. Note that size of this number can not be
		bigger than size of the input FrameLink.
	</p>
	<p>
		The part which contains the ticket number has to be at least 1 byte longer
		than the length of the ticket is. The ticket number is cutted out inside
		of the FL Sequencer.
	</p>
	<p>
		The input is actually composed from more than one FrameLink interface.
		Packets from these interfaces are later put together into one sequence.
		All interfaces should belong to one original data flow and this flow
		should be complete (i.e. you should not create a sequence from a part
	 	of the splitted flows).
	</p>
	<p>
		Flows go through <!--<ref_comp ref="fl_extract" tag_id="HEAD">--> FrameLink
		Cutter<!--</ref_comp>--> to read and cut the packet number called ticket.
	  processed later. FrameLink flows wait in
	  <ref_comp ref="fl_fifo" tag_id="HEAD">FrameLink FIFO</ref_comp>. Extracted
		ticket numbers are stored in separate
		<ref_comp ref="fifo_sync_ord" tag_id="HEAD">FIFO</ref_comp>.
	</p>

	<h2>Finite State Machine</h2>
	<p>
		In the core of the Sequencer's FSM is a counter. Value of this counter is
		the number of the ticket which should be processed next. This value is
		compared with waiting tickets in the ticket FIFOs. After the ticket is
		found, corresponding input is set to be active and the packet is
		transmitted to the output part.
	</p>
	<p>
		Everytime new packet is being transmitted from the input to the output,
		the value of the counter is increased by one. So while one packet is being
		transmitted next one is being searched concurrently. After one packet
		transmission is completed next one is started immediately unless next
		packet has not arrived yet.
	</p>
	<p>
		The Finite State Machine of the FrameLink Sequencer should not cause any
		delay when the incoming traffic arrives fluently. However FrameLink
		components in the output can cause some. You should also note that missing
	 	or switched packet number (in one interface) would break the transmission
	 	and FrameLink Sequencer would wait for the packet for ever.
	</p>

	<h2>Multiplexers</h2>
	<p>
		Data flow from the active input is transmitted to the output through
		multiplexers. Theirs select signal is controled by the FSM.
	</p>

	<h2>Output</h2>
	<p>
		Optional first component in the output part is
		<ref_comp ref="relay" tag_id="HEAD">FrameLink Relay</ref_comp>. Its
		purpose is to reduce long path between FL FIFO and the FL Transformer
		that can occure when bigger count of inputs is used.
    FrameLink items are tranformed to the output FrameLink size in the
		<ref_comp ref="fl_transformer" tag_id="HEAD"> FrameLink Transformer
		</ref_comp> and they wait in <ref_comp ref="fl_fifo" tag_id="HEAD">
		FrameLink FIFO</ref_comp> to be transmitted to the next component.
	</p>

		
<h1>Frequency and Resources usage</h1>

  <h2>Precision</h2>
	<p>
        <!--Resources usage and max. frequency by Precision-->
		<tab sloupce="ccc">
			<tr>
				<th>Generic settings</th>
				<th>Slices (% of C6X slices)</th>
				<th>BlockRams (+ % of C6X BRAMs)</th>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=2, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>423(1.79%)</td>
				<td>4(1.72%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=4, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>774(3.28%)</td>
				<td>6(2.59%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=16, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=2
				</th> 
				<td>2894(12.25%)</td>
				<td>18(7.76%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=2, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>474(2.01%)</td>
				<td>6(2.59%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=4, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>824(3.49%)</td>
				<td>8(3.45%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=16, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=2
				</th> 
				<td>2957(12.52%)</td>
				<td>20(8.62%)</td>
			</tr>
		<nazev>Chip utilization</nazev>
		</tab> 
	
		<tab sloupce="ccc">
			<tr>
				<th>Generic settings</th>
				<th>Max.frequency by Precision</th>
				<th>Frequency tested in HW</th>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=2, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>133 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=4, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>117 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=16, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=2
				</th> 
				<td>120 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=2, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>133 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=4, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>129 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=16, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=2
				</th> 
				<td>120 MHz</td>
				<td>None</td>
			</tr>
		<nazev>Maximal frequency</nazev>
		</tab> 
	
  </p> 

  <h2>XST</h2>
	<p>
        <!--Resources usage and max. frequency by XST-->
		<tab sloupce="cc">
			<tr>
				<th>Generic settings</th>
				<th>Slices (% of C6X slices)</th>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=2, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>640(2%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=4, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>1199(5%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=16, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=2
				</th> 
				<td>4415(18%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=2, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>691(2%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=4, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>1243(5%)</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=16, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=2
				</th> 
				<td>4513(19%)</td>
			</tr>
		<nazev>Chip utilization</nazev>
		</tab> 
	
		<tab sloupce="ccc">
			<tr>
				<th>Generic settings</th>
				<th>Max.frequency by XST</th>
				<th>Frequency tested in HW</th>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=2, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>145 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=4, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>129 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=16, OUTPUT_WIDTH=32, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=2
				</th> 
				<td>118 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=2, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>129 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=4, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=0
				</th> 
				<td>129 MHz</td>
				<td>None</td>
			</tr>
			<tr>
				<th>
					INPUT_WIDTH=16, INPUT_COUNT=16, OUTPUT_WIDTH=64, HEADER=true,
					FOOTER=true, TICKET_HDR=true, TICKET_OFFSET=1, TICKET_SIZE=2,
					TICKET_FIFO_ITEMS=64, TICKET_FIFO_TYPE=LUT, INPUT_FIFO_ITEMS=1024
					OUTPUT_FIFO_ITEMS=1024, SHIFT_FIFO_ITEMS=2
				</th> 
				<td>126 MHz</td>
				<td>None</td>
			</tr>
		<nazev>Maximal frequency</nazev>
		</tab> 
	
  </p> 

<h1>Schemes</h1>
	
	<p>
		The block structure of the component is in the following figure.
		<obr src="./fig/sequencer.fig">Sequencer architecture</obr>
	</p>

	<p>More detailed figures follow.</p>
	<p>
		The work of the Finite State Machine is in the next figure.
		<obr src="./fig/fsm.fig">Control FSM</obr>
	</p>
	<p>
		Every input has this control unit. Waiting ticket number is compared with
		the actual and after correct one is found, the input is active.
		<obr src="./fig/fsm_input.fig">Input control unit.</obr>
	</p>
	<p>
		Signal input_rdy indicates that a ticket has been found.
		<obr src="./fig/input_rdy.fig">Input ready</obr>
	</p>
	<p>
		Register reg_sel controls multiplexors.
		<obr src="./fig/reg_sel.fig">Register reg_sel</obr>
	</p>
	<p>
		Logic used to split original data and extracted tickets.
		<obr src="./fig/tickets.fig">Ticket and FL FIFO input logic</obr>
	</p>


</body>

</source>
