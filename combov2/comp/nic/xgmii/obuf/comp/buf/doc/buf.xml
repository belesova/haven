<source>

<component>Buffer part of XGMII OBUF</component>

<authors>
    <author login="solanka">Lukas Solanka</author>
    <author login="polcak_l">Libor Polcak</author>
</authors>

<features>
    <item>Buffers outgoing packets before transmission</item>
		<item>Transforms data to 64 bit words</item>
</features>

<!--<bugs>
</bugs>-->

<todo>
   <item>Simulations</item>
   <item>HW tests</item>
</todo>

<description>
   Frames that should be sent out are stored in FIFO. Once the whole frame is
	 ready the transmission begins. The frame is transformed to 64 bits words
	 and sent to the Buf part output interface.
</description>

<interface>
    <generic_map>
        <generic name="DATA_WIDTH" type="integer" default="">
				   FrameLink width
        </generic>
        <generic name="DFIFO_SIZE" type="integer" default="">
				   DFIFO item count (DATA_WIDTH wide)
        </generic>
        <generic name="HFIFO_SIZE" type="integer" default="">
				   HFIFO item count (1-bit wide)
        </generic>
        <generic name="HFIFO_MEMTYPE" type="mem_type" default="LUT">
				   Type of HFIFO memory. The FIFO is one bit wide
        </generic>
    </generic_map>

    <port_map>

        <divider> Common signals </divider>
        <port name="FL_CLK" dir="in" width="1">
            FrameLink Clock signal
        </port>
        <port name="RESET_FL" dir="in" width="1">
           Synchronous reset for FL_CLK domain
        </port>
        <port name="XGMII_CLK" dir="in" width="1">
           Output XGMII Clock signal
        </port>
        <port name="RESET_XGMII" dir="in" width="1">
           Synchronous reset for XGMII domain
        </port>

        <divider> DFIFO input interface </divider>
        <port name="RX_DATA" dir="in" width="DATA_WIDTH">
				   Packet data
        </port>
        <port name="RX_SOP_N" dir="in" width="1">
				   Start of payload
        </port>
        <port name="RX_EOP_N" dir="in" width="1">
				   End of payload
        </port>
        <port name="RX_EOP_POS" dir="in" width="log2(DATA_WIDTH/8)">
				   End of packet position
        </port>
        <port name="RX_WR" dir="in" width="1">
				   Write current word of the packet
        </port>
        <port name="RX_MARK" dir="in" width="1">
				   Current packet is completelly received
        </port>
        <port name="RX_DFIFO_FULL" dir="out" width="1">
				   DFIFO is full
        </port>
        <port name="RX_DFIFO_OVF" dir="out" width="1">
				   DFIFO overflow
        </port>

        <divider> HFIFO input interface </divider>
        <port name="RX_HDATA" dir="in" width="2">
				   Control data
        </port>
        <port name="RX_HFIFO_WR" dir="in" width="1">
				   Write control data
        </port>
        <port name="RX_HFIFO_FULL" dir="out" width="1">
				   HFIFO is full
        </port>

        <divider> Process interface </divider>
        <port name="TX_DATA" dir="out" width="64">
				   Outgoing data
        </port>
        <port name="TX_SOP" dir="out" width="1">
				   Start of outgoing packet
        </port>
        <port name="TX_EOP" dir="out" width="1">
				   End of outgoing packet
        </port>
        <port name="TX_EOP_POS" dir="out" width="log2(64/8)">
				   Position of the end of packet (valid when TX_EOP is active)
        </port>
        <port name="TX_DV" dir="out" width="1">
				   Outgoing data is valid
        </port>
        <port name="SRC_MAC_RPLC" dir="out" width="1">
           '1' Replace source MAC address, '0' keep the one present in frame
        </port>
        <port name="NEXT_SRC_MAC_RPLC" dir="in" width="1">
           Send next SRC_MAC_RPLC, active in '1'
        </port>
        <port name="TX_DST_RDY" dir="in" width="1">
          Destination is ready, active in '1'
        </port>
        <port name="REG_MAC_ADDR" dir="out" width="48">
           MAC address register (MSB is byte 47 downto 40)
        </port>

        <divider> MI32 interface </divider>
        <port name="MI" dir="inout" width="">
           OBUF MI32 interface
        </port>
        <port name="MI_CLK" dir="in" width="1">
           MI interface Clock signal
        </port>
        <port name="RESET_MI" dir="in" width="1">
           Synchronous reset for MI_CLK domain
        </port>

    </port_map>

</interface>

<constant>
   <const name="OBUF command: Strobe frame counters" id="OBUFCMD_STROBE_COUNTERS" value="0x01">
      Writing this constant into <ref id="REG_OBUF_CTRL">the command register</ref> will cause that
      the current frame counters' values will be stored into the frame counter registers at the
      same moment.
   </const>

   <const name="OBUF command: Reset frame counters" id="OBUFCMD_RESET_COUNTERS" value="0x02">
      Writing this constant into <ref id="REG_OBUF_CTRL">the command register</ref> will cause that
      the frame counters will be reset.
   </const>
</constant>

<operations>
	<init>

		<it ref="OBUF_SET_ENABLE_STATUS">Enable OBUF</it>

  </init>


   <op name="Enable/Disable OBUF" id="OBUF_SET_ENABLE_STATUS">
      To enable/disable OBUF set/reset
      <ref id="REG_ENABLE"> OBUF enable register</ref>. Set This register
      to enable OBUF or reset it to disable OBUF.
   </op>

   <op name="Set MAC Address" id="OBUF_SET_MAC_ADDRESS">
      To set OBUF MAC address store an appropriate value into the OBUF MAC address register.
      As the MAC address is 48 bits wide, you must do it in two steps. First store
      <ref id="REG_MAC0">the low 32 bits</ref> and then <ref id="REG_MAC1">the high 16 bits</ref>.
      You must <ref id="OBUF_SET_ENABLE_STATUS">disable OBUF first</ref>.
   </op>

   <op name="Sample frame counters" id="OBUF_STROBE_COUNTERS">
      To sample the current frame counters values store
      <ref id="OBUFCMD_STROBE_COUNTERS"> OBUFCMD_STROBE_COUNTERS</ref> command
      into <ref id="REG_OBUF_CTRL">the command register</ref>.
   </op>

   <op name="Read frame counters' content" id="OBUF_READ_COUNTERS">
      OBUF has three frame counters: Total Frames Counter (TFC),
      Sent Frames Counter (SFC) and Not Sent Frames Counter (NSFC)
      If the OBUF unit is enabled, these counters will have a floating content.
			For this reason, it is necessary to strobe their actual values at the one
			moment into the frame counter registers. Software driver is than able to
			read those registers.
   </op>
</operations>

<addr_space id="XGMII_OBUF" name="Output Buffer Address Space" main="yes" size="0x100">
    <instantion ref="XGMII_OBUF_AS" offset="0x000000">
        XGMII OBUF address space
    </instantion>
</addr_space>

<addr_space id="XGMII_OBUF_AS" name="OBUF address space" >
    <reg name="Total packets counter (low part)" id="CNT_PACKETS_LOW" offset="0x00000" access="R" words="1">
        <bit_vect bits="32">
            <description_above>
                It holds the lower part of the number of all incoming packets.
            </description_above>
            <format>
                <bit from="0" to="31" name="NUMBER">Number</bit>
            </format>
        </bit_vect>
    </reg>

    <reg name="Transmitted packets counter (low part)" id="CNT_SENT_LOW" offset="0x00004" access="R" words="1">
        <bit_vect bits="32">
            <description_above>
                It holds lower part of the number of all transmitted packets.
            </description_above>
            <format>
                <bit from="0" to="31" name="NUMBER">Number</bit>
            </format>
        </bit_vect>
    </reg>

    <reg name="Discarded packets counter (low part)" id="CNT_NOTSENT_LOW" offset="0x00008" access="R" words="1">
        <bit_vect bits="32">
            <description_above>
                It holds the lower part of the number of all packets, that was not transmitted
                (because of deasserted Frame Valid bit in FrameLink footer).
            </description_above>
            <format>
                <bit from="0" to="31" name="NUMBER">Number</bit>
            </format>
        </bit_vect>
    </reg>

    <reg name="Total packets counter (high part)" id="CNT_PACKETS_HIGH" offset="0x00010" access="R" words="1">
        <bit_vect bits="32">
            <description_above>
                It holds the higher part of the number of all incoming packets.
            </description_above>
            <format>
                <bit from="0" to="31" name="NUMBER">Number</bit>
            </format>
        </bit_vect>
    </reg>

    <reg name="Transmitted packets counter (high part)" id="CNT_SENT_HIGH" offset="0x00014" access="R" words="1">
        <bit_vect bits="32">
            <description_above>
                It holds the higher part of the number of all transmitted packets.
            </description_above>
            <format>
                <bit from="0" to="31" name="NUMBER">Number</bit>
            </format>
        </bit_vect>
    </reg>

    <reg name="Discarded packets counter (high part)" id="CNT_NOTSENT_HIGH" offset="0x00018" access="R" words="1">
        <bit_vect bits="32">
            <description_above>
                It holds the higher part of the number of all packets, that was not transmitted
                (because of deasserted Frame Valid bit in FrameLink footer).
            </description_above>
            <format>
                <bit from="0" to="31" name="NUMBER">Number</bit>
            </format>
        </bit_vect>
    </reg>

    <reg name="OBUF enable register" id="REG_ENABLE" offset="0x00020" access="RW" words="1">
        <bit_vect bits="1">
            <description_above>
                Enables/Disables packet transmission. STAT='1' means the transmission is
                enabled, STAT='0' means the transmission is disabled. When disabled, no packets are transmitted, but
                incoming packets for transmission are stored to buffer.
            </description_above>
            <format>
                <bit from="0" to="0" name="STAT">Status</bit>
            </format>
        </bit_vect>
    </reg>

    <reg name="MAC address register (low part)" id="REG_MAC0" offset="0x00024" access="RW" words="2">
        <bit_vect bits="32">
            <description_above>
                MAC address register 0.
            </description_above>
            <format>
                <bit from="0" to="31" name="MAC_ADDR">Low 32 bits of MAC address</bit>
            </format>
            <description_below>
                It holds the low 32 bits of MAC address
            </description_below>
        </bit_vect>
    </reg>

    <reg name="MAC address register (high part)" id="REG_MAC1" offset="0x00028" access="RW" words="2">
        <bit_vect bits="32">
            <description_above>
                MAC address register 1.
            </description_above>
            <format>
                <bit from="0" to="15" name="MAC_ADDR">High 16 bits of MAC address</bit>
            </format>
            <description_below>
                It holds the high 16 bits of MAC address
            </description_below>
        </bit_vect>
    </reg>

    <reg name="OBUF command register" id="REG_OBUF_CTRL" offset="0x2c" access="W" words="1">
        <bit_vect bits="8">
            <description_above>
                OBUF command register.
            </description_above>
            <format>
                <bit from="0" to="7" name="Command">
                    Write a command into this register.
                </bit>
            </format>
            <description_below>
                See a Software section for Command constats review.
            </description_below>
        </bit_vect>
    </reg>

    <reg name="OBUF status register" id="REG_OBUF_STATUS" offset="0x30" access="R" words="1">
        <bit_vect bits="8">
            <description_above>
                OBUF status register.
            </description_above>
            <format>
                <bit from="0" to="3" name="RESERVED">
                    Reserved.
                </bit>
                <bit from="4" to="5" name="OBUF speed">
                    Reserved tied to ones.
                </bit>
                <bit from="6" to="31" name="RESERVED">
                    Reserved.
                </bit>
            </format>
            <description_below>
            </description_below>
        </bit_vect>
    </reg>


</addr_space>

<sw_body>
	<h1>Initialization</h1>
	<p>
		You should <ref id="OBUF_SET_ENABLE_STATUS">disable OBUF first</ref>. Then,
		you can <ref id="OBUF_SET_MAC_ADDRESS">set MAC address</ref>.
		After that <ref id="OBUF_SET_ENABLE_STATUS">enable OBUF</ref>.
	</p>
	<h1>Frame counters</h1>
	<p>
		You can read number of all, sent and not sent frames. You has to
		<ref id="OBUF_STROBE_COUNTERS">sample frame counters</ref> first and then
		you can <ref id="OBUF_READ_COUNTERS">read frame counters' content</ref>.
	</p>
	<h1>General info</h1>
	<p>
		This component does not support unaligned access to the registers.
	</p>
</sw_body>

<body>

	<h1>Buf information</h1>

	<h2>General info</h2>
	<p>
		This component is responsible for transforming frames to 64-bit wide words.
		It also communicates through MI32 interface with software driver.
	</p>

	<h2>Registers</h2>
	<p>
		Important data that are readable and/or writable through the MI32 bus are
		stored here. You can see the purpose of each register in software section.
	</p>

	<h2>Asynchronous MI32 mode</h2>
	<p>
		The core of the <ref_comp ref="xgmii_obuf" tag_id="HEAD">OBUF</ref_comp>
		and MI32 local bus may have different clock period so it is necessary to use
		asynchronous MI32 connection.
	</p>

	<h2>Buffers</h2>
	<p>
		Input part of Buf is composed of two FIFOs. One of them is used to store
		data of the frames to be transmitted. The other is used for bits
		representing whether the source MAC address should be changed or not.
	</p>

	<h2>Output part</h2>
	<p>
		There are 2 FrameLink components in the output part of Buf. FL Transformer
		is used to transform words in input width to constant size of 64 bits.
	</p>
	<p>
		Special version of FL Pipe is used in order to divide critical path which
		would occur without this component. However, original FL Pipe is constructed
		from shift registers that are to slow to be used here so special version was
		created.
	</p>


	<h1>Schemes</h1>
	<p>
		The block structure of the component is in the following figure.
		<obr src="./fig/buf.fig">Buf architecture</obr>
	</p>

</body>


</source>
