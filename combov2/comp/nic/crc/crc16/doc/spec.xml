  <source>
    <component>
      32-bit CRC module processing 16 bits in parallel
    </component>

    <authors>
       <author login="bidlom">Michal Bidlo</author>
    </authors>

    <versions>
        <version id="1.2">
            <item>Fully functional CRC32 module before advanced optimization.</item>
        </version>
    </versions>

    <description>
      The module computes 32-bit CRC processing 16 bits in parallel during the
      calculation. The processed packets may have arbitrary length (computed in
      bytes). This approach to the CRC implementation allows us to optimize CRC
	  computation substantially.
    </description>

   <interface>

   <port_map>
     <port name="DI" dir="in" width="16">
      Data input.
     </port>

     <port name="DI_DV" dir="in" width="1">
	  Input data validity indicator.

      Indicates the validity of input data (DI). During computation with valid
	  data this input must be '1'. If DI_DV = '0' then the computation is
	  suspended (the CRC register holds its last valid value) until DI_DV is
	  '1'.
     </port>

     <port name="DI_MASK" dir="in" width="2">
	  Half-validity of the last data word indicator.

      This port is set to "01" if the last word of packet contains only one
	  valid data byte (i.e. for packets consisting of odd number of bytes).
	  If that case arises, DI_MASK has to be set to "01" simultaneously with
	  the last word of packet at DI and hold at least two clock periods (until
	  DO_DV = '1'). In all the other cases DI_MASK has to be "00".
     </port>

     <port name="EOP" dir="in" width="1">
	  End of packet (last data word) indicator.

      Indicates the last word of packet. EOP must be changed to '1' simultaneously
	  with the last word of packet at DI and must be holt at least one clock period.
     </port>

     <port name="RDY" dir="out" width="1">
	  Input data acceptance indicator.

      RDY is set to '1' if the CRC module is ready for processing of valid data.
	  If RDY equals '0' the input data is ignored - this happens during two
	  clock periods after processing the last word of packet (finishing CRC
	  computation of the packet).
     </port>

     <port name="CRC" dir="out" width="32">
	  Resulting CRC value.

      Resulting CRC value. CRC is reversed over bytes and inverted.
     </port>

     <port name="DO_DV" dir="out" width="1">
	  CRC validity indicator.

      Indicates the validity of resulting CRC. DO_DV is set to '1' after
	  finishing the CRC computation of the current packet, else it is '0'
	  (during the CRC computation).
     </port>

     <port name="RESET" dir="in" width="1">
      Global reset port.
     </port>

     <port name="CLK" dir="in" width="1">
      Global clock port.
     </port>
   </port_map>

   </interface>

    <operations>
        <init>
            <it ref="reset">
             By setting RESET port to '1' for at least one clock period, the
			 system gets to initial state.
            </it>
        </init>
    </operations>

   <structure src="./fig/crc32_16b.fig">
        The CRC32 module processing 16 bits in parallel
   </structure>

   <body>
    <p>
     CRC32_16b module consists of two 16-bit registers for storing the value
	 during the computation and resulting CRC at the end of the computation.
	 Data enters the higher register in 16-bit blocks and continues
	 to lower register at each clock period. The output of the lower register
	 is interpreted as 16-bit address of 32-bit CRC table (combinational unit
	 inside the module) for calculating temporary CRC value of these 16 bits in parallel.
	 This temporary CRC value is XORed with the actual content of both registers.
	 If the processed packet has odd length (computed in bytes), only the valid
	 8 bits are used as an address for calculating temporary CRC for the last data word by
	 means of another 32-bit CRC table. After all the bytes (words) of the
	 packet are processed, the content of both registers is reversed over bytes
	 and inverted to calculate the final CRC32 value of the entire packet.
	</p>
   </body>
</source>
