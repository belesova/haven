<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Doc v3 -->
<source>

<!-- Page name -->
<component>FrameLink Marker</component>

<!-- Authors worked on -->
<authors>
   <author login="trsm1">Michal Trs</author>
</authors>

<features>
   <item>2 work modes - Insert, ReWrite</item>
   <item>Full configurable via generic</item>
   <item>Full throughput when both RX source and TX destination components are ready.</item>
</features>


<!-- Short Block description -->
<description>
   Marker is a generic component which inserts a "mark" into
   a FrameLink Frame. It can insert "mark" to header or footer
   packets. It can be useful when the FL Binder is used and the
   knowledge of a source(input) port after binding is needed for
   example. There are 2 work modes. The first one rewrite
   data on given offset with "mark", the second one insert "mark"
   and data after given offset are shifted.
</description>

<!-- COMPONENT INTERFACE ************************************************* -->
<interface>

   <generic_map>
      <generic name="DATA_WIDTH" type="integer" default="32">
         FrameLink width
      </generic>
      <generic name="HEADER" type="boolean" default="true">
         Header data present
      </generic>
      <generic name="FOOTER" type="boolean" default="true">
         Footer data present
      </generic>
      <divider>Mark options</divider>
      <generic name="OFFSET" type="integer" default="2">
         Mark position in FL packet in Bytes (Count from 0)
      </generic>
      <generic name="SIZE" type="integer" default="1">
         Size of MARK in Bytes
      </generic>
      <divider>Add MARK to header or footer (only one can be choice)</divider>
      <generic name="MARK_HDR" type="boolean" default="true">
      </generic>
      <generic name="MARK_FTR" type="boolean" default="false">
      </generic>
      <generic name="INSERT" type="boolean" default="false">
         Switch between insert and rewrite mode
      </generic>
   </generic_map>

   <port_map>
      <port name="CLK" dir="in" width="1">
         100 MHz clock
      </port>
      <port name="RESET" dir="in" width="1">
         Asynchronous reset signal
      </port>
      <divider>Marker signals</divider>
      <port name="MARK" dir="in" width="SIZE*8">
         Input mark inserted into packets
      </port>
      <port name="MARK_NEXT" dir="out" width="1">
         Mark inserted (generate pulse when mark is inserted)
      </port>
      <port name="RX" dir="in/out" width="">
         Receive interface (write to Marker)
      </port>
      <port name="TX" dir="in/out" width="">
         Transmit interface (read from Marker)
      </port>
   </port_map>

</interface>


<!-- BODY ************************************************* -->
<body>

   <h1>Function description</h1>
   <p>
      There are 2 work modes. Common function is taking the "mark"
      (external signal with generic width) and placing it on POS_OFFSET
      position. After inserting the "mark" signal MARK_NEXT is set to 1 for one
      CLK cycle. It signalized that the "mark" was inserted and could
      be changed. POS_OFFSET is OFFSET rem (DATA_WIDTH/8). The delay
      (in clock cycles) between a SOP and the "mark" insertion is determined
      by FRAME_POS. FRAME_POS is equal to OFFSET / (DATA_WIDTH/8). All output
      signals are registered. So minimal delay is 1 clock cycle if all
      RDY signals is set to ready.
   </p>

   <h1>ReWRITE mode</h1>
   <p>
      This is a simple architecture, RX_DATA on positions from POS_OFFSET*8 to
      (POS_OFFSET+SIZE)*8-1 are rewritten. The Mark must be inserted in one
      clock cycle. This bring one restriction: POS_OFFSET+SIZE must be less or
      equal than DATA_WIDTH/8.
   </p>
   <p>
      Set generic called INSERT to false.
   </p>

   <h2>Scheme</h2>
   <p>
      <obr src="./fig/marker_rewr.fig">Marker (ReWrite) structure</obr>
   </p>

  <h2>Frequency and Resources usage</h2>
   <p>
      Measured for these generic settings: OFFSET = 4, SIZE = 1. No BRAMs are used.
   </p>
	<p>
      <tab sloupce="ccc">
         <tr>
				<th>Generic settings</th>
				<th>Slices (% of C6X slices)</th>
				<th>Max.frequency by Precision</th>
			</tr>
			<tr>
				<th>DATA_WIDTH = 16b</th>
				<td>21(0.1%)</td>
				<td>272 MHz</td>
			</tr>
			<tr>
				<th>DATA_WIDTH = 32b</th>
				<td>24(0.1%)</td>
				<td>272 MHz</td>
			</tr>
			<tr>
				<th>DATA_WIDTH = 64b</th>
				<td>41(0.1%)</td>
				<td>272 MHz</td>
			</tr>
			<tr>
				<th>DATA_WIDTH = 128b</th>
				<td>73(0.1%)</td>
				<td>314 MHz</td>
			</tr>
		<nazev>Chip utilization and maximal frequency</nazev>
		</tab>
  </p>


   <h1>INSERT mode</h1>
   <p>
      Data coming before POS_OFFSET (OFFSET rem (DATA_WIDTH/8)) are directly
      copied from RX to TX interface with one clock cycle delay. "Mark" is
      inserted into the FL frame on POS_OFFSET position. The "mark" could
      at maximum the same size as DATA_WIDTH. Data coming after the "mark" are
      shifted until EOP signal comes. When EOP appears and RX_REM + SIZE is less
      or equal to REM_MAX_VAL, shifted data are added to RX_DATA and TX_REM is
      set to RX_REM + SIZE. Otherwise, RX is halted and data are sent in this
      clock cycle.
   </p>
   <p>
      Set generic called INSERT to true.
   </p>

   <h2>Schemes</h2>
   <p>
      <obr src="./fig/marker.fig">Marker (insert) structure</obr>
      <obr src="./fig/marker_cu.fig">Marker (insert) control unit</obr>
      <obr src="./fig/marker_cu_fsm.fig" mag="0.4">Marker (insert) control unit FSM</obr>
   </p>

   <h2>Frequency and Resources usage</h2>
   <p>
      Measured for these generic settings: OFFSET = 4, SIZE = 1.
   </p>
	<p>
      <tab sloupce="ccc">
         <tr>
				<th>Generic settings</th>
				<th>Slices (% of C6X slices)</th>
				<th>Max.frequency by Precision</th>
			</tr>
			<tr>
				<th>DATA_WIDTH = 16b</th>
				<td>38(0.1%)</td>
				<td>204 MHz</td>
			</tr>
			<tr>
				<th>DATA_WIDTH = 32b</th>
				<td>48(0.1%)</td>
				<td>217 MHz</td>
			</tr>
			<tr>
				<th>DATA_WIDTH = 64b</th>
				<td>66(0.1%)</td>
				<td>215 MHz</td>
			</tr>
			<tr>
				<th>DATA_WIDTH = 128b</th>
				<td>96(0.1%)</td>
				<td>187 MHz</td>
			</tr>
		<nazev>Chip utilization and maximal frequency</nazev>
		</tab>
  </p>


   <h1>Used components</h1>
   <p>In both architectures is used
      <ref_comp ref="fl_decoder" tag_id="HEAD">FL Decoder</ref_comp>
   </p>

</body>

</source>
