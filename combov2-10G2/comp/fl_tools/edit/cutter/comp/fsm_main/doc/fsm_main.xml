<?xml version="1.0" encoding="iso-8859-2"?>
<source>
   <component>FrameLink Cutter: FSM Main</component>

   <authors>
      <author login="xpriby12">Bronislav Pribyl</author>
   </authors>

   <features>
      <item>Controls Cut data module.</item>
      <item>Controls Reorder module.</item>
      <item>Generates TX control signals (buggy).</item>
   </features>
   
   <!-- Bugs -->
   <bugs>
      <item>All generated TX signals are buggy.</item>
   </bugs>
   
   <!-- What have to be done -->
   <todo>
      <item>Test component in HW.</item>
   </todo>


   <description>
			FSM Main is crucial part of FL Cutter. It's states reflect the phase of data extraction
			and it controls Cut data module. It also controls Reorder module and generates
			TX control signals. This components is controled via RX control signals,
			parts and words counters and FSM Transmit.
   </description>
   
   <interface>
   		<generic_map>
   		
         <generic name="DATA_WIDTH" type="integer" default="32">
		        Data width of FrameLink frames.
         </generic>
         
		     <generic name="DATA_BYTES" type="integer" default="4">
		        Width of data bus in bytes.
         </generic>
         
         <generic name="PART" type="integer" default="0">
		        Number of frame part processed to extraction (0 = first frame part).
         </generic>
         
         <generic name="MAX_PARTS" type="integer" default="4">
		        Maximal number of frameparts. Needed for some interface signal width specification.
         </generic>
         
         <generic name="MAX_PART_SIZE" type="integer" default="512">
		        Maximal size of framepart in bytes. Needed for some interface signal width specification.
         </generic>
         
         <generic name="START_WORD" type="integer" default="0">
		        Serial number of word containing first byte of data to extract.
         </generic>
         
         <generic name="END_WORD" type="integer" default="0">
		        Serial number of word containing last byte of data to extract.
         </generic>
         
         <generic name="START_BYTE" type="integer" default="0">
		        Serial number of first byte in word nr. START_WORD which has to be extracted.
         </generic>
         
         <generic name="END_BYTE" type="integer" default="0">
		        Serial number of last byte in word nr. END_WORD which has to be extracted.
         </generic>
         
         <generic name="RX_WAIT_NEED" type="boolean" default="false">
		        Flag telling that 1 dummy clock cycle is needed on RX port to transmit all data through TX port correctly.
		        Generation of TX signals depends on this generic.
         </generic>
         
      </generic_map>
      
      <port_map>
                
         <port name="RESET" dir="in" width="1">
            Asynchronous reset.
         </port>
                
         <port name="CLK" dir="in" width="1">
            Clock.
         </port>
         
         
         <port name="TRANSMIT_PROGRESS" dir="in" width="1">
            Indicates transmit on RX port in progress. Generated by FSM transmit.
         </port>
         
         <port name="PART_NUM" dir="in" width="log2(MAX_PARTS)">
            Serial number of currently processed framepart.
         </port>
         
         <port name="WORD_NUM" dir="in" width="log2(MAX_PART_SIZE / DATA_BYTES)">
            Serial number of currently processed word in the framepart.
         </port>
         
         
         <port name="I_RX_EOP" dir="in" width="1">
            RX_EOP signal with positive (inverted) logic.
         </port>
         
         
         <port name="REG_RX_SOF" dir="in" width="1">
            Registered RX_SOF signal with positive (inverted) logic.
         </port>
         
         <port name="REG_RX_SOP" dir="in" width="1">
            Registered RX_SOP signal with positive (inverted) logic.
         </port>
         
         <port name="REG_RX_EOP" dir="in" width="1">
            Registered RX_EOP signal with positive (inverted) logic.
         </port>
         
         <port name="REG_RX_EOF" dir="in" width="1">
            Registered RX_EOF signal with positive (inverted) logic.
         </port>
         
         <port name="REG_RX_SRC_RDY" dir="in" width="1">
            Registered RX_SRC_RDY signal with positive (inverted) logic.
         </port>
         
         <port name="REG_RX_REM" dir="in" width="log2(DATA_WIDTH/8)">
            Registered RX_REM signal.
         </port>
         
         <port name="REG2_RX_EOP" dir="in" width="1">
            2x registered RX_EOP signal with positive (inverted) logic.
         </port>
         
         <port name="REG2_RX_SOP_LV" dir="in" width="1">
            2x registered RX_SOP "last valid" (sampled only if transmission was in progress).
         </port>
         
         
         <port name="RX_READY" dir="out" width="1">
            Cutter is ready to receive new data; otherwise RX wait cycle is required.
         </port>
         
         <port name="CUT_PROGRESS" dir="out" width="1">
            Extraction of predefined bytes is in progress.
         </port>
         
         <port name="CUT_EXTRACTED" dir="out" width="1">
            Extraction of predefined bytes done.
         </port>
         
         <port name="SEL_REORDER" dir="out" width="1">
            Controls reorder module. Determines whether to choose original or reordered data on the output.
         </port>
         
         <port name="SEL_REORDER_END" dir="out" width="1">
            Controls reorder module. Determines which version of reordered data to choose on the output.
         </port>
         
         <port name="CNT_AUX_EN" dir="out" width="1">
            Controls reorder module. Enables cnt_aux (auxiliary counter).
         </port>
         
         <port name="SEL_AUX0_EN" dir="out" width="t_aux_en">
            Controls reorder module. Determines which vector of enable signals to use for auxiliary register 0.
         </port>
         
         <port name="SEL_AUX1_EN" dir="out" width="t_aux_en">
            Controls reorder module. Determines which vector of enable signals to use for auxiliary register 1.
         </port>
         
         <port name="CNT_OUTPUT_EN" dir="out" width="1">
            Controls reorder module. Enables cnt_output (output counter).
         </port>
         
         <port name="I_TX_DATA_EN" dir="out" width="1">
            Controls reorder module. Enables reg_output_data (output register).
         </port>
         
         
         <port name="GENERATED_TX_SOF" dir="out" width="1">
            Generated TX_SOF signal in positive logic.
         </port>
         
         <port name="GENERATED_TX_SOP" dir="out" width="1">
            Generated TX_SOP signal in positive logic.
         </port>
         
         <port name="GENERATED_TX_EOP" dir="out" width="1">
            Generated TX_EOP signal in positive logic.
         </port>
         
         <port name="GENERATED_TX_EOF" dir="out" width="1">
            Generated TX_EOF signal in positive logic.
         </port>
         
         <port name="GENERATED_TX_SRC_RDY" dir="out" width="1">
            Generated TX_SRC_RDY signal in positive logic.
         </port>
         
         <port name="GENERATED_TX_REM" dir="out" width="log2(DATA_WIDTH/8)">
            Generated TX_REM signal.
         </port>
          
       </port_map>
    </interface>
       
<body>
	<h1>Schemes</h1>
   <p>
      <obr src="./fig/fsm_main.fig" mag="1.0">FSM Main</obr>
   </p>
</body>

</source>
