<?xml version="1.0" encoding="iso-8859-1"?>
<source>
   <component>Packet Releasing FIFO</component>

   <authors>
      <author login="jenda">Jan Koritak</author>
   </authors>

   <features>
	   <item>Framelink in/out interface</item>
	   <item>Packet releasing</item>
   </features>
   
   <!-- Bugs -->
   <bugs>
   </bugs>
   
   <!-- What have to be done -->
   <todo>
   </todo>


   <description>
	   Buffers the Framelink transfer. When ammount of stored data reaches buffer
	   capacity, the unfinished packet is released from the buffer and all the
	   incoming data are discarded until the unfinished packet ends.
   </description>
   
   <interface>
	  <generic_map>
		 <generic name="ITEMS" type="integer" default="16">
			   Maximum items the FIFO can contain 
         </generic>
         
         <generic name="DATA_WIDTH" type="integer" default="32">
			   Framelink data width
		 </generic>
	  </generic_map>
      <port_map>
                
         <port name="CLK" dir="in" width="1">
            Clock
         </port>
           
         <port name="RESET" dir="in" width="1">
            Reset
         </port> 

		 <divider>FrameLink interfaces</divider>
		 <port name="RX"       dir="inout" width="">
			Recieve interface (write to FIFO)
		 </port>
			
		 <port name="TX"       dir="inout" width="">
			Transmit interface (read from FIFO)
		 </port>
       </port_map>
       </interface>  

   
   <body>

      
    <!-- Here is description in standard Satrapa format-->
    <h1>PRFIFO component</h1>
	<p>
		Data from input flow are stored into block fifo as well as compressed flow status signal
		FL_JUICE obtained from the COMPRESS component and the REM signal. FrameLink packets are marked as blocks.
	</p>
	<p>
		As the fifo component gets full, and the incoming packet can not bet
		fully stored, it is discarded by
		setting the WR_DISCARD signal, which releases the unfinished block from
		the fifo and keep discarding input data, until receiving end of
		packet(end of block).
	</p>
	<p>
		When there is one or more finished blocks stored in the fifo, and the
		device attached at the output of this component is ready to receive data,
		the block is read from fifo and written to the output. The flow status signals are reconstructed using the DECOMPRESS
		component and the FL_JUICE signal loaded from the fifo. 
	
	</p>

	<p>
	Subcomponents:
	
	<ul>
		<li>
			<ref_comp ref="fifo_sync_block" tag_id="head">
				fifo_sync_block
			</ref_comp>
		</li>
	</ul>
	</p>
	
	<h1>Frequency and Resources usage</h1>
	<p>

        <!--Resources usage and max. frequency by XST-->
	
		<tab sloupce="cccc">
			<tr>
				<th>Generic settings</th>
				<th>Slices (% of C6X slices)</th>
				<th>BlockRams (+ % of C6X BRAMs)</th>
				<th>Maximal frequency</th>
			</tr>
			<tr>
				<th>
					items = 16 <br />
					data_width = 32 <br />
				</th> 
				<td>135 (0%)</td>
				<td>0 (0 %)</td>
				<td>117 Mhz</td>
			</tr>
			<tr>
				<th>
					items = 64 <br />
					data_width = 32 <br />
				</th> 
				<td>460 (1%)</td>
				<td>0 (0 %)</td>
				<td>104 Mhz</td>
			</tr>
		<nazev>Chip utilization, synthesized in XST for Virtex-II Pro</nazev>
		</tab> 
	

	
  </p> 

	</body>  


</source>
