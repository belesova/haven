<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->


<!-- Component name -->
<component>EPI2MI Converter</component>


<!-- Authors -->
<authors>
       <author login="washek">Vaclav Bartos</author>
       <author login="tomalek">Tomas Malek</author>
</authors>


<!-- Features -->
<features>
   <item>Generic data width</item>
   <item>Generic address width</item>
</features>


<!-- Bugs 
<bugs>
</bugs>
-->

<!-- Things to do
<todo>
</todo>
-->

<!-- Short Block description -->
<description>

	<!-- THE MOST IMPORTANT PART!!! There should be about 8 rows which
	     fully describe the component and its main functions -->
   
   <p>Component that converts read and write interface of IB Enpoint to 
   MI (Memory Interface). These interfaces have the same data and address
   width.</p>
   
   <p>Endpoint, wich is this converter connected to, must have enabled strict
   transaction order and set continual read type.</p>
   
</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>

	<!-- Generic description -->
	<generic_map>
		
		<generic name="DATA_WIDTH" type="integer" default="64">
			Number of data bits
		</generic>
		<generic name="ADDR_WIDTH" type="integer" default="32">
			Number of adress bits
		</generic>
		
	</generic_map>

	<!-- Port description -->
	<port_map>

		<divider>Common signals</divider>		
		<port  name="CLK" dir="in" width="1">
			Global FPGA clock
		</port>
		<port  name="RESET" dir="in" width="1">
			Global reset
		</port>

		<divider>MI interface</divider> 		
		<port name="MI_DWR" dir="out" width="DATA_WIDTH">
		   Data to write
		</port>
		<port name="MI_ADDR" dir="out" width="ADDR_WIDTH">
		   Address
		</port>
		<port name="MI_RD" dir="out" width="1">
		   Read request
		</port>
		<port name="MI_WR" dir="out" width="1">
		   Write request
		</port>
		<port name="MI_ARDY" dir="in" width="1">
		   Address ready (accepted)
		</port>
		<port name="MI_BE" dir="out" width="DATA_WIDTH/8">
		   Byte enable
		</port>
		<port name="MI_DRD" dir="in" width="DATA_WIDTH">
		   Read data
		</port>
		<port name="MI_DRDY" dir="in" width="1">
		   Read data ready
		</port>
		
		<divider>Endpoint write interface</divider> 		
		<port name="WR_REQ" dir="in" width="1">
		   Write request
		</port>
		<port name="WR_RDY" dir="out" width="1">
		   Ready signal
		</port>
		<port name="WR_DATA" dir="in" width="DATA_WIDTH">
		   Data to write
		</port>
		<port name="WR_ADDR" dir="in" width="ADDR_WIDTH">
		   Adress to write to
		</port>
		<port name="WR_BE" dir="in" width="DATA_WIDTH/8">
		   Byte enable
		</port>
		<port name="WR_LENGTH" dir="in" width="12">
		   (Not used)
		</port>
		<port name="WR_SOF" dir="in" width="1">
		   (Not used)
		</port>
		<port name="WR_EOF" dir="in" width="1">
		   (Not used)
		</port>
		
		<divider>Endpoint read interface</divider> 		
		<port name="RD_REQ" dir="in" width="1">
		   Read request
		</port>
		<port name="RD_ARDY_ACCEPT" dir="out" width="1">
		   Address accepted
		</port>
		<port name="RD_ADDR" dir="in" width="ADDR_WIDTH">
		   Address to read from
		</port>
		<port name="RD_BE" dir="in" width="DATA_WIDTH/8">
		   Byte enable
		</port>
		<port name="RD_LENGTH" dir="in" width="12">
		   (Not used)
		</port>
		<port name="RD_SOF" dir="in" width="1">
		   (Not used)
		</port>
		<port name="RD_EOF" dir="in" width="1">
		   (Not used)
		</port>
		<port name="RD_DATA" dir="out" width="DATA_WIDTH">
		   Read data
		</port>
		<port name="RD_SRC_RDY" dir="out" width="1">
		   Source ready signal
		</port>
		<port name="RD_DST_RDY" dir="in" width="1">
		   Destination ready signal
		</port>
		
	</port_map>

</interface>


<!-- HW BODY SECTION **************************************************** -->
<!-- information for HW designers, structure should be as follow          -->
<body>

<h1>Scheme</h1>

<p>
   <obr src="./fig/epi2mi_converter.fig">Scheme of EPI2MI Converter</obr>
</p>

</body>

</source>

