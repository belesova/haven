<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->


<!-- Component name -->
<component>REP_2PORT_TOP</component>


<!-- Authors -->
<authors>
       <author login="kajan">Michal Kajan</author>
</authors>


<!-- Features ?????????????? -->
<features>
   <item>
      Enable register, under- and overflow counter for each port is
      accessible from software using MI32 interface.
   </item>
</features>


<!-- Bugs -->
<bugs>
</bugs>


<!-- Things to do

<todo>
    <item>Test the component</item>
</todo>

-->

<!-- Short Block description -->
<description>

	<!-- THE MOST IMPORTANT PART!!! There should be about 8 rows which
   fully describe the component and its main functions -->
   This component encapsulates <ref_comp ref="rep_2port_cover">rep_2port_cover component</ref_comp>
   and contains enable registers for enabling functionality of repeater on both
   ports and under- and overflow counters whose counting is controlled
   by outputs of repeater.
   <p>
      There are 2 groups of these components for
      both ports. Each group is made by one enable register, one under-
      and overflow counter (one group for each port).
      Registers and counters are accessible using MI32 interface. Address
      decoder is used for addressing components in each group. Each address
      decoder is connected to MI32_ASYNC component. When reading, output
      is selected using multiplexers. Registers and counters are reseted
      by signal RESET_IBUF_IFC. Each group is clocked from different
      clock generated by XGMII Receivers.
   </p>
   <p>
      Primary function of repater is to forward received data from
      input ports to output ports. Data received from input port 0 is
      forwarded to output port 1 and data received from input port 1 is
      forwarded to output port 0. Forwarding is controlled by value
      of 2 enable registers. <b>Each enable register enables or disables
      forwarding data from given input port.</b> Function of repeater is
      displayed in figure.
      <obr src="./fig/repeater_function.fig" mag="0.7">Function of repeater</obr>
   </p>   

</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>


	<!-- Port description -->
	<port_map>

		<divider>Common signals</divider>		
		<port  name="ECLK" dir="in" width="1">
			Global FPGA clock
		</port>
		<port  name="RESET_GLOBAL" dir="in" width="1">
			Global reset (from toplevel component)
      </port>
		<port  name="RESET_IBUF" dir="out" width="1">
         This reset is generated until locking signal of clock signals
         is generated from DCM clock management component and both
         XGMII receivers.
		</port>


        <divider>
            XGMII Receiver A input
        </divider>
        <port name="RXCLKA" dir="in" width="1">
            XGMII receiver A clock
        </port>
        <port name="RXDA" dir="in" width="32">
            XGMII receiver A data
        </port>
        <port name="RXCA" dir="in" width="4">
            XGMII receiver A data delimiter
        </port>


        <divider>
            XGMII Receiver B input
        </divider>
        <port name="RXCLKB" dir="in" width="1">
            XGMII receiver B clock
        </port>
        <port name="RXDB" dir="in" width="32">
            XGMII receiver B data
        </port>
        <port name="RXCB" dir="in" width="4">
            XGMII receiver B data delimiter
        </port>


        <divider>
            XGMII Transmitter A output
        </divider>
        <port name="TXCLKA" dir="out" width="1">
            XGMII transmitter A clock
        </port>
        <port name="TXDA" dir="out" width="32">
            XGMII transmitter A data
        </port>
        <port name="TXCA" dir="out" width="4">
            XGMII transmitter A data delimiter
        </port>


        <divider>
            XGMII Transmitter B output
        </divider>
        <port name="TXCLKB" dir="out" width="1">
            XGMII transmitter B clock
        </port>
        <port name="TXDB" dir="out" width="32">
            XGMII transmitter B data
        </port>
        <port name="TXCB" dir="out" width="4">
            XGMII transmitter B data delimiter
        </port>


        <divider>
            XGMII Receiver A output
        </divider>
        <port name="IBUF0_CLK" dir="out" width="1">
           XGMII receiver A internal clock used to clock
           all receiver logic
        </port>
        <port name="IBUF0_DATA" dir="out" width="64">
            XGMII receiver A data, single data rate
        </port>
        <port name="IBUF0_CMD" dir="out" width="8">
           XGMII receiver A data delimiter, single
           data rate
        </port>


        <divider>
            XGMII Receiver B output
        </divider>
        <port name="IBUF1_CLK" dir="out" width="1">
           XGMII receiver B internal clock used to clock
           all receiver logic
        </port>
        <port name="IBUF1_DATA" dir="out" width="64">
            XGMII receiver B data, single data rate
        </port>
        <port name="IBUF1_CMD" dir="out" width="8">
           XGMII receiver B data delimiter, single
           data rate
        </port>


        <divider> 
           MI32 interface (for register enabling port 0, under-
           and overflow counters for port 0)
        </divider>
        <port name="MI32_0_DWR" dir="in" width="32">
           Input data
        </port>
        <port name="MI32_0_ADDR" dir="in" width="32">
           Address
        </port>
        <port name="MI32_0_RD" dir="in" width="1">
           Read request
        </port>
        <port name="MI32_0_WR" dir="in" width="1">
           Write request
        </port>
        <port name="MI32_0_BE" dir="in" width="4">
           Byte enable
        </port>
        <port name="MI32_0_DRD" dir="out" width="32">
           Output data
        </port>
        <port name="MI32_0_ARDY" dir="out" width="1">
           Address ready
        </port>
        <port name="MI32_0_DRDY" dir="out" width="1">
           Data ready
        </port>

        <divider> 
           MI32 interface (for register enabling port 1, under-
           and overflow counters for port 1)
        </divider>
        <port name="MI32_1_DWR" dir="in" width="32">
           Input data
        </port>
        <port name="MI32_1_ADDR" dir="in" width="32">
           Address
        </port>
        <port name="MI32_1_RD" dir="in" width="1">
           Read request
        </port>
        <port name="MI32_1_WR" dir="in" width="1">
           Write request
        </port>
        <port name="MI32_1_BE" dir="in" width="4">
           Byte enable
        </port>
        <port name="MI32_1_DRD" dir="out" width="32">
           Output data
        </port>
        <port name="MI32_1_ARDY" dir="out" width="1">
           Address ready
        </port>
        <port name="MI32_1_DRDY" dir="out" width="1">
           Data ready
        </port>

        <divider>
           MI32_ASYNC master clock
        </divider>
        <port name="MI32_CLK" dir="in" width="1">
           Common clock signal for both used MI32 Async components
           for clocking their master interfaces
        </port>

	</port_map>

</interface>

<!-- Address space section ********************************************** -->
<addr_space id="hfe_cover" name="REP_2PORT_TOP address space" main="yes" size="">

   <!-- enable register for port X -->
   <reg name="Enable register" id="enable_reg_x" offset="0x0" access="RW" words="">
      <bit_vect bits="1">
      <description_above>
         <p>
            Enables forwarding for port X (0 or 1). It is set to 1 by default.
         </p>
      </description_above>
      <format>
         <bit from="0" to="0" name="enable" access="RW">Forwarding enable for given port</bit>
      </format>
      </bit_vect>
   </reg>


   <!-- overflow counter for  port X -->
   <reg name="Overflow counter" id="overflow_cnt_x" offset="0x4" access="R" words="">
      <bit_vect bits="10">
      <description_above>
         <p>
            FIFO overflow counter for port X. Counting is enabled by repeater.
         </p>
      </description_above>
      <format>
         <bit from="0" to="9" name="overflows" access="R">Number of overflows in repeater's FIFO.</bit>
      </format>
      </bit_vect>
   </reg>

   <!-- overflow counter for  port X -->
   <reg name="Underflow counter" id="underflow_cnt_x" offset="0x8" access="R" words="">
      <bit_vect bits="10">
      <description_above>
         <p>
            FIFO underflow counter for port X. Counting is enabled by repeater.
         </p>
      </description_above>
      <format>
         <bit from="0" to="9" name="underflows" access="R">Number of underflows in repeater's FIFO.</bit>
      </format>
      </bit_vect>
   </reg>
</addr_space>

   <sw_body>
      <h1>Enable registers and counters</h1>
      <p>
         There are 2 separate groups of under- and overflow counter and enable register for
         each port. These 2 groups are located at different base addresses but offset
         addresses are shared among them (e.g. offset address for enable register for port 0
         is the same as for port 1 and so on).
      </p>
      <p>
         Enable registers are set to 1 by default which means forwarding for both ports
         is enabled. These components are accessible through MI32 interface.
         Write operation is possible only for enable registers. Writing to enable register
         can be done writing some value with the least significant bit set to desired value
         to the correct address. Values of other bits are ignored in such write operation.
         After the read transaction request to some of the enable registers data output
         is 32-bit value where upper 31 bits are set to zero and least signifficant bit
         carries value of the enable register.
      </p>
      <p>
         Both types of counters are accessible only for read operations. Width of each
         counter is 10 bits. Output to MI32 interface is 32 bits, therefore 
         upper 22 bits are set to 0 and lowest 10 bits carry number of under- or
         overflows depending on type of counter.
      </p>
   </sw_body>



<!-- HW BODY SECTION **************************************************** -->
<!-- information for HW designers, structure should be as follow          -->
<body>

   <h1>Component description</h1>
   <p>
      This component contains <ref_comp ref="rep_2port_cover">rep_2port_cover
      component</ref_comp>, enable registers for both ports, FIFO under-
      and overflow counters. Enable signals for these counters are set by repeater.
   </p>
   <p>
      Enable registers and counters are accessible from SW using MI32 interface.
      Enable registers are accessible for read and write operations, counters
      only for read operations. MI32 address decoder is used to address
      these components. These components are separated to 2 different groups
      (each group for one port) and are connected to two different MI32
      interfaces. Address decoder is connected to the MI32_ASYNC component.
      Selecting of output is done using output multiplexers.
      Enable registers and counters are clocked by XGMII receivers output clock
      and reset is done using lock signal of clock signals from TX DCM clock
      management and XGMII Receivers located in rep_2port_cover component.
   </p>
   <p>
      MI32_Async component has master and slave MI32 interface. Master interface
      is clocked with internal bus clock and slave interface is clocked by clock
      signal generated by XGMII Receiver.
   </p>




<h1>Schemes</h1>
	
	<p>
		The block scheme of the component is in the following figure.
      <obr src="./fig/rep_2port_top.fig">REP_2PORT_TOP block scheme</obr>
	</p>
   
</body>
</source>
