<?xml version="1.0" encoding="ISO-8859-1"?>

<source>
<!-- Page name -->
<component>Management data input/output - MDIO</component>

<!-- Symbol picture
<symbol>hfe_symbol.fig</symbol>  -->

<!-- Authors worked on -->
<authors>
       <author login="michalj">Michal Janousek</author>
</authors>

<!-- Current block status -->
<status>
    Simulation done. Not tested in HW..
</status>

<!-- Features - describe functionality -->
<features>
    <!-- tem new="yes" >Processing units added.</item>
    <item new="yes" >Full SSRAM access.</item>
    <item>TCAM matching and full SW access.</item>
    -->
</features>

<!-- Bugs - describe functionality -->
<bugs>
</bugs>

<!-- What have to be done -->
<todo>
</todo>


<!-- Short Block description -->
<description>
Management data input/output (MDIO) component is used for comunicaton through serial management interface of PHY devices. The serial management interface
allows for the configuration and control of multiple PHY devices, gathering of status, error information, and determination of the type and capabilities of
the attached PHY(s).

</description>


<!-- Component interface description -->
<interface>

      <!-- Port description -->
      <port  name="CLK" dir="in" width="1">
             Clock at maximum rate 2.5 MHz
      </port>

      <port  name="RESET" dir="in" width="1">
            Global reset
      </port>

      <port  name="PHYDATA" dir="inout" width="1">
            Serial connection to phyter
      </port>

      <port  name="LBCLK" dir="in" width="1">
             Local bus clock signal
      </port>

      <port  name="LBFRAME" dir="in" width="1">
            Indicates an transaction is in progress
      </port>

      <port  name="LBAS" dir="in" width="1">
            Indicates valid address on LBAD
      </port>

      <port  name="LBRW" dir="in" width="1">
            Direction, 0=read, 1=write
      </port>

      <port  name="LBLAST" dir="in" width="1">
           Indicates last data word is transfered
      </port>

      <port  name="LBAD" dir="in" width="16">
           Address/data multiplexed bus
      </port>

      <port  name="LBHOLDA" dir="out" width="1">
          RESERVED
      </port>

      <port  name="LBRDY" dir="out" width="1">
         Target data ready - the target is able to process data on LBAD.
      </port>
</interface>


<operations>

    <init>
<!--    <it> Write to PHY register  </it>
        <it> Read from PHY register  </it>
        <it> Check MDIO status </it>
-->
    </init>

 <!--
    <op name="SRAM read/write operation" id="LUP_OP_SRAM_ACCESS">
        <p>

            SRAM memory is used to store intructions for Processing Units.
            The read and write operation is implemented and consists of
            three steps.
        </p>

        <p>
           <ul>
            <li>

                At first, the address and data needs to be specified.
                Address is stored into the REG_SRAM_ADDRESS register and
                data into the REG_SRAM_DATA. If read operation is
                performed, the data don't need to be specified.
            </li>

            <li>
                After that read or write opearation can be started. The
                operation starts when command (SRAM_CMD_READ or
                SRAM_CMD_WRIITE) is written onto the COMMAND register.
            </li>

            <li>
                For read operation, the result is stored in SRAM_DATA_OUT
                register.
            </li>
           </ul>
         </p>
    </op>    -->

</operations>

<!-- ************************** Constants ************************** -->
<constants>

<!--
    <const name="LUP start command" id="LUP_CMD_START"
        value="0x01">
        When this constant is writen into the Control command register, the
        LUP processing is started.
    </const>

    <const name="LUP stop command" id="LUP_CMD_STOP"
        value="0x01">
        When this constant is writen into the Control command register, the
        LUP processing is stopeed.
    </const>




    <const name="TCAM Single Read Command" id="LUP_CMD_SINGLE_READ"
        value="0x00">
        When this constant is writen into the TCAM command register the single
        read operation is started.
    </const>

    <const name="TCAM Single Write Command" id="LUP_CMD_SINGLE_WRITE"
        value="0x01">
        When this constant is writen into the TCAM command register the single
        write operation is started.
    </const>




    <const name="SSRAM Read Command" id="LUP_CMD_SINGLE_READ"
        value="0x01">
        When this constant is writen into the SSRAM command register the
        read operation is started.
    </const>

    <const name="SSRAM Write Command" id="LUP_CMD_SINGLE_WRITE"
        value="0x00">
        When this constant is writen into the SSRAM command register the
        write operation is started.
    </const>

-->
</constants>

<body>

    <!-- Here is description in standard Satrapa format-->

<!-- **** ZACATEK BODY
    <h1>Look up processor blocks</h1>

    <p>
        LUP consists of several blocks. Unified header processing starts in
        CAM block. It's connected to all four input interfaces. After
        matching in CAM memory the remaining part of unified header is
        processed in processing unit. There is one processing unit for each
        input interface. Founded record is sent to the output interface
        together with packet identification.
    </p>
    <p>
        <obr src="./fig/search_engine.fig">LUP block structure</obr>
    </p>

    <h2>CAM block</h2>

    <p>
    CAM block controls input buffers and fills CAM memory. Because of
    maximal usage of CAM memory, parts of unified header are loaded
    into the CAM buffers simultaneously with matching of previous UH.
    The result of matching is given to the processing unit as a starting
    address of PU program. Cam block also generates control signals for
    processing units and time slots for accessing to the input buffers.
    </p>
    <p>
        <obr src="./fig/cam_blk_struct.fig">Cam block structure</obr>
    </p>

    <p>
    The CAM block consists of Control Unit, CAM Buffer and four instances
    of FIFO Block and SADDR Control Block. See previous figure. FIFO blocks
    control Unified header fifo (UHF) and asure access to UHF for CAM block
    and Proscessing units. Data from UHF are distributed to PU and CAM
    Buffer. CAM buffer contain memory which is used to prepare data for
    matching in a TCAM. When data are matched, the result is send to SADDR
    Block. The SADDR Block controls PU interface and it also contains FIFO
    memory for matched results. The FIFO has 16 items and it balances the
    time differences between CAM block and PU block processing.
    </p>


    <h2>Processing unit</h2>

    <p>
    Processing unit (PU) - is a simple processor optimized for compare
    instructions. It performs program stored in synchronous static RAM.
    The result of matching in CAM serves as a starting address of program.
    Program finishes with EXE instruciton, which sends record to output
    interface. There are four PUs and they share one static memory in time
    slots generated by CAM block. Time slots also serve for multiplexing of
    result to output interfaces.
    Processing of instructions is made in four steps: decode, mask, compare
    and ssram access. At first instruction is loaded into the instruction
    decoder, instruction is processed (compare instruction in mask block
    and compare unit, TAB instruction in next address block). New value of
    program counter is computed and next instruction is loaded from SSRAM.
    It continues untill EXE instruction is reached. Then record and packet
    identification are sent to output and new unified header is processed.
    </p>

    <p>
        For detailed description of PU phases see our CVS, file
    liberouter/vhdl_design/units/lup/comp/processing_unit/doc/instr_ph.txt
    </p>

    <p>
        <obr src="./fig/processing_unit.fig">Processing unit structure</obr>
    </p>

    <h3>Instructions set</h3>

    <p>
    <tab sloupce="ll">
        <tr><td>CMP</td><td> Compare register with constant </td></tr>
        <tr><td>LTH</td><td> Compare register with constant (less) </td></tr>
        <tr><td>LTE</td><td> Compare register with constant
                             (less or equal) </td></tr>
        <tr><td>GTH</td><td> Compare register with constant (greater) </td></tr>
        <tr><td>GTE</td><td> Compare register with constant
                             (greater or equal) </td></tr>
        <tr><td>BLT</td><td> Compare register with constant
                             (low byte of register less) </td></tr>
        <tr><td>BLE</td><td> Compare register with constant
                             (low byte of register less or equal) </td></tr>
        <tr><td>BGT</td><td> Compare register with constant
                             (low byte of register greater) </td></tr>
        <tr><td>BGE</td><td> Compare register with constant
                             (low byte of register greater or equal) </td></tr>
        <tr><td>TAB4</td><td> Compute new program counter value </td></tr>
        <tr><td>TAB8</td><td> Compute new program counter value </td></tr>
        <tr><td>EXE</td><td> Send record to replicator </td></tr>
        <nazev></nazev>
    </tab>
    </p>

    <p>
    For detailed description of PU instruction see our CVS, file
    liberouter/vhdl_design/units/lup/comp/processing_unit/doc/instr_set.txt
    </p>
*****KONEC BODY****-->
</body>

</source>
