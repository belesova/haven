<source>

<component>Buf</component>

<authors>
    <author login="solanka">Lukas Solanka</author>
    <author login="polcak_l">Libor Polcak</author>
</authors>

<features>
    <item>Discards frames with error</item>
    <item>Errors can be masked</item>
    <item>Optionaly transforms data to wider data sizes</item>
    <item>Stores frames into buffer</item>
		<item>Sends requests for headers/footers</item>
</features>

<!--
<bugs>
</bugs>
-->

<todo>
   <item>Look at the problems with synthesis in Precision</item>
   <item>HW tests</item>
</todo>

<description>
	This componet makes decision based on incoming statistic data if the frame
	should be discarded or not. Data and control data (headers and/or footers
	generated by external component) are stored in output FIFOs. Buf is also
	able to transform packet width up.
</description>

<interface>

	<!-- Generic description -->
	<generic_map>
		
		<generic name="DFIFO_SIZE" type="integer" default="1024">
			Number of items in Data FIFO (FL_WIDTH_TX + control signals wide).
			Must be 2^n, n>=2!
		</generic>
		<generic name="HFIFO_SIZE" type="integer" default="128">
			Number of items in header and footer FIFO
			(FL_WIDTH_TX + control signals wide)
		</generic>
		<generic name="HFIFO_MEMTYPE" type="mem_type" default="LUT">
       Type of the memory used in HFIFO
		</generic>
		<generic name="FL_WIDTH_TX" type="integer" default="64">
			FrameLink output width (at least 64)
		</generic>
		
	</generic_map>


	<!-- Port description -->
	<port_map>

		<divider>Common signals</divider>		
		<port  name="CLK" dir="in" width="1">
			IBUF internal clock
		</port>
		<port  name="RESET" dir="in" width="1">
			IBUF internal reset
		</port>


		<divider>Input</divider> 
		<port  name="RX_DATA" dir="in" width="64">
      Packet data
		</port>
		<port  name="RX_SOP" dir="in" width="1">
      Start of the packet, active in '1'
		</port>
		<port  name="RX_EOP" dir="in" width="1">
      End of the packet, active in '1'.
		</port>
		<port  name="RX_EOP_POS" dir="in" width="3">
      Position of the end of the packet, valid only if RX_EOP is set to '1'.
		</port>
		<port  name="RX_ERR" dir="in" width="1">
      Error inside the packet was detected, active in '1'.
		</port>

		<divider>Statistic</divider> 
		<port  name="STATS" dir="in" width="1">
			Statistic data from <ref_comp ref="xgmii_ibuf_check">Check</ref_comp>
		</port>
		<port  name="STATS_OUT" dir="out" width="1">
			Statistic data of the frame currently being processed. It is the one
			for which last CTRL_SEND was generated.
		</port>
		<port  name="XGMII_ERR_OUT" dir="out" width="1">
			XGMII error of the frame currently being processed. It is the one
			for which last CTRL_SEND was generated.
		</port>
		<port  name="STATS_OUT_VLD" dir="out" width="1">
			STATS_OUT and XGMII_ERR_OUT are valid. Note that this bit can be asserted
			without previous assertion of CTRL_SEND. In this case only the first data
			for the frame is valid and the later should be ignored.
		</port>


		<divider>Output</divider> 
		<port  name="FL_CLK" dir="in" width="1">
      FL clock
		</port>

		<divider>Payload</divider> 
		<port  name="TX_DATA" dir="out" width="FL_WIDTH_TX">
      Data
		</port>
		<port  name="TX_REM" dir="out" width="log2(FL_WIDTH_TX/8)">
      Position of the end of the part, valid only if TX_EOP_N is set to '0'.
		</port>
		<port  name="TX_SOP_N" dir="out" width="1">
      Start of the part, active in '0'
		</port>
		<port  name="TX_EOP_N" dir="out" width="1">
      End of the packet, active in '0'.
		</port>
		<port  name="TX_SRC_RDY_N" dir="out" width="1">
      Source is ready, active in '0'
		</port>
		<port  name="TX_DST_RDY_N" dir="in" width="1">
      Destination is ready, active in '0'
		</port>

		<divider>Packet headres/footers</divider> 
		<port  name="TX_HDATA" dir="out" width="FL_WIDTH_TX">
      Part data
		</port>
		<port  name="TX_HREM" dir="out" width="log2(FL_WIDTH_TX/8)">
      Position of the end of the part, valid only if TX_HEOP is set to '0'.
		</port>
		<port  name="TX_HSOP_N" dir="out" width="1">
      Start of the part, active in '0'
		</port>
		<port  name="TX_HEOP_N" dir="out" width="1">
      End of the packet, active in '0'.
		</port>
		<port  name="TX_HSRC_RDY_N" dir="out" width="1">
      Source is ready, active in '0'
		</port>
		<port  name="TX_HDST_RDY_N" dir="in" width="1">
      Destination is ready, active in '0'
		</port>


		<divider>MI_INT Interface</divider> 
		<port  name="MI2BUF" dir="in" width="1">
			Data provided by <ref_comp ref="xgmii_ibuf_mi_int">MI Int</ref_comp>
		</port>
		<port  name="BUF2MI" dir="out" width="1">
			Data provided to <ref_comp ref="xgmii_ibuf_mi_int">MI Int</ref_comp>
		</port>


		<divider>Control data generator interface</divider> 
        <port name="CTRL_DATA" dir="in" width="FL_WIDTH_TX">
            Control data
        </port>
        <port name="CTRL_REM" dir="in" width="log2(FL_WIDTH_TX/8)">
            Specifies the number of valid bytes in the last CTRL_DATA beat;
            valid only when CTRL_EOP is asserted
        </port>
        <port name="CTRL_SRC_RDY_N" dir="in" width="1">
            Asserted when the input signals from control data generator are
            valid
        </port>
        <port name="CTRL_SOP_N" dir="in" width="1">
            Signals the start of the incoming control data.
        </port>
        <port name="CTRL_EOP_N" dir="in" width="1">
            Signals the end of the incoming control data.
        </port>
        <port name="CTRL_DST_RDY_N" dir="out" width="1">
            Asserted when data from control data generator will be accepted
        </port>
        <port name="CTRL_REQ" dir="out" width="1">
            New frame is being received; prepare to generate new control data
        </port>
        <port name="CTRL_SEND" dir="out" width="1">
            Send control data
        </port>
        <port name="CTRL_RELEASE" dir="out" width="1">
            Discard control data
        </port>
        <port name="CTRL_RDY" dir="in" width="1">
            Control data generator is ready to receive new request
        </port>

			</port_map>

</interface>


<body>

	<h1>Buf information</h1>

	<h2>General info</h2>
	<p>
		This component provides the frame payload storage. The payload data are
	 	optionaly transformed from the 64-bit-width to the generic width (greather
		than 64-bits). Marked frames are discarded.
	</p>
	<p>
		<obr src="./fig/buf.fig">Buf architecture</obr>
		<obr src="./fig/data_transform.fig">Data Transform part</obr>
	</p>

	<h2>Discarding</h2>
	<p>
		The frame can be discarded due to any error-check fail or due to sampling.
		This data are provided by the
		<ref_comp ref="xgmii_ibuf_check">Check</ref_comp> component. The errors can
		be masked by the value provided by the
		<ref_comp ref="xgmii_ibuf_mi_int">MI Int</ref_comp> component. The value is
		stored in the Error Mask register.
	</p>
	<p>
		Following table summarize all features causing frame discarding. The column
		'Maskable' denotes if the this feature can be masked. The column
		'Status port' assigns the IBUF status port from the t_stats record defined
		in ibuf_pkg package.

        <tab sloupce="lcc">
            <tr>
                <th>Feature</th>
                <th>Maskable?</th>
                <th>Status port</th>
            </tr>
            <tr>
                <td>Frame too big for DFIFO buffer</td>
                <td>No</td>
                <td>N/A</td>
            </tr>
            <tr>
                <td>Frame Sampling</td>
                <td>No</td>
                <td>SAU_ERR</td>
            </tr>
            <tr>
                <td>XGMII error</td>
                <td>Yes</td>
								<td>N/A</td>
            </tr>
            <tr>
                <td>Frame CRC check failed</td>
                <td>Yes</td>
                <td>CRC_ERR</td>
            </tr>
            <tr>
                <td>MAC address check failed</td>
                <td>Yes</td>
                <td>MAC_ERR</td>
            </tr>
            <tr>
                <td>Frame length is lower than allowed</td>
                <td>Yes</td>
                <td>MINTU_ERR</td>
            </tr>
            <tr>
                <td>Frame length is greater than allowed</td>
                <td>Yes</td>
                <td>MTU_ERR</td>
            </tr>
            <nazev>Discarding features summarization</nazev>
        </tab>
	</p>

	<h2>Data Transform Part</h2>
	<p>
		Used protocol is transformed almost completly to FrameLink, but SRC_RDY
		and DST_RDY are not used and SOF and EOF is not created because it is the
		same as SOP and EOP. However, if the output data width is greater than
		64-bits these signal are generated for
		<ref_comp ref="fl_transformer">FrameLink Transformer</ref_comp>.
	</p>
	<p>
		Because of SRC_RDY can not be generated easily simple FSM is used.
		<obr src="./fig/buf_fl_src_rdy_fsm.fig">FSM to generate SRC_RDY_N signal</obr>
		Only two from these three states should be reached. Debug signals for
		FRAME_DISCARDED and BUFFER_OVERFLOW are available in the status register
		in the <ref_comp ref="xgmii_ibuf_mi_int">MI Int</ref_comp> component.
	</p>

	<h2>FSM</h2>
	<p>
		FSM is used to control discarding of frames because of statistics, output
		buffer overflow or when control data generator is not ready.
	</p>
	<p>
		<obr src="./fig/fsm.fig">Main FSM</obr>
	</p>

	<h2>Buffers</h2>
	<p>
		Each payload is extended by control data (header and/or footer) generated
		by external component, so the Buf component also provides
		the control header and footer storage.
	</p>
	<p>
		The Payload buffer size is set by DFIFO_SIZE generic and the control data
		buffer size is set by HFIFO_SIZE generic. If the frame is too big that it
		can't be stored, it will be discarded.
	</p>

	<h2>Counters</h2>
	<p>
		Buf component also provides information about number of total frames
		received, processed or discarded. It contains four frame counters: Total
		Received Frames Counter (TRFC), Correc Frames Counter (CFC), Discarded
		Frames Counter (DFC) and Frames Discarded due to Buffer Overflow Counter
		(BODFC).
	</p>


		<!--
	<p>
		Precision and XST!!
	</p>
	-->
</body>

</source>
