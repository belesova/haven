  <source>
    <component>
      32-bit CRC module processing 8 bits in parallel
    </component>

    <authors>
       <author login="bidlom">Michal Bidlo</author>
    </authors>

    <versions>
        <version id="1.7">
            <item>Fully functional CRC32 module before advanced optimization.</item>
        </version>
    </versions>

    <description>
      The module computes 32-bit CRC processing 8 bits in parallel during the
      calculation. The processed packets may have arbitrary length (computed in
      bytes). This approach to the CRC implementation allows us to optimize CRC
	  computation substantially.
    </description>

   <interface>

   <port_map>
     <port name="DI" dir="in" width="8">
      Data input.
     </port>

     <port name="DI_DV" dir="in" width="1">
	  Input data validity indicator.

      Indicates the validity of input data (DI). During computation with valid
	  data this input must be '1'. If DI_DV = '0' then the computation is
	  suspended (the CRC register holds its last valid value) until DI_DV is
	  '1'.
     </port>

     <port name="EOP" dir="in" width="1">
	  End of packet (last data byte) indicator.

      Indicates the last byte of packet. EOP must be changed to '1' simultaneously
	  with the last byte of packet at DI and must be holt at least one clock period.
     </port>

     <port name="RDY" dir="out" width="1">
	  Input data acceptance indicator.

      RDY is set to '1' if the CRC module is ready for processing of valid data.
	  If RDY equals '0' the input data is ignored - this happens during four
	  clock periods after processing the last byte of packet (finishing CRC
	  computation of the packet).
     </port>

     <port name="CRC" dir="out" width="32">
	  Resulting CRC value.

      Resulting CRC value. CRC is reversed over bytes and inverted.
     </port>

     <port name="DO_DV" dir="out" width="1">
	  CRC validity indicator.

      Indicates the validity of resulting CRC. DO_DV is set to '1' after
	  finishing the CRC computation of the current packet, else it is '0'
	  (during the CRC computation).
     </port>

     <port name="RESET" dir="in" width="1">
      Global reset port.
     </port>

     <port name="CLK" dir="in" width="1">
      Global clock port.
     </port>
   </port_map>

   </interface>

    <operations>
        <init>
            <it ref="reset">
             By setting RESET port to '1' for at least one clock period, the
			 system gets to initial state.
            </it>
        </init>
    </operations>

   <structure src="./fig/crc32_8b.fig">
        The CRC32 module processing 8 bits in parallel
   </structure>

   <body>
    <p>
     CRC32_8b module consists of four 8-bit registers for storing the value
	 during the computation and resulting CRC at the end of the computation.
	 Data enters the highest register in 8-bit blocks and continues successively
	 to the next registers at each clock period. The output of the lowest register
	 is interpreted as 8-bit address of 32-bit CRC table (combinational unit
	 inside the module) for calculating temporary CRC value of these 8 bits in parallel.
	 This temporary CRC value is XORed with the actual content of the registers.
     After all the bytes of the packet are processed, the content of the
	 registers is reversed over bytes and inverted to calculate the final CRC32
	 value of the entire packet.
	</p>
   </body>
</source>
