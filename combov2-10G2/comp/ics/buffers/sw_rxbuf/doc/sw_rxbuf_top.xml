<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->


<!-- Component name -->
<component>sw_rxbuf_top</component>


<!-- Authors -->
<authors>
       <author login="xvozen00">Jan Vozenilek</author>
</authors>


<!-- Features -->
<features>
	<item>Generic number of input FrameLink interfaces (of generic width).</item>
	<item>Generic Internal bus interface width.</item>
	<item>Control interface to new DMA Controllers.</item>
	<item>Alignes input data (FL frames) to output width (of IB).</item>
</features>


<!-- Bugs -->
<bugs>
	<item>No known bugs.</item>
</bugs>


<!-- Things to do -->
<todo>
    <item>Nothing.</item>
</todo>


<!-- Short Block description -->
<description>

	<!-- THE MOST IMPORTANT PART!!! There should be about 8 rows which
	     fully describe the component and its main functions -->

	The component receives data (in FrameLink protocol frames) on one or more
  interfaces. After receiving RX_EOF_N signal the component alignes data to
  output width (if the frame was of different width) by writing zeros to memory
  and sends RX_NEWLEN signal to DMA controller with number of received Bytes.
  The controller can than initiate data transfer via Internal bus (see info
  in HW section for address meaning). Data stay in memory until controller
  sends RX_RELLEN signal with number of Bytes to be released from block's memory.

</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>

	<!-- Generic description -->
	<generic_map>
		
		<generic name="DATA_WIDTH" type="integer" default="64">
			Output data width (to Internal bus).
		</generic>
		<generic name="BLOCK_SIZE" type="integer" default="512">
			Maximum number of items (of DATA_WIDTH) that can be stored for each block (input flow).
		</generic>
		<generic name="FLOWS" type="integer" default="2">
			Number of input FrameLink interfaces (each DATA_WIDTH/FLOWS wide) - can also be 1.
		</generic>
		<generic name="TOTAL_FLOW_SIZE" type="integer" default="16384">
			Total size (bytes) for one flow (interface).
		</generic>
		
	</generic_map>

	<!-- Port description -->
	<port_map>

		<divider>Common signals</divider>		
		<port  name="CLK" dir="in" width="1">
			Global FPGA clock.
		</port>
		<port  name="RESET" dir="in" width="1">
			Global synchronous reset.
		</port>

		<divider>Input interface (FrameLink)</divider> 		
		<port name="RX_DATA" dir="in" width="DATA_WIDTH">
			Input FrameLink data (DATA_WIDTH/FLOWS bits for each flow).
		</port>
		<port name="RX_SOP_N" dir="in" width="FLOWS">
			Input FrameLink signal - start of part (one bit for each flow).
		</port>
		<port name="RX_EOP_N" dir="in" width="FLOWS">
			Input FrameLink signal - end of part (one bit for each flow).
		</port>
		<port name="RX_SOF_N" dir="in" width="FLOWS">
			Input FrameLink signal - start of frame (one bit for each flow).
		</port>
		<port name="RX_EOF_N" dir="in" width="FLOWS">
			Input FrameLink signal - end of frame (one bit for each flow).
		</port>
		<port name="RX_REM" dir="in" width="log2((DATA_WIDTH/FLOWS)/8)*FLOWS">
			Input FrameLink signal - drem.
		</port>
		<port name="RX_SRC_RDY_N" dir="in" width="FLOWS">
			Input FrameLink signal - source ready (one bit for each flow).
		</port>
		<port name="RX_DST_RDY_N" dir="out" width="FLOWS">
			Output FrameLink signal - destination ready (one bit for each flow).
		</port>
		
		<divider>Output interface (Internal bus)</divider> 
		<port name="RD_ADDR" dir="in" width="32">
			Internal bus read address (see info for meaning).
		</port>
		<port name="RD_BE" dir="in" width="8">
			Internal bus byte enable - not used.
		</port>
		<port name="RD_REQ" dir="in" width="1">
			Internal bus read request.
		</port>
		<port name="RD_ARDY" dir="out" width="1">
			Internal bus address ready - set to (RD_DST_RDY and RD_REQ).
		</port>
		<port name="RD_DATA" dir="out" width="DATA_WIDTH">
			Internal bus output data.
		</port>
		<port name="RD_SRC_RDY" dir="out" width="1">
			Internal bus source ready - data valid signal.
		</port>
		<port name="RD_DST_RDY" dir="in" width="1">
			Internal bus destination ready - pipe enable for memory.
		</port>

		<divider>DMA ctrl interface</divider> 
		<port name="RX_NEWLEN" dir="out" width="FLOWS*16">
			Number of Bytes received on FrameLink interface (aligned) - 16 bits for each flow.
		</port>
		<port name="RX_NEWLEN_DV" dir="out" width="FLOWS">
			Valid signal for RX_NEWLEN - one bit for each flow.
		</port>
		<port name="RX_NEWLEN_RDY" dir="in" width="FLOWS">
			Ready signal from controller - one bit for each flow - always set to '1' - not used.
		</port>
		<port name="RX_RELLEN" dir="in" width="FLOWS*16">
			Number of Bytes read out on Internal bus interface (aligned) - 16 bits for each flow.
      Number of Bytes to be released in memory.
		</port>
		<port name="RX_RELLEN_DV" dir="in" width="FLOWS">
			Valid signal for RX_RELLEN - one bit for each flow.
      Requests releasing of used space in memory.
		</port>

	</port_map>

</interface>


<!-- HW BODY SECTION **************************************************** -->
<!-- information for HW designers, structure should be as follow          -->
<body>

<h1>RX DMA buffer info</h1>

	<p> 
		Data are received on generic number of FrameLink interfaces (each
    DATA_WIDTH/FLOWS wide, therefore (DATA_WIDTH mod FLOWS = 0) is asserted).
    DATA_WIDTH is output width to Internal bus endpoint. After receiving whole
    frame (RX_EOF_N) data is aligned with zeros to output width (this can be
    set by SWR_FILLER's generic TOTAL_WIDTH to any number, e.g. 64 bits).
		RX buffer uses SWR_FILLER for aligning data and NFIFO2MEM for storing them.
	</p>

  <h2>DMA controller signals</h2>
  <p>
    After receiveng a FrameLink frame (and adding alignment) RX_NEWLEN signal
    (with RX_NEWLEN_DV) with number of received Bytes (aligned). These signals
    are delayed due to internal architecture (sh_fifos in nfifo2mem), so data
    are already available in memory when RX_NEWLEN_DV is set. When controller
    wants to release some space in flow's memory space, RX_RELLEN (with
    RX_RELLEN_DV) is sent and this number of Bytes is marked as free.
  </p>

  <h2>Internal bus address</h2>
  <p>
    IB address' width is 32 bits and is parsed in the folowing way (example is
    for DATA_WIDTH = 64, BLOCK_SIZE = 512, FLOWS = 2 and TOTAL_FLOW_SIZE = 16384;
    Other bits are ignored):
    <tab sloupce="ccc">
      <tr>
        <th>Generic width</th>
        <th>Example</th>
        <th>Meaning</th>
      </tr>
      <tr>
        <td>log2(DATA_WIDTH/8)-1 downto 0</td>
        <td>2:0</td>
        <td>ignored (number is items of DATA_WIDTH, needs Bytes)</td>
      </tr>
      <tr>
        <td>log2(BLOCK_SIZE)+log2(DATA_WIDTH/8)-1 downto log2(DATA_WIDTH/8)</td>
        <td>11:3</td>
        <td>offset in flow's memory (log2(BLOCK_SIZE) bits)</td>
      </tr>
      <tr>
        <td>log2(FLOWS)+log2(TOTAL_FLOW_SIZE)-1 downto log2(TOTAL_FLOW_SIZE)</td>
        <td>14:14</td>
        <td>number of interface where data was received (log2(FLOWS) bits)</td>
      </tr>
      <nazev>Internal bus address meaning.</nazev>
    </tab>
  </p>
		
<h1>Schemes</h1>
	
	<p>
		The component converts NFIFO2MEM's interface to FrameLink on input and
    Internal bus on output. DMA ctrl interface is added (generation of RX_NEWLEN
    signal - counter - and modification of RX_RELLEN to fit subcomponent's needs).
		<obr src="./fig/sw_rxbuf_top.fig">RX DMA buffer architecture</obr>
	</p>			

<h1>Frequency and resources usage</h1>
<p>
   <tab sloupce="cccccc">
   <tr>
      <th>FPGA</th>
      <th>Architecture</th>
      <th>Tool</th>
      <th>Generic settings</th>
      <th>Slices</th>
      <th>Max. Frequency</th>
   </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>precision</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=1 </td>
         <td>133</td>
         <td>228.571</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>precision</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=2 </td>
         <td>220</td>
         <td>197.161</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>precision</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=4 </td>
         <td>418</td>
         <td>150.625</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=1 </td>
         <td>163</td>
         <td>228.768</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=2 </td>
         <td>250</td>
         <td>173.051</td>
      </tr>
      <tr>
         <td>xc2vp50</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=4 </td>
         <td>465</td>
         <td>156.625</td>
      </tr>
      <tr>
         <td>xc5vlx110t</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=1 </td>
         <td>93</td>
         <td>289.939</td>
      </tr>
      <tr>
         <td>xc5vlx110t</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=2 </td>
         <td>215</td>
         <td>290.444</td>
      </tr>
      <tr>
         <td>xc5vlx110t</td>
         <td>FULL</td>
         <td>xst</td>
         <td>DATA_WIDTH=64 BLOCK_SIZE=512 FLOWS=4 </td>
         <td>294</td>
         <td>221.337</td>
      </tr>
<nazev>Chip utilization and maximal frequency.</nazev>
</tab>
</p>

</body>

</source>
