<?xml version="1.0" encoding="ISO-8859-1"?>
<source>

<component>SW_RXBUF</component>

<authors>
   <author login="kosek">Martin Kosek</author>
</authors>

<features>
   <item>FrameLink input interface</item>
   <item>Generic Internal Bus width (same width as Input)</item>
   <item>Generic size of Packet Memory</item>
   <item>Information packets about new packet sent via Control Bus</item>
</features>

<description>
   <p>
      This component is used as a buffer, where incomming packets are stored
      in Block RAM memory. This memory is later read by a driver using an Internal
      Bus, which should provide very high throughput.
   </p>
</description>

<interface>
   <generic_map>
      <generic name="DATA_WIDTH" type="integer" default="">
         Internal Bus data width. It also marks the width of input FrameLink interface.
      </generic>
      <generic name="BMEM_ITEMS" type="integer" default="">
         Number of items in Packet memory (composed from BlockRAMs). It
         has to be power of 2 (2, 4, 8, ...).
      </generic>
      <generic name="BMEM_MAX_BLOCKS" type="integer" default="">
         Maximum number of blocks in Packet memory.
      </generic>
      <generic name="CTRL_MEM_ITEMS" type="integer" default="16">
         Number of items in Control memory used for storing records of
         packets in Packet memory.
      </generic>
      <generic name="CONTROL_SIZE" type="integer" default="8">
         Number of reserved bytes in the Packet memory before the payload data. 
         It is entered in Bytes.
      </generic>
      <generic name="HEADER" type="boolean" default="">
         An header is present in the frame.
      </generic>
      <generic name="FOOTER" type="boolean" default="">
         A footer is present in the frame.
      </generic>
   </generic_map>

   <port_map>
      <divider>Common Interface</divider>
      <port name="CLK" dir="in" width="1">
         Clock input
      </port>
      <port name="RESET" dir="in" width="1">
         Reset input
      </port>
      
      <divider>Internal Bus interface</divider>
      <port name="RD" dir="inout" width="1">
         IB Read Interface
      </port>

      <divider>Data input interface</divider>
      <port name="RX" dir="inout" width="1">
         FrameLink input interface
      </port>

      <divider>Control Bus interface</divider>
      <port name="UPS_FL" dir="inout" width="1">
         Upstream Interface
      </port>

      <port name="DNS_FL" dir="inout" width="1">
         Downstream Interface
      </port>
   </port_map>
</interface>

<operations>
   <op name="Receive packet" id="receive_packet">
      <p>
         When software needs to receive a packet it needs to know offset in 
         Packet memory, where packet is stored, and packet payload length. 
         This information should come to software (driver) through Control Bus.
      </p>   
      <p>
         Packet control data (header or footer) are stored in a Packet memory 
         before the payload itself. The amount of space for control data is set by 
         generic CONTROL_SIZE.
      </p>
      <p>
         The space for Control data will be allocated before the payload data itself in
         aligned way. That means that payload data will be stored on a new memory row,
         even if there will be some space unused on the previous row with Control Data.
      </p>
   </op>
</operations>

<addr_space id="sw_rxbuf_addr_space" name="SW_RXBUF address space" main="yes" size="0x200000">
   <reg name="Packet memory" id="sw_rxbuf_bmem" offset="0x000000" access="R" words="generic">
      <bit_vect bits="generic">
      <description_above>
         <p>
            Packet memory - it's filled from the hardware side according to
            FrameLink protocol. Packet payload and control data (header and footer)
            are stored here.
         </p>
         <p>
            Control data are stored before the payload itself in a fixed size space
            according to generic CONTROL_SIZE.
         </p>
      </description_above>
      <format>
         <bit from="0" to="generic" name="data" access="R">Packet or Control data</bit>
      </format>
      </bit_vect>
   </reg>

   <reg name="Control memory" id="sw_rxbuf_ctrl_mem" offset="0x100000" access="R" words="generic">
      <bit_vect bits="32">
      <description_above>
         Records about packets stored in Packet memory are stored here before
         this information is sent over Control bus to the driver.
      </description_above>
      <format>
         <bit from="0" to="19" name="Offset" access="R">
            Offset in Packet memory where Control or Packet data are stored
         </bit>
         <bit from="20" to="31" name="Length" access="R">Packet payload length</bit>
      </format>
      </bit_vect>
   </reg>

   <reg name="Status register" id="sw_rxbuf_status" offset="0x101000" access="R" words="1">
      <bit_vect bits="32">
      <description_above>
         SW_RXBUF status register for debug purposes.
      </description_above>
      <format>
         <bit from="0" to="0" name="RX_SRC_RDY_N" access="R">
            Receive interface - source ready (negative logic)
         </bit>
         <bit from="1" to="1" name="RX_DST_RDY_N" access="R">
            Receive interface - destination ready (negative logic)
         </bit>
         <bit from="2" to="2" name="PACKET_MEMORY_FULL" access="R">
            Packet memory full
         </bit>
         <bit from="3" to="3" name="CONTROL_MEMORY_FULL" access="R">
            Control memory full
         </bit>
         <bit from="4" to="4" name="PKT_INFO_READY" access="R">
            Packet information ready
         </bit>
         <bit from="5" to="7" name="RESERVED" access="R">
            Reserved
         </bit>
         <bit from="15" to="8" name="CONTROL_MEMORY_STATUS" access="R">
            Number of free items in control memory
         </bit>
         <bit from="31" to="16" name="RESERVED" access="R">
            Reserved
         </bit>
      </format>
      </bit_vect>
   </reg>
</addr_space>

<sw_body>
   <h1>Data structure in memory</h1>
   <p>
      Data stored in memory follow a simple structure, which depends on
      SW_RXBUF generics (CONTROL_SIZE actually). SW_RXBUF decides by
      using this generic where it should store packet header, footer and
      payload.
   </p>
   <p>
      In a following image there is a figure of how SW_RXBUF stores incoming
      packets.
   </p>
   <p>
      <obr src="./fig/packet_storage.fig">Packets stored in memory</obr>
   </p>
   <p>
      On the figure there are 2 packets stored in Packet memory. CONTROL_SIZE
      generic is set to 6 bytes. OFFSET and LENGTH are packet information which
      will be sent to software (driver) by Control Bus.
   </p>

   <h1>Packet releasing</h1>
   <p>
      It's important to release (free) stored packets from SW_RXBUF memory after
      successful read or the SW_RXBUF memory will fill up and packet receiving will
      stuck.
   </p>
   <p>
      The release can be realized by sending a 
      <a href="https://www.liberouter.org/wiki/index.php/P%C5%99%C3%ADpadov%C3%A1_studie:_SW_TXBUF_a_SW_RXBUF">special packet</a>
      over Control Bus to SW_RXBUF - an oldest un-freed packet stored in 
      a memory will be freed.
   </p>
</sw_body>

<body>
   <h1>Data storing</h1>
   <p>
      This component has FrameLink input interface, so connection to your design is quite
      easy, all you have to do is to have an input FrameLink interface as wide as Internal
      Bus width.
   </p>
   <p>
      Data stored in memory must follow a simple structure, which depends on
      SW_RXBUF generics (CONTROL_SIZE actually). This structure is 
      figured and descripted in SW section page of this documentation.
   </p>

   <h1>Data reading</h1>
   <p>
      Data are read via Internal Bus, which should offer necessary throughput. The information
      about incoming packets are sent by Control Bus, so you need to be able to read and parse
      these info packets.
   </p>
   <p>
      The info packet structure can be found in a wiki page dedicated to 
      <a href="https://www.liberouter.org/wiki/index.php/P%C5%99%C3%ADpadov%C3%A1_studie:_SW_TXBUF_a_SW_RXBUF">SW_RXBUF and SW_TXBUF</a>.
   </p>

   <h1>Frequency and Resources usage</h1>
   <p>
      <tab sloupce="cccc">
         <tr>
            <th>Generic settings</th>
            <th>Slices (% of C6X slices)</th>
            <th>BlockRams (+ % of C6X BRAMs)</th>
            <th>Max. HW frequency</th>
         </tr>
         <tr>
            <th>64b width, 1024 Packet Memory items, 32 Control Memory items</th> 
            <td>272 (1.2%)</td>
            <td>4 (1.7%)</td>
            <td>150 MHz</td>
         </tr>
      <nazev>Chip utilization &amp; max design frequency</nazev>
      </tab> 
   </p>

   <h1>Schemes</h1>
   <p>
      The block structure of the component is in the following figures. It's 
      composed of Control Memory for input data processing and storing into 
      Packet Memory, Control Memory for storing packet information Internal
      Bus related logic.
   </p>
   <p>
      <obr src="./fig/sw_rxbuf.fig">SW_RXBUF architecture</obr>
      <obr src="./fig/swr_cu.fig">Control Unit</obr>
      <obr src="./fig/swr_cu_fsm.fig">Control Unit FSM</obr>
   </p>

</body>
</source>
