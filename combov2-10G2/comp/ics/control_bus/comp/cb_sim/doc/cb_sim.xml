<source>

<component>Control Bus Simulation Component</component>

<authors>
      <author login="xbeckp00">Patrik Beck</author>
   </authors>

<features>
	<item> <!-- ### doplnit ### --> </item>
</features>

<bugs>
     <item>Not known bugs</item>
   </bugs>

<todo>
   </todo>

<description>
      Easy use component for creating read and write transaction on
      Control Bus. Using of this
      component is smilar like using plx_sim.
   </description>

<interface>
	<!-- doplnit dividery -->

   <port_map>
         <divider>Common Interface</divider>
         
         <port name="CB_CLK" dir="in" width="1">
            Control Bus Clock.
         </port>
           
         <port name="CB_RESET" dir="in" width="1">
            Control Bus Reset.
         </port>
         
         <divider>Control Bus Interface</divider>
         
         <port name="PORT0" dir="in/out" width="t_control_bus">
            Control Bus Port
         </port> 

         <divider>Simulation Interface</divider>

         <port name="CTRL" dir="in" width="t_cb_params">
            Ctrl port - set command for command parser
         </port>

         <port name="STROBE" dir="in" width="1">
            Strobe command on CTRL port
         </port>

         <port name="BUSY" dir="out" width="1">
            CB_SIM is BUSY (sending or waiting for some transaction)            
         </port>

      </port_map>

</interface>

<constant> <!-- ### doplnit ### --> </constant>

<operations>
	<init>

	<!-- ### doplnit (init) ### -->
	</init>
</operations>

<!-- ### doplnit adresovy prostor ### -->

<sw_body> <!-- ### doplnit ### --> </sw_body>

<body>
      
<!-- Here is description in standard Satrapa format-->
<h1>Control Bus Simulation Component</h1>
   <p>
      When you want to use CB_SIM component cb_sim_oper package must be included <br />
      <i>use work.cb_sim_oper.all; -- Control Bus Simulation Package</i>
   </p>

<h2>CB_OP procedure for testbench</h2>
   
<p>
   This procedure must be placed to your testbench file. Using this procedure is
   IB_SIM gets BUS operations.
</p>
   
   <pre>	    

   procedure cb_op(ctrl : in t_cb_params) is
   begin
      wait until (CB_CLK'event and CB_CLK='1' and cb_sim_busy(4) = '0');
      cb_sim_params(4) &lt;= ctrl;
      cb_sim_strobe(4) &lt;= '1';
      wait until (CB_CLK'event and CB_CLK='1');
      cb_sim_strobe(4) &lt;= '0';
   end cb_op;

   </pre>
      
<h2>Supported commands for CB_SIM</h2>

<p>
   Result of this two functions can be used as a parametr for
   ib_op procedure.<br />
   Ex. <i>cb_op(cb_packet(3, 64, X"789A"));</i>
</p>

   
      <b><i>Send packet with one word</i></b>
   <pre>
         function cb_packet(ident        : in integer;
                            buffer_space : in integer;
                            data         : in std_logic_vector(15 downto 0)
                            ) return t_cb_params;
   </pre>
   

   
   <b><i>Send task to DMA engine(specific packet)</i></b>
   <pre>
   function cb_bm_packet(  ident          :  in integer;
                           t_type         :  in std_logic_vector(3 downto 0)
                           tag            :  in std_logic_vector(11 downto 0)
                           length         :  in std_logic_vector(11 downto 0
                           local_addr     :  in std_logic_vector(31 downto 0
                           global_addr    :  in std_logic_vector(63 downto 0
                           ) return t_cb_params;                                                                                                                                                                                                                                                                                                         
   </pre>

</body>

</source>
