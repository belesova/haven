--------------------------------------------------------------------
-- Name: tx_dma_ctrl_opt_arch_1b.vhd
-- Created: 12/5/2010 @ 9:49
-- Description: this file contains the top level entity
-- Generated by: DK Design Suite, version 5.1.6051.16784
-- Family: Xilinx Virtex-5
-- Output Style: Xilinx Synthesis Tool
--
-- File structure:
--
-- -tx_dma_ctrl_opt_arch_1b.vhd
--------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY DK;
USE DK.DKPackage.ALL;
LIBRARY unisim;
USE unisim.vcomponents.ALL;
-- this is the top level entity
ENTITY tx_dma_ctrl_opt_arch_1b IS
  -- interface description
  PORT (
    BUF_NEWLEN : OUT std_logic_vector(15 DOWNTO 0);
    BUF_NEWLEN_DV : OUT std_logic;
    BUF_NEWLEN_RDY : IN std_logic;
    BUF_RELLEN : IN std_logic_vector(15 DOWNTO 0);
    BUF_RELLEN_DV : IN std_logic;
    BUFFER_ADDR : IN std_logic_vector(31 DOWNTO 0);
    BUFFER_SIZE : IN std_logic_vector(15 DOWNTO 0);
    DESC_DO : IN std_logic_vector(0 DOWNTO 0);
    DESC_EMPTY : IN std_logic;
    DESC_READ : OUT std_logic;
    DMA_ACK : IN std_logic;
    DMA_ADDR : IN std_logic_vector(6 DOWNTO 0);
    DMA_DONE : IN std_logic;
    DMA_DOUT : OUT std_logic_vector(0 DOWNTO 0);
    DMA_REQ : OUT std_logic;
    DMA_TAG : IN std_logic_vector(15 DOWNTO 0);
    DMA_TAG_ID : IN std_logic_vector(7 DOWNTO 0);
    ENABLE : OUT std_logic;
    INTERRUPT : OUT std_logic_vector(1 DOWNTO 0);
    PIN_CLK : IN std_logic;
    PIN_RESET : IN std_logic;
    SW_ADDR : IN std_logic_vector(31 DOWNTO 0);
    SW_ARDY : OUT std_logic;
    SW_DRD : OUT std_logic_vector(31 DOWNTO 0);
    SW_DRDY : OUT std_logic;
    SW_DWR : IN std_logic_vector(31 DOWNTO 0);
    SW_RD : IN std_logic;
    SW_WR : IN std_logic
  );
END;

-- this is the top level entity
ARCHITECTURE behaviour OF tx_dma_ctrl_opt_arch_1b IS
component RAM16X1D
        generic (
           INIT : bit_vector := X"0000"
        );
        port (
           D     : in std_logic;
           WE    : in std_logic;
           WCLK  : in std_logic;
           A0    : in std_logic;
           A1    : in std_logic;
           A2    : in std_logic;
           A3    : in std_logic;
           DPRA0 : in std_logic;
           DPRA1 : in std_logic;
           DPRA2 : in std_logic;
           DPRA3 : in std_logic;
           SPO   : out std_logic;
           DPO   : out std_logic
        );
end component;
component RAM32X1D
        generic (
           INIT : bit_vector := X"00000000"
        );
        port (
           D     : in std_logic;
           WE    : in std_logic;
           WCLK  : in std_logic;
           A0    : in std_logic;
           A1    : in std_logic;
           A2    : in std_logic;
           A3    : in std_logic;
           A4    : in std_logic;
           DPRA0 : in std_logic;
           DPRA1 : in std_logic;
           DPRA2 : in std_logic;
           DPRA3 : in std_logic;
           DPRA4 : in std_logic;
           SPO   : out std_logic;
           DPO   : out std_logic
        );
end component;
component RAM64X1D
        generic (
           INIT : bit_vector := X"0000000000000000"
        );
        port (
           D     : in std_logic;
           WE    : in std_logic;
           WCLK  : in std_logic;
           A0    : in std_logic;
           A1    : in std_logic;
           A2    : in std_logic;
           A3    : in std_logic;
           A4    : in std_logic;
           A5    : in std_logic;
           DPRA0 : in std_logic;
           DPRA1 : in std_logic;
           DPRA2 : in std_logic;
           DPRA3 : in std_logic;
           DPRA4 : in std_logic;
           DPRA5 : in std_logic;
           SPO   : out std_logic;
           DPO   : out std_logic
        );
end component;
  -- Power cable
  CONSTANT VCC : std_logic := '1';
  -- Ground cable
  CONSTANT GND : std_logic := '0';
  -- Register 'cnt_dma_ack'
  SIGNAL cnt_dma_ack : unsigned(7 DOWNTO 0);
  -- Register 'cnt_not_buf_rellen'
  SIGNAL cnt_not_buf_rellen : unsigned(7 DOWNTO 0);
  -- Register 'cnt_space_available'
  SIGNAL cnt_space_available : unsigned(7 DOWNTO 0);
  -- Register 'cnt_no_space'
  SIGNAL cnt_no_space : unsigned(7 DOWNTO 0);
  -- Register 'cnt_down_descs'
  SIGNAL cnt_down_descs : unsigned(7 DOWNTO 0);
  -- Register 'cnt_desc_empty'
  SIGNAL cnt_desc_empty : unsigned(7 DOWNTO 0);
  -- Register 'debug_status'
  SIGNAL debug_status : unsigned(8 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_interrupt : unsigned(1 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_interrupt0 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_interrupt1 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_enable : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_buf_newlen : unsigned(15 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_desc_read : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_sw_ardy : unsigned(0 DOWNTO 0);
  -- Register 'ifc_sw_drdy'
  SIGNAL ifc_sw_drdy : unsigned(0 DOWNTO 0);
  -- Register 'ifc_sw_drd'
  SIGNAL ifc_sw_drd : unsigned(31 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_dma_dout : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ifc_dma_req : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL dma_done_release : unsigned(0 DOWNTO 0);
  -- Register 'dma_done_cnt'
  SIGNAL dma_done_cnt : unsigned(2 DOWNTO 0);
  -- Register 'sw_str_ptr'
  SIGNAL sw_str_ptr : unsigned(31 DOWNTO 0);
  -- Register 'sw_end_ptr'
  SIGNAL sw_end_ptr : unsigned(31 DOWNTO 0);
  -- Register 'sw_last_end_ptr'
  SIGNAL sw_last_end_ptr : unsigned(31 DOWNTO 0);
  -- Register 'hw_buffer_mask'
  SIGNAL hw_buffer_mask : unsigned(15 DOWNTO 0);
  -- Register 'hw_end_ptr'
  SIGNAL hw_end_ptr : unsigned(15 DOWNTO 0);
  -- Register 'hw_buffer_free_space'
  SIGNAL hw_buffer_free_space : unsigned(15 DOWNTO 0);
  -- Register 'hw_str_ptr'
  SIGNAL hw_str_ptr : unsigned(15 DOWNTO 0);
  -- Register 'control_reg'
  SIGNAL control_reg : unsigned(2 DOWNTO 0);
  -- Register 'status_reg'
  SIGNAL status_reg : unsigned(3 DOWNTO 0);
  -- Register 'interrupt_reg'
  SIGNAL interrupt_reg : unsigned(31 DOWNTO 0);
  -- Register 'interrupt_mon'
  SIGNAL interrupt_mon : unsigned(31 DOWNTO 0);
  -- Register 'timeout_reg'
  SIGNAL timeout_reg : unsigned(31 DOWNTO 0);
  -- Register 'interrupt_reset'
  SIGNAL interrupt_reset : unsigned(0 DOWNTO 0);
  -- Register 'interrupt_enable'
  SIGNAL interrupt_enable : unsigned(0 DOWNTO 0);
  -- Register 'timeout_enable'
  SIGNAL timeout_enable : unsigned(0 DOWNTO 0);
  -- Register 'sw_buffer_mask'
  SIGNAL sw_buffer_mask : unsigned(31 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL hw_buffer_full : unsigned(0 DOWNTO 0);
  -- Register 'getNextDesc'
  SIGNAL getNextDesc : unsigned(0 DOWNTO 0);
  -- Register 'newDescReady'
  SIGNAL newDescReady : unsigned(0 DOWNTO 0);
  -- Start out
  SIGNAL StartOut : std_logic;
  -- Start out
  SIGNAL StartOut_1 : std_logic;
  -- Start out
  SIGNAL StartOut_2 : std_logic;
  -- Start out
  SIGNAL StartOut_3 : std_logic;
  -- Start out
  SIGNAL StartOut_4 : std_logic;
  -- Start out
  SIGNAL StartOut_5 : std_logic;
  -- Start out
  SIGNAL StartOut_6 : std_logic;
  -- Start out
  SIGNAL StartOut_7 : std_logic;
  -- Start out
  SIGNAL StartOut_8 : std_logic;
  -- Start out
  SIGNAL StartOut_9 : std_logic;
  -- Start out
  SIGNAL StartOut_10 : std_logic;
  -- Start out
  SIGNAL StartOut_11 : std_logic;
  -- Register 'parts'
  SIGNAL parts : unsigned(6 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL LoopZ : std_logic;
  -- Constant value
  CONSTANT ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- Test for equality
  SIGNAL BinOpOut : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse : std_logic;
  -- Control path join
  SIGNAL BodyStart : std_logic;
  -- Clock cycle delay
  SIGNAL BodyEnd : std_logic;
  -- One-Hot Multiplexer
  SIGNAL SeqChain : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_1 : std_logic;
  -- Constant value
  CONSTANT ConstOut_1 : unsigned(6 DOWNTO 0) := "0000000";
  -- Constant value
  CONSTANT ConstOut_2 : unsigned(0 DOWNTO 0) := "1";
  -- Test for equality
  SIGNAL BinOpOut_1 : std_logic;
  -- Control path join
  SIGNAL BodyStart_1 : std_logic;
  -- Clock cycle delay
  SIGNAL BodyEnd_1 : std_logic;
  -- Plus
  SIGNAL BinOpOut_2 : unsigned(7 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue : std_logic;
  -- Plus
  SIGNAL BinOpOut_3 : unsigned(6 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_3 : unsigned(6 DOWNTO 0) := "0000001";
  -- Plus
  SIGNAL BinOpOut_4 : unsigned(6 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_3 : std_logic;
  -- Plus
  SIGNAL BinOpOut_5 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_4 : unsigned(6 DOWNTO 0) := "1000000";
  -- Test for unsigned less than
  SIGNAL BinOpOut_6 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_1 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_1 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_1 : std_logic;
  -- Control path join
  SIGNAL CForkIn_1 : std_logic;
  -- Bitwise AND
  SIGNAL BinOpOut_7 : unsigned(15 DOWNTO 0);
  -- Register 'data_length'
  SIGNAL data_length : unsigned(31 DOWNTO 0);
  -- Register 'page_offset'
  SIGNAL page_offset : unsigned(11 DOWNTO 0);
  -- Register 'page_free_space'
  SIGNAL page_free_space : unsigned(12 DOWNTO 0);
  -- Register 'need_new_desc'
  SIGNAL need_new_desc : unsigned(0 DOWNTO 0);
  -- Register 'mem_l_addr'
  SIGNAL mem_l_addr : unsigned(31 DOWNTO 0);
  -- Register 'mem_length'
  SIGNAL mem_length : unsigned(11 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_2 : std_logic;
  -- Constant value
  CONSTANT ConstOut_5 : unsigned(3 DOWNTO 0) := "0001";
  -- Test for equality
  SIGNAL BinOpOut_8 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_2 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_1 : std_logic;
  -- Constant value
  CONSTANT ConstOut_6 : unsigned(12 DOWNTO 0) := "1000000000000";
  -- Constant value
  CONSTANT ConstOut_7 : unsigned(11 DOWNTO 0) := (OTHERS => '0');
  -- Constant value
  CONSTANT ConstOut_8 : unsigned(8 DOWNTO 0) := "000000001";
  -- Clock cycle delay
  SIGNAL Z_Dones_6 : std_logic;
  -- Constant value
  CONSTANT ConstOut_9 : unsigned(15 DOWNTO 0) := "0000000000000001";
  -- Minus
  SIGNAL BinOpOut_9 : unsigned(15 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL SeqChain_2 : std_logic;
  -- Constant value
  CONSTANT ConstOut_10 : unsigned(7 DOWNTO 0) := "00000000";
  -- Concatenation
  SIGNAL BinOpOut_10 : unsigned(15 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_11 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_11 : unsigned(6 DOWNTO 0) := "0010000";
  -- Clock cycle delay
  SIGNAL SeqChain_3 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_12 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_12 : unsigned(6 DOWNTO 0) := "0010001";
  -- Clock cycle delay
  SIGNAL SeqChain_4 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_13 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_13 : unsigned(6 DOWNTO 0) := "0010010";
  -- Clock cycle delay
  SIGNAL SeqChain_5 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_14 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_14 : unsigned(6 DOWNTO 0) := "0010011";
  -- Clock cycle delay
  SIGNAL SeqChain_6 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_15 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_15 : unsigned(6 DOWNTO 0) := "0010100";
  -- Clock cycle delay
  SIGNAL SeqChain_7 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_16 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_16 : unsigned(6 DOWNTO 0) := "0010101";
  -- Clock cycle delay
  SIGNAL SeqChain_8 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_17 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_17 : unsigned(6 DOWNTO 0) := "0010110";
  -- Clock cycle delay
  SIGNAL SeqChain_9 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_18 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_18 : unsigned(6 DOWNTO 0) := "0010111";
  -- Clock cycle delay
  SIGNAL SeqChain_10 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_19 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_19 : unsigned(6 DOWNTO 0) := "0011000";
  -- Clock cycle delay
  SIGNAL SeqChain_11 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_20 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_20 : unsigned(6 DOWNTO 0) := "0011001";
  -- Clock cycle delay
  SIGNAL SeqChain_12 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_21 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_21 : unsigned(6 DOWNTO 0) := "0011010";
  -- Clock cycle delay
  SIGNAL SeqChain_13 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_22 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_22 : unsigned(6 DOWNTO 0) := "0011011";
  -- Clock cycle delay
  SIGNAL SeqChain_14 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_23 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_23 : unsigned(6 DOWNTO 0) := "0011100";
  -- Clock cycle delay
  SIGNAL SeqChain_15 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_24 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_24 : unsigned(6 DOWNTO 0) := "0011101";
  -- Clock cycle delay
  SIGNAL SeqChain_16 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_25 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_25 : unsigned(6 DOWNTO 0) := "0011110";
  -- Bit range selection
  SIGNAL BinOpOut_26 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_26 : unsigned(6 DOWNTO 0) := "0011111";
  -- Constant value
  CONSTANT ConstOut_27 : unsigned(3 DOWNTO 0) := "0100";
  -- Test for equality
  SIGNAL BinOpOut_27 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_3 : std_logic;
  -- Constant value
  CONSTANT ConstOut_28 : unsigned(3 DOWNTO 0) := "0010";
  -- Constant value
  CONSTANT ConstOut_29 : unsigned(3 DOWNTO 0) := "1000";
  -- Bitwise OR
  SIGNAL BinOpOut_28 : unsigned(0 DOWNTO 0);
  -- Conditional false branch
  SIGNAL WireFalse_4 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_2 : std_logic;
  -- Test for inequality
  SIGNAL BinOpOut_29 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_5 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_2 : std_logic;
  -- Control path join
  SIGNAL CForkIn_3 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_3 : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_30 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_6 : std_logic;
  -- Bitwise AND
  SIGNAL BinOpOut_31 : unsigned(31 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_1_1 : std_logic;
  -- Constant value
  CONSTANT ConstOut_30 : unsigned(8 DOWNTO 0) := "000000010";
  -- Clock cycle delay
  SIGNAL SeqChain_17 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_18 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_32 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL SeqChain_19 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_33 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_31 : unsigned(6 DOWNTO 0) := "1000001";
  -- Clock cycle delay
  SIGNAL SeqChain_20 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_34 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_32 : unsigned(6 DOWNTO 0) := "1000010";
  -- Clock cycle delay
  SIGNAL SeqChain_21 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_35 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_33 : unsigned(6 DOWNTO 0) := "1000011";
  -- Clock cycle delay
  SIGNAL SeqChain_22 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_36 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_34 : unsigned(6 DOWNTO 0) := "1000100";
  -- Clock cycle delay
  SIGNAL SeqChain_23 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_37 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_35 : unsigned(6 DOWNTO 0) := "1000101";
  -- Clock cycle delay
  SIGNAL SeqChain_24 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_38 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_36 : unsigned(6 DOWNTO 0) := "1000110";
  -- Clock cycle delay
  SIGNAL SeqChain_25 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_39 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_37 : unsigned(6 DOWNTO 0) := "1000111";
  -- Clock cycle delay
  SIGNAL SeqChain_26 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_40 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_38 : unsigned(6 DOWNTO 0) := "1001000";
  -- Clock cycle delay
  SIGNAL SeqChain_27 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_41 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_39 : unsigned(6 DOWNTO 0) := "1001001";
  -- Bit range selection
  SIGNAL BinOpOut_42 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_40 : unsigned(6 DOWNTO 0) := "1001010";
  -- Clock cycle delay
  SIGNAL SeqChain_28 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_43 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_41 : unsigned(6 DOWNTO 0) := "1001011";
  -- Constant value
  CONSTANT ConstOut_42 : unsigned(15 DOWNTO 0) := (OTHERS => '0');
  -- Test for equality
  SIGNAL BinOpOut_44 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_7 : std_logic;
  -- Control path join
  SIGNAL BodyStart_2 : std_logic;
  -- Plus
  SIGNAL BinOpOut_45 : unsigned(7 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_2 : std_logic;
  -- Constant value
  CONSTANT ConstOut_43 : unsigned(8 DOWNTO 0) := "000000011";
  -- Clock cycle delay
  SIGNAL SeqChain_29 : std_logic;
  -- Plus
  SIGNAL BinOpOut_46 : unsigned(7 DOWNTO 0);
  -- Control path join
  SIGNAL SeqChain_30 : std_logic;
  -- Concatenation
  SIGNAL BinOpOut_47 : unsigned(31 DOWNTO 0);
  -- Test for unsigned greater than
  SIGNAL BinOpOut_48 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_4 : std_logic;
  -- Clock cycle delay
  SIGNAL Z_Dones_1_2 : std_logic;
  -- Constant value
  CONSTANT ConstOut_44 : unsigned(8 DOWNTO 0) := "000000100";
  -- Constant value
  CONSTANT ConstOut_45 : unsigned(18 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_49 : unsigned(31 DOWNTO 0);
  -- Test for unsigned less than
  SIGNAL BinOpOut_50 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_8 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_5 : std_logic;
  -- Constant value
  CONSTANT ConstOut_46 : unsigned(8 DOWNTO 0) := "000000101";
  -- Take LSBs
  SIGNAL BinOpOut_51 : unsigned(11 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_52 : unsigned(11 DOWNTO 0);
  -- Take LSBs
  SIGNAL BinOpOut_53 : unsigned(12 DOWNTO 0);
  -- Minus
  SIGNAL BinOpOut_54 : unsigned(12 DOWNTO 0);
  -- Bitwise AND
  SIGNAL BinOpOut_55 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_47 : unsigned(8 DOWNTO 0) := "000000110";
  -- Bitwise AND
  SIGNAL BinOpOut_56 : unsigned(31 DOWNTO 0);
  -- Conditional true branch
  SIGNAL WireTrue_6 : std_logic;
  -- Plus
  SIGNAL BinOpOut_57 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_48 : unsigned(8 DOWNTO 0) := "000000111";
  -- Test for equality
  SIGNAL BinOpOut_58 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_9 : std_logic;
  -- Constant value
  CONSTANT ConstOut_49 : unsigned(8 DOWNTO 0) := "000001000";
  -- Concatenation
  SIGNAL BinOpOut_59 : unsigned(31 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_60 : unsigned(31 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_3_1 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_31 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_32 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_61 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_50 : unsigned(6 DOWNTO 0) := "0100000";
  -- Clock cycle delay
  SIGNAL SeqChain_33 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_62 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_51 : unsigned(6 DOWNTO 0) := "0100001";
  -- Clock cycle delay
  SIGNAL SeqChain_34 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_63 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_52 : unsigned(6 DOWNTO 0) := "0100010";
  -- Clock cycle delay
  SIGNAL SeqChain_35 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_64 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_53 : unsigned(6 DOWNTO 0) := "0100011";
  -- Clock cycle delay
  SIGNAL SeqChain_36 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_65 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_54 : unsigned(6 DOWNTO 0) := "0100100";
  -- Clock cycle delay
  SIGNAL SeqChain_37 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_66 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_55 : unsigned(6 DOWNTO 0) := "0100101";
  -- Clock cycle delay
  SIGNAL SeqChain_38 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_67 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_56 : unsigned(6 DOWNTO 0) := "0100110";
  -- Clock cycle delay
  SIGNAL SeqChain_39 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_68 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_57 : unsigned(6 DOWNTO 0) := "0100111";
  -- Clock cycle delay
  SIGNAL SeqChain_40 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_69 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_58 : unsigned(6 DOWNTO 0) := "0101000";
  -- Clock cycle delay
  SIGNAL SeqChain_41 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_70 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_59 : unsigned(6 DOWNTO 0) := "0101001";
  -- Clock cycle delay
  SIGNAL SeqChain_42 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_71 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_60 : unsigned(6 DOWNTO 0) := "0101010";
  -- Clock cycle delay
  SIGNAL SeqChain_43 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_72 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_61 : unsigned(6 DOWNTO 0) := "0101011";
  -- Clock cycle delay
  SIGNAL SeqChain_44 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_73 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_62 : unsigned(6 DOWNTO 0) := "0101100";
  -- Clock cycle delay
  SIGNAL SeqChain_45 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_74 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_63 : unsigned(6 DOWNTO 0) := "0101101";
  -- Clock cycle delay
  SIGNAL SeqChain_46 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_75 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_64 : unsigned(6 DOWNTO 0) := "0101110";
  -- Clock cycle delay
  SIGNAL SeqChain_47 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_76 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_65 : unsigned(6 DOWNTO 0) := "0101111";
  -- Clock cycle delay
  SIGNAL SeqChain_48 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_77 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_66 : unsigned(6 DOWNTO 0) := "0110000";
  -- Clock cycle delay
  SIGNAL SeqChain_49 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_78 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_67 : unsigned(6 DOWNTO 0) := "0110001";
  -- Clock cycle delay
  SIGNAL SeqChain_50 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_79 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_68 : unsigned(6 DOWNTO 0) := "0110010";
  -- Clock cycle delay
  SIGNAL SeqChain_51 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_80 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_69 : unsigned(6 DOWNTO 0) := "0110011";
  -- Clock cycle delay
  SIGNAL SeqChain_52 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_81 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_70 : unsigned(6 DOWNTO 0) := "0110100";
  -- Clock cycle delay
  SIGNAL SeqChain_53 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_82 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_71 : unsigned(6 DOWNTO 0) := "0110101";
  -- Clock cycle delay
  SIGNAL SeqChain_54 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_83 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_72 : unsigned(6 DOWNTO 0) := "0110110";
  -- Clock cycle delay
  SIGNAL SeqChain_55 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_84 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_73 : unsigned(6 DOWNTO 0) := "0110111";
  -- Clock cycle delay
  SIGNAL SeqChain_56 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_85 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_74 : unsigned(6 DOWNTO 0) := "0111000";
  -- Clock cycle delay
  SIGNAL SeqChain_57 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_86 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_75 : unsigned(6 DOWNTO 0) := "0111001";
  -- Clock cycle delay
  SIGNAL SeqChain_58 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_87 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_76 : unsigned(6 DOWNTO 0) := "0111010";
  -- Clock cycle delay
  SIGNAL SeqChain_59 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_88 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_77 : unsigned(6 DOWNTO 0) := "0111011";
  -- Clock cycle delay
  SIGNAL SeqChain_60 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_89 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_78 : unsigned(6 DOWNTO 0) := "0111100";
  -- Clock cycle delay
  SIGNAL SeqChain_61 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_90 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_79 : unsigned(6 DOWNTO 0) := "0111101";
  -- Clock cycle delay
  SIGNAL SeqChain_62 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_91 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_80 : unsigned(6 DOWNTO 0) := "0111110";
  -- Bit range selection
  SIGNAL BinOpOut_92 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_81 : unsigned(6 DOWNTO 0) := "0111111";
  -- Clock cycle delay
  SIGNAL SeqChain_63 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_64 : std_logic;
  -- Constant value
  CONSTANT ConstOut_82 : unsigned(3 DOWNTO 0) := "0000";
  -- Concatenation
  SIGNAL BinOpOut_93 : unsigned(15 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_94 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL SeqChain_65 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_95 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL SeqChain_66 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_96 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_83 : unsigned(6 DOWNTO 0) := "0000010";
  -- Clock cycle delay
  SIGNAL SeqChain_67 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_97 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_84 : unsigned(6 DOWNTO 0) := "0000011";
  -- Clock cycle delay
  SIGNAL SeqChain_68 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_98 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_85 : unsigned(6 DOWNTO 0) := "0000100";
  -- Clock cycle delay
  SIGNAL SeqChain_69 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_99 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_86 : unsigned(6 DOWNTO 0) := "0000101";
  -- Clock cycle delay
  SIGNAL SeqChain_70 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_100 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_87 : unsigned(6 DOWNTO 0) := "0000110";
  -- Clock cycle delay
  SIGNAL SeqChain_71 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_101 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_88 : unsigned(6 DOWNTO 0) := "0000111";
  -- Clock cycle delay
  SIGNAL SeqChain_72 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_102 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_89 : unsigned(6 DOWNTO 0) := "0001000";
  -- Clock cycle delay
  SIGNAL SeqChain_73 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_103 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_90 : unsigned(6 DOWNTO 0) := "0001001";
  -- Clock cycle delay
  SIGNAL SeqChain_74 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_104 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_91 : unsigned(6 DOWNTO 0) := "0001010";
  -- Clock cycle delay
  SIGNAL SeqChain_75 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_105 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_92 : unsigned(6 DOWNTO 0) := "0001011";
  -- Clock cycle delay
  SIGNAL SeqChain_76 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_106 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_93 : unsigned(6 DOWNTO 0) := "0001100";
  -- Clock cycle delay
  SIGNAL SeqChain_77 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_107 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_94 : unsigned(6 DOWNTO 0) := "0001101";
  -- Clock cycle delay
  SIGNAL SeqChain_78 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_108 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_95 : unsigned(6 DOWNTO 0) := "0001110";
  -- Bit range selection
  SIGNAL BinOpOut_109 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_96 : unsigned(6 DOWNTO 0) := "0001111";
  -- Conditional true branch
  SIGNAL WireTrue_7 : std_logic;
  -- Constant value
  CONSTANT ConstOut_97 : unsigned(8 DOWNTO 0) := "000001001";
  -- Test for equality
  SIGNAL BinOpOut_110 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_10 : std_logic;
  -- Bitwise AND
  SIGNAL BinOpOut_111 : unsigned(15 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_112 : unsigned(7 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_98 : unsigned(8 DOWNTO 0) := "000001010";
  -- Constant value
  CONSTANT ConstOut_99 : unsigned(8 DOWNTO 0) := "000001011";
  -- Constant value
  CONSTANT ConstOut_100 : unsigned(8 DOWNTO 0) := "000001100";
  -- Control path join
  SIGNAL CForkIn_4 : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_113 : std_logic;
  -- Constant value
  CONSTANT ConstOut_101 : unsigned(7 DOWNTO 0) := "00000001";
  -- Bitwise OR
  SIGNAL BinOpOut_114 : unsigned(7 DOWNTO 0);
  -- Test for equality
  SIGNAL BinOpOut_115 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_11 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_8 : std_logic;
  -- Constant value
  CONSTANT ConstOut_102 : unsigned(2 DOWNTO 0) := "001";
  -- Plus
  SIGNAL BinOpOut_116 : unsigned(2 DOWNTO 0);
  -- Test for equality
  SIGNAL BinOpOut_117 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_12 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_9 : std_logic;
  -- Minus
  SIGNAL BinOpOut_118 : unsigned(2 DOWNTO 0);
  -- Register 'length'
  SIGNAL length : unsigned(12 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_5 : std_logic;
  -- Constant value
  CONSTANT ConstOut_103 : unsigned(2 DOWNTO 0) := "000";
  -- Test for inequality
  SIGNAL BinOpOut_119 : std_logic;
  -- Concatenation
  SIGNAL BinOpOut_120 : unsigned(15 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_121 : unsigned(31 DOWNTO 0);
  -- Bitwise AND
  SIGNAL BinOpOut_122 : unsigned(31 DOWNTO 0);
  -- Test for equality
  SIGNAL BinOpOut_123 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_13 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_10 : std_logic;
  -- Plus
  SIGNAL BinOpOut_124 : unsigned(31 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL LoopZ_3 : std_logic;
  -- Control path join
  SIGNAL CForkIn_6 : std_logic;
  -- Concatenation
  SIGNAL BinOpOut_125 : unsigned(1 DOWNTO 0);
  -- Register 'int_timeout'
  SIGNAL int_timeout : unsigned(31 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_7 : std_logic;
  -- Constant value
  CONSTANT ConstOut_104 : unsigned(31 DOWNTO 0) := "11111111111111111111111111111100";
  -- Conditional true branch
  SIGNAL WireTrue_11 : std_logic;
  -- Bitwise OR
  SIGNAL BinOpOut_126 : unsigned(0 DOWNTO 0);
  -- Conditional false branch
  SIGNAL WireFalse_14 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_12 : std_logic;
  -- Constant value
  CONSTANT ConstOut_105 : unsigned(31 DOWNTO 0) := (OTHERS => '0');
  -- Bitwise AND
  SIGNAL BinOpOut_127 : unsigned(0 DOWNTO 0);
  -- Conditional false branch
  SIGNAL WireFalse_15 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_13 : std_logic;
  -- Constant value
  CONSTANT ConstOut_106 : unsigned(31 DOWNTO 0) := "00000000000000000000000000000001";
  -- Plus
  SIGNAL BinOpOut_128 : unsigned(31 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_8 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_14 : std_logic;
  -- Bitwise AND
  SIGNAL BinOpOut_129 : unsigned(15 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_9 : std_logic;
  -- Clock cycle delay
  SIGNAL Z_Dones_0 : std_logic;
  -- Control path join
  SIGNAL CForkIn_10 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_79 : std_logic;
  -- Control path join
  SIGNAL CJoinOut : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_130 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_16 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_15 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_80 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_81 : std_logic;
  -- Bit selection
  SIGNAL DefaultWire : std_logic;
  -- Bit selection
  SIGNAL LinkWire_2 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_3 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_4 : std_logic;
  -- Control path join
  SIGNAL CForkIn_11 : std_logic;
  -- One-Hot Multiplexer
  SIGNAL ConstOut_107 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL LoopZ_5 : unsigned(0 DOWNTO 0);
  -- Control path join
  SIGNAL CForkIn_12 : std_logic;
  -- Bitwise OR
  SIGNAL BinOpOut_131 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_1_3 : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_132 : std_logic;
  -- Conditional false branch
  SIGNAL WireFalse_17 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_16 : std_logic;
  -- Bit range selection
  SIGNAL BinOpOut_133 : unsigned(5 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_134 : unsigned(2 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_135 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_136 : unsigned(0 DOWNTO 0);
  -- Bit selection
  SIGNAL LinkWire_0 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_2_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_3_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_4 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_5 : std_logic;
  -- Test for equality
  SIGNAL BinOpOut_137 : std_logic;
  -- Conditional true branch
  SIGNAL WireTrue_17 : std_logic;
  -- Constant value
  CONSTANT ConstOut_108 : unsigned(28 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_138 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_109 : unsigned(27 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_139 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_140 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_110 : unsigned(30 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_141 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_142 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_143 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_144 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_145 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_146 : unsigned(31 DOWNTO 0);
  -- Constant value
  CONSTANT ConstOut_111 : unsigned(22 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_147 : unsigned(31 DOWNTO 0);
  -- Bit selection
  SIGNAL DefaultWire_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_0_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_1_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_2_2 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_3_2 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_4_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_5_1 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_6 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_7 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_8 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_9 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_10 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_11 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_12 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_13 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_14 : std_logic;
  -- Bit selection
  SIGNAL LinkWire_15 : std_logic;
  -- Conditional false branch
  SIGNAL False_fork_input : std_logic;
  -- Conditional true branch
  SIGNAL S_0 : std_logic;
  -- Bitwise OR
  SIGNAL S_1 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_2 : std_logic;
  -- Clock cycle delay
  SIGNAL S_3 : std_logic;
  -- Conditional false branch
  SIGNAL False_fork_input_1 : std_logic;
  -- Bitwise OR
  SIGNAL S_4 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_5 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_6 : std_logic;
  -- Control path join
  SIGNAL S_6 : std_logic;
  -- Clock cycle delay
  SIGNAL CForkIn_13 : std_logic;
  -- Control path join
  SIGNAL S_7 : std_logic;
  -- Clock cycle delay
  SIGNAL CForkIn_14 : std_logic;
  -- Control path join
  SIGNAL S_8 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_7 : std_logic;
  -- Control path join
  SIGNAL S_9 : std_logic;
  -- Clock cycle delay
  SIGNAL Z_Dones_0_1 : std_logic;
  -- Control path join
  SIGNAL S_10 : std_logic;
  -- Clock cycle delay
  SIGNAL Z_Dones_1_4 : std_logic;
  -- Control path join
  SIGNAL S_11 : std_logic;
  -- Clock cycle delay
  SIGNAL LoopZ_8 : std_logic;
  -- Control path join
  SIGNAL S_12 : std_logic;
  -- Clock cycle delay
  SIGNAL SeqChain_82 : std_logic;
  -- Control path join
  SIGNAL S_13 : std_logic;
  -- Concatenation
  SIGNAL BinOpOut_148 : unsigned(15 DOWNTO 0);
  -- Control path OR
  SIGNAL S_14 : std_logic;
  -- Control path OR
  SIGNAL S_15 : std_logic;
  -- Bitwise XOR
  SIGNAL S_16 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_17 : std_logic;
  -- Bitwise XOR
  SIGNAL S_18 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL int_timeout_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL int_timeout_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL need_new_desc_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL need_new_desc_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL page_free_space_MuxOut : unsigned(12 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL page_offset_MuxOut : unsigned(11 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL data_length_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL data_length_CE : std_logic;
  -- Bitwise XOR
  SIGNAL S_19 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_20 : std_logic;
  -- Bitwise XOR
  SIGNAL S_21 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL parts_MuxOut : unsigned(6 DOWNTO 0);
  -- Control path OR
  SIGNAL parts_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL BinOpOut_149 : unsigned(6 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL S_22 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_23 : unsigned(0 DOWNTO 0);
  -- MPRAM 'dma_mem'
  SIGNAL DataOut : std_logic;
  -- Concatenation
  SIGNAL DataIn : unsigned(0 DOWNTO 0);
  -- MPRAM 'dma_mem'
  SIGNAL DataOut_1 : std_logic;
  -- One-Hot Multiplexer
  SIGNAL newDescReady_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL newDescReady_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL getNextDesc_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL getNextDesc_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL timeout_enable_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL timeout_enable_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL interrupt_enable_MuxOut : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL interrupt_reset_MuxOut : unsigned(0 DOWNTO 0);
  -- Control path OR
  SIGNAL interrupt_reset_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL interrupt_mon_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL interrupt_mon_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL status_reg_MuxOut : unsigned(3 DOWNTO 0);
  -- Control path OR
  SIGNAL status_reg_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL sw_last_end_ptr_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL sw_last_end_ptr_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL sw_str_ptr_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL sw_str_ptr_CE : std_logic;
  -- One-Hot Multiplexer
  SIGNAL dma_done_cnt_MuxOut : unsigned(2 DOWNTO 0);
  -- Control path OR
  SIGNAL dma_done_cnt_CE : std_logic;
  -- Control path inverter
  SIGNAL S_24 : std_logic;
  -- Bitwise AND
  SIGNAL AckOut : unsigned(0 DOWNTO 0);
  -- Register 'IdReg0'
  SIGNAL S_25 : unsigned(1 DOWNTO 0);
  -- Constant value
  CONSTANT C_0 : unsigned(1 DOWNTO 0) := "01";
  -- Plus
  SIGNAL S_26 : unsigned(1 DOWNTO 0);
  -- Register 'IdReg0'
  SIGNAL S_27 : unsigned(1 DOWNTO 0);
  -- Plus
  SIGNAL S_28 : unsigned(1 DOWNTO 0);
  -- Concatenation
  SIGNAL S_29 : unsigned(12 DOWNTO 0);
  -- Test for equality
  SIGNAL S_30 : std_logic;
  -- Bitwise XOR
  SIGNAL S_31 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL S_32 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_33 : std_logic;
  -- Bitwise not
  SIGNAL S_34 : unsigned(0 DOWNTO 0);
  -- Bitwise AND
  SIGNAL S_35 : unsigned(0 DOWNTO 0);
  -- Bitwise not
  SIGNAL S_36 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_37 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_38 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_39 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_40 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_0 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_1 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_2 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_3 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_4 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_5 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_6 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_7 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_8 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_9 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_10 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_11 : unsigned(0 DOWNTO 0);
  -- Bit range selection
  SIGNAL DataIntoFIFO_12 : unsigned(0 DOWNTO 0);
  -- MPRAM 'FIFORam'
  SIGNAL S_41 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_42 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_43 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_44 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_45 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_46 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_47 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_48 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_49 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_50 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_51 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_52 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_53 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_54 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_55 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_56 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_57 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_58 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_59 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_60 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_61 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_62 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_63 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_64 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_65 : std_logic;
  -- MPRAM 'FIFORam'
  SIGNAL S_66 : std_logic;
  -- One-Hot Multiplexer
  SIGNAL ifc_sw_drd_MuxOut : unsigned(31 DOWNTO 0);
  -- Control path OR
  SIGNAL ifc_sw_drd_CE : std_logic;
  -- Constant value
  CONSTANT ifc_interrupt_1 : unsigned(1 DOWNTO 0) := "00";
  -- One-Hot Multiplexer
  SIGNAL debug_status_MuxOut : unsigned(8 DOWNTO 0);
  -- Control path OR
  SIGNAL debug_status_CE : std_logic;
  -- Bitwise AND
  SIGNAL S_67 : unsigned(0 DOWNTO 0);
  -- Bitwise AND
  SIGNAL S_68 : unsigned(0 DOWNTO 0);
  -- Bitwise AND
  SIGNAL S_69 : unsigned(0 DOWNTO 0);
  -- Bitwise OR
  SIGNAL S_70 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL Z_Dones_2_1 : std_logic;
  -- Control path join
  SIGNAL S_71 : std_logic;
  -- Clock cycle delay
  SIGNAL S_72 : std_logic;
  -- Clock cycle delay
  SIGNAL S_73 : std_logic;
  -- Clock cycle delay
  SIGNAL S_74 : std_logic;
  -- Clock cycle delay
  SIGNAL S_75 : std_logic;
  -- Clock cycle delay
  SIGNAL S_76 : std_logic;
  -- Clock cycle delay
  SIGNAL S_77 : std_logic;
  -- Clock cycle delay
  SIGNAL S_78 : std_logic;
  -- Clock cycle delay
  SIGNAL S_79 : std_logic;
  -- Clock cycle delay
  SIGNAL S_80 : std_logic;
  -- Clock cycle delay
  SIGNAL S_81 : std_logic;
  -- Bitwise OR
  SIGNAL S_82 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_83 : std_logic;
  -- Clock cycle delay
  SIGNAL S_84 : std_logic;
  -- Bitwise OR
  SIGNAL S_85 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_86 : std_logic;
  -- Clock cycle delay
  SIGNAL S_87 : std_logic;
  -- Bitwise OR
  SIGNAL S_88 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_89 : std_logic;
  -- Clock cycle delay
  SIGNAL S_90 : std_logic;
  -- Clock cycle delay
  SIGNAL S_91 : std_logic;
  -- Clock cycle delay
  SIGNAL S_92 : std_logic;
  -- Bitwise OR
  SIGNAL S_93 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_94 : std_logic;
  -- Clock cycle delay
  SIGNAL S_95 : std_logic;
  -- Bitwise OR
  SIGNAL S_96 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_97 : std_logic;
  -- Clock cycle delay
  SIGNAL S_98 : std_logic;
  -- Clock cycle delay
  SIGNAL S_99 : std_logic;
  -- Clock cycle delay
  SIGNAL S_100 : std_logic;
  -- Clock cycle delay
  SIGNAL S_101 : std_logic;
  -- Clock cycle delay
  SIGNAL S_102 : std_logic;
  -- Clock cycle delay
  SIGNAL S_103 : std_logic;
  -- Clock cycle delay
  SIGNAL S_104 : std_logic;
  -- Clock cycle delay
  SIGNAL S_105 : std_logic;
  -- Clock cycle delay
  SIGNAL S_106 : std_logic;
  -- Bitwise OR
  SIGNAL S_107 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_108 : std_logic;
  -- Clock cycle delay
  SIGNAL S_109 : std_logic;
  -- Clock cycle delay
  SIGNAL S_110 : std_logic;
  -- Clock cycle delay
  SIGNAL S_111 : std_logic;
  -- Clock cycle delay
  SIGNAL S_112 : std_logic;
  -- Clock cycle delay
  SIGNAL S_113 : std_logic;
  -- Bitwise OR
  SIGNAL S_114 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_115 : std_logic;
  -- Bitwise OR
  SIGNAL S_116 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_117 : std_logic;
  -- Clock cycle delay
  SIGNAL S_118 : std_logic;
  -- Clock cycle delay
  SIGNAL S_119 : std_logic;
  -- Clock cycle delay
  SIGNAL S_120 : std_logic;
  -- Clock cycle delay
  SIGNAL S_121 : std_logic;
  -- Clock cycle delay
  SIGNAL S_122 : std_logic;
  -- Clock cycle delay
  SIGNAL S_123 : std_logic;
  -- Clock cycle delay
  SIGNAL S_124 : std_logic;
  -- Clock cycle delay
  SIGNAL S_125 : std_logic;
  -- Clock cycle delay
  SIGNAL S_126 : std_logic;
  -- Clock cycle delay
  SIGNAL S_127 : std_logic;
  -- Clock cycle delay
  SIGNAL S_128 : std_logic;
  -- Clock cycle delay
  SIGNAL S_129 : std_logic;
  -- Clock cycle delay
  SIGNAL S_130 : std_logic;
  -- Clock cycle delay
  SIGNAL S_131 : std_logic;
  -- Clock cycle delay
  SIGNAL S_132 : std_logic;
  -- Clock cycle delay
  SIGNAL S_133 : std_logic;
  -- Clock cycle delay
  SIGNAL S_134 : std_logic;
  -- Bitwise OR
  SIGNAL S_135 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_136 : std_logic;
  -- Clock cycle delay
  SIGNAL S_137 : std_logic;
  -- Clock cycle delay
  SIGNAL S_138 : std_logic;
  -- Clock cycle delay
  SIGNAL S_139 : std_logic;
  -- Clock cycle delay
  SIGNAL S_140 : std_logic;
  -- Clock cycle delay
  SIGNAL S_141 : std_logic;
  -- Clock cycle delay
  SIGNAL S_142 : std_logic;
  -- Clock cycle delay
  SIGNAL S_143 : std_logic;
  -- Clock cycle delay
  SIGNAL S_144 : std_logic;
  -- Clock cycle delay
  SIGNAL S_145 : std_logic;
  -- Clock cycle delay
  SIGNAL S_146 : std_logic;
  -- Clock cycle delay
  SIGNAL S_147 : std_logic;
  -- Clock cycle delay
  SIGNAL S_148 : std_logic;
  -- Clock cycle delay
  SIGNAL S_149 : std_logic;
  -- Clock cycle delay
  SIGNAL S_150 : std_logic;
  -- Clock cycle delay
  SIGNAL S_151 : std_logic;
  -- Clock cycle delay
  SIGNAL S_152 : std_logic;
  -- Clock cycle delay
  SIGNAL S_153 : std_logic;
  -- Clock cycle delay
  SIGNAL S_154 : std_logic;
  -- Clock cycle delay
  SIGNAL S_155 : std_logic;
  -- Clock cycle delay
  SIGNAL S_156 : std_logic;
  -- Clock cycle delay
  SIGNAL S_157 : std_logic;
  -- Clock cycle delay
  SIGNAL S_158 : std_logic;
  -- Clock cycle delay
  SIGNAL S_159 : std_logic;
  -- Clock cycle delay
  SIGNAL S_160 : std_logic;
  -- Clock cycle delay
  SIGNAL S_161 : std_logic;
  -- Clock cycle delay
  SIGNAL S_162 : std_logic;
  -- Clock cycle delay
  SIGNAL S_163 : std_logic;
  -- Clock cycle delay
  SIGNAL S_164 : std_logic;
  -- Clock cycle delay
  SIGNAL S_165 : std_logic;
  -- Clock cycle delay
  SIGNAL S_166 : std_logic;
  -- Clock cycle delay
  SIGNAL S_167 : std_logic;
  -- Clock cycle delay
  SIGNAL S_168 : std_logic;
  -- Clock cycle delay
  SIGNAL S_169 : std_logic;
  -- Clock cycle delay
  SIGNAL S_170 : std_logic;
  -- Clock cycle delay
  SIGNAL S_171 : std_logic;
  -- Clock cycle delay
  SIGNAL S_172 : std_logic;
  -- Clock cycle delay
  SIGNAL S_173 : std_logic;
  -- Clock cycle delay
  SIGNAL S_174 : std_logic;
  -- Clock cycle delay
  SIGNAL S_175 : std_logic;
  -- Clock cycle delay
  SIGNAL S_176 : std_logic;
  -- Clock cycle delay
  SIGNAL S_177 : std_logic;
  -- Clock cycle delay
  SIGNAL S_178 : std_logic;
  -- Clock cycle delay
  SIGNAL S_179 : std_logic;
  -- Clock cycle delay
  SIGNAL S_180 : std_logic;
  -- Clock cycle delay
  SIGNAL S_181 : std_logic;
  -- Clock cycle delay
  SIGNAL S_182 : std_logic;
  -- Clock cycle delay
  SIGNAL S_183 : std_logic;
  -- Clock cycle delay
  SIGNAL S_184 : std_logic;
  -- Clock cycle delay
  SIGNAL S_185 : std_logic;
  -- Clock cycle delay
  SIGNAL S_186 : std_logic;
  -- Clock cycle delay
  SIGNAL S_187 : std_logic;
  -- Clock cycle delay
  SIGNAL S_188 : std_logic;
  -- Clock cycle delay
  SIGNAL S_189 : std_logic;
  -- Clock cycle delay
  SIGNAL S_190 : std_logic;
  -- Clock cycle delay
  SIGNAL S_191 : std_logic;
  -- Clock cycle delay
  SIGNAL S_192 : std_logic;
  -- Clock cycle delay
  SIGNAL S_193 : std_logic;
  -- Clock cycle delay
  SIGNAL S_194 : std_logic;
  -- Bitwise OR
  SIGNAL S_195 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_196 : std_logic;
  -- Clock cycle delay
  SIGNAL S_197 : std_logic;
  -- Clock cycle delay
  SIGNAL S_198 : std_logic;
  -- Clock cycle delay
  SIGNAL S_199 : std_logic;
  -- Clock cycle delay
  SIGNAL S_200 : std_logic;
  -- Clock cycle delay
  SIGNAL S_201 : std_logic;
  -- Clock cycle delay
  SIGNAL S_202 : std_logic;
  -- Clock cycle delay
  SIGNAL S_203 : std_logic;
  -- Clock cycle delay
  SIGNAL S_204 : std_logic;
  -- Clock cycle delay
  SIGNAL S_205 : std_logic;
  -- Clock cycle delay
  SIGNAL S_206 : std_logic;
  -- Clock cycle delay
  SIGNAL S_207 : std_logic;
  -- Clock cycle delay
  SIGNAL S_208 : std_logic;
  -- Clock cycle delay
  SIGNAL S_209 : std_logic;
  -- Bitwise OR
  SIGNAL S_210 : unsigned(0 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL S_211 : std_logic;
  -- Bitwise OR
  SIGNAL S_212 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT C_1 : unsigned(0 DOWNTO 0) := "0";
  -- Concatenation
  SIGNAL MuxEnables : std_logic_vector(11 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_1 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_2 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_3 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_4 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_5 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_6 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_7 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_8 : std_logic_vector(16 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_9 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_10 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_11 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_12 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_13 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_14 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_15 : std_logic_vector(2 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_16 : std_logic_vector(4 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_17 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_18 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_19 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_20 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_21 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_22 : std_logic_vector(2 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_23 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_24 : std_logic_vector(1 DOWNTO 0);
  -- Switch Decoder
  SIGNAL SwitchOut : std_logic_vector(16 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast : unsigned(31 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_1 : unsigned(31 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_2 : unsigned(31 DOWNTO 0);
  -- Switch Decoder
  SIGNAL SwitchOut_1 : std_logic_vector(6 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_3 : unsigned(31 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_25 : std_logic_vector(1 DOWNTO 0);
  -- Switch Decoder
  SIGNAL SwitchOut_2 : std_logic_vector(4 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_26 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_27 : std_logic_vector(2 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_28 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_29 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_30 : std_logic_vector(1 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_4 : unsigned(15 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_31 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_32 : std_logic_vector(1 DOWNTO 0);
  -- Range cast
  SIGNAL RangeCast_5 : unsigned(0 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_33 : std_logic_vector(76 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_34 : std_logic_vector(76 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_12 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I0_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_11 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I1_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_10 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I2_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_9 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I3_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_8 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I4_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_7 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I5_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_6 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I6_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_5 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I7_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_4 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I8_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_3 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I9_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_2 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I10_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_1 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I11_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_A0 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_A1 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_A2_GND : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_A3_GND : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_0 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_DPRA0 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_DPRA1 : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND : std_logic;
  -- Component Connector
  SIGNAL I12_FIFORam_tx_dma_ctrl_opt_253_WE : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_A_AddrIn : std_logic_vector(6 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_D_DataIn : std_logic;
  -- Component Connector
  SIGNAL I0_dma_mem_tx_dma_ctrl_opt_299_WE : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_693_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_674_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_646_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_628_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_617_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_590_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_584_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_556_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_544_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_345_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_335_aclr_GND : std_logic;
  -- Component Connector
  SIGNAL I0_start_tx_dma_ctrl_opt_305_aclr_GND : std_logic;

BEGIN

  -- Processes:

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      IF ( PIN_RESET='1' ) THEN
        debug_status <= (OTHERS => '0');
        S_33 <= '0';
        S_27 <= "00";
        S_25 <= "00";
        dma_done_cnt <= "000";
        sw_str_ptr <= (OTHERS => '0');
        sw_last_end_ptr <= (OTHERS => '0');
        status_reg <= "0001";
        interrupt_mon <= (OTHERS => '0');
        interrupt_reset <= "0";
        interrupt_enable <= "0";
        timeout_enable <= "0";
        getNextDesc <= "0";
        newDescReady <= "0";
        Z_Dones_1_3 <= '0';
        S_17 <= '0';
        Z_Dones_2_1 <= '0';
        LoopZ_4 <= '0';
        SeqChain_79 <= '0';
        SeqChain_80 <= '0';
        SeqChain_81 <= '0';
        SeqChain_82 <= '0';
        Z_Dones_0 <= '0';
        LoopZ_8 <= '0';
        Z_Dones_1_4 <= '0';
        LoopZ_3 <= '0';
        LoopZ_7 <= '0';
        S_3 <= '0';
        S_2 <= '0';
        Z_Dones_0_1 <= '0';
        LoopZ_6 <= '0';
        SeqChain_28 <= '0';
        SeqChain_29 <= '0';
        S_5 <= '0';
        CForkIn_14 <= '0';
        SeqChain_63 <= '0';
        SeqChain_78 <= '0';
        SeqChain_77 <= '0';
        SeqChain_76 <= '0';
        SeqChain_75 <= '0';
        SeqChain_74 <= '0';
        SeqChain_73 <= '0';
        SeqChain_72 <= '0';
        SeqChain_71 <= '0';
        SeqChain_70 <= '0';
        SeqChain_69 <= '0';
        SeqChain_68 <= '0';
        SeqChain_67 <= '0';
        SeqChain_66 <= '0';
        SeqChain_65 <= '0';
      ELSE
        -- Update of register 'debug_status'
        IF ( debug_status_CE='1' ) THEN
          debug_status <= debug_status_MuxOut;
        END IF;

        S_33 <= to_stdlogic(S_32);

        -- Update of register 'IdReg0'
        IF ( to_stdlogic(AckOut)='1' ) THEN
          S_27 <= S_28;
        END IF;

        -- Update of register 'IdReg0'
        IF ( to_stdlogic(S_35)='1' ) THEN
          S_25 <= S_26;
        END IF;

        -- Update of register 'dma_done_cnt'
        IF ( dma_done_cnt_CE='1' ) THEN
          dma_done_cnt <= dma_done_cnt_MuxOut;
        END IF;

        -- Update of register 'sw_str_ptr'
        IF ( sw_str_ptr_CE='1' ) THEN
          sw_str_ptr <= sw_str_ptr_MuxOut;
        END IF;

        -- Update of register 'sw_last_end_ptr'
        IF ( sw_last_end_ptr_CE='1' ) THEN
          sw_last_end_ptr <= sw_last_end_ptr_MuxOut;
        END IF;

        -- Update of register 'status_reg'
        IF ( status_reg_CE='1' ) THEN
          status_reg <= status_reg_MuxOut;
        END IF;

        -- Update of register 'interrupt_mon'
        IF ( interrupt_mon_CE='1' ) THEN
          interrupt_mon <= interrupt_mon_MuxOut;
        END IF;

        -- Update of register 'interrupt_reset'
        IF ( interrupt_reset_CE='1' ) THEN
          interrupt_reset <= interrupt_reset_MuxOut;
        END IF;

        -- Update of register 'interrupt_enable'
        IF ( timeout_enable_CE='1' ) THEN
          interrupt_enable <= interrupt_enable_MuxOut;
        END IF;

        -- Update of register 'timeout_enable'
        IF ( timeout_enable_CE='1' ) THEN
          timeout_enable <= timeout_enable_MuxOut;
        END IF;

        -- Update of register 'getNextDesc'
        IF ( getNextDesc_CE='1' ) THEN
          getNextDesc <= getNextDesc_MuxOut;
        END IF;

        -- Update of register 'newDescReady'
        IF ( newDescReady_CE='1' ) THEN
          newDescReady <= newDescReady_MuxOut;
        END IF;

        Z_Dones_1_3 <= CForkIn_12;
        S_17 <= to_stdlogic(S_16);
        Z_Dones_2_1 <= S_71;
        LoopZ_4 <= CForkIn_11;
        SeqChain_79 <= CJoinOut;
        SeqChain_80 <= LinkWire_3;
        SeqChain_81 <= DefaultWire;
        SeqChain_82 <= S_13;
        Z_Dones_0 <= CForkIn_9;
        LoopZ_8 <= S_12;
        Z_Dones_1_4 <= S_11;
        LoopZ_3 <= CForkIn_6;
        LoopZ_7 <= S_9;
        S_3 <= S_0;
        S_2 <= False_fork_input;
        Z_Dones_0_1 <= S_10;
        LoopZ_6 <= S_6;
        SeqChain_28 <= SeqChain_17;
        SeqChain_29 <= WireFalse_7;
        S_5 <= False_fork_input_1;
        CForkIn_14 <= S_8;
        SeqChain_63 <= SeqChain_78;
        SeqChain_78 <= SeqChain_77;
        SeqChain_77 <= SeqChain_76;
        SeqChain_76 <= SeqChain_75;
        SeqChain_75 <= SeqChain_74;
        SeqChain_74 <= SeqChain_73;
        SeqChain_73 <= SeqChain_72;
        SeqChain_72 <= SeqChain_71;
        SeqChain_71 <= SeqChain_70;
        SeqChain_70 <= SeqChain_69;
        SeqChain_69 <= SeqChain_68;
        SeqChain_68 <= SeqChain_67;
        SeqChain_67 <= SeqChain_66;
        SeqChain_66 <= SeqChain_65;
        SeqChain_65 <= SeqChain_64;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( MuxEnables ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables IS
      WHEN "100000000000" => debug_status_MuxOut <= ConstOut_8;
      WHEN "010000000000" => debug_status_MuxOut <= ConstOut_30;
      WHEN "001000000000" => debug_status_MuxOut <= ConstOut_43;
      WHEN "000100000000" => debug_status_MuxOut <= ConstOut_44;
      WHEN "000010000000" => debug_status_MuxOut <= ConstOut_46;
      WHEN "000001000000" => debug_status_MuxOut <= ConstOut_47;
      WHEN "000000100000" => debug_status_MuxOut <= ConstOut_48;
      WHEN "000000010000" => debug_status_MuxOut <= ConstOut_49;
      WHEN "000000001000" => debug_status_MuxOut <= ConstOut_97;
      WHEN "000000000100" => debug_status_MuxOut <= ConstOut_98;
      WHEN "000000000010" => debug_status_MuxOut <= ConstOut_99;
      WHEN "000000000001" => debug_status_MuxOut <= ConstOut_100;
      WHEN OTHERS => debug_status_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_125, MuxEnables_1 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_1 IS
      WHEN "10" => ifc_interrupt <= BinOpOut_125;
      WHEN "01" => ifc_interrupt <= ifc_interrupt_1;
      WHEN OTHERS => ifc_interrupt <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_2 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_2 IS
      WHEN "10" => ifc_interrupt0 <= ConstOut_2;
      WHEN "01" => ifc_interrupt0 <= ConstOut;
      WHEN OTHERS => ifc_interrupt0 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_3 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_3 IS
      WHEN "10" => ifc_interrupt1 <= ConstOut_2;
      WHEN "01" => ifc_interrupt1 <= ConstOut;
      WHEN OTHERS => ifc_interrupt1 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( ConstOut_107, MuxEnables_4 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_4 IS
      WHEN "10" => ifc_enable <= ConstOut_107;
      WHEN "01" => ifc_enable <= ConstOut;
      WHEN OTHERS => ifc_enable <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_120, MuxEnables_5 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_5 IS
      WHEN "10" => ifc_buf_newlen <= BinOpOut_120;
      WHEN "01" => ifc_buf_newlen <= ConstOut_42;
      WHEN OTHERS => ifc_buf_newlen <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_6 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_6 IS
      WHEN "10" => ifc_desc_read <= ConstOut_2;
      WHEN "01" => ifc_desc_read <= ConstOut;
      WHEN OTHERS => ifc_desc_read <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_131, MuxEnables_7 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_7 IS
      WHEN "10" => ifc_sw_ardy <= BinOpOut_131;
      WHEN "01" => ifc_sw_ardy <= ConstOut;
      WHEN OTHERS => ifc_sw_ardy <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      -- Update of register 'ifc_sw_drd'
      IF ( ifc_sw_drd_CE='1' ) THEN
        ifc_sw_drd <= ifc_sw_drd_MuxOut;
      END IF;

      -- Update of register 'int_timeout'
      IF ( int_timeout_CE='1' ) THEN
        int_timeout <= int_timeout_MuxOut;
      END IF;

      -- Update of register 'length'
      IF ( S_0='1' ) THEN
        length <= S_29;
      END IF;

      -- Update of register 'data_length'
      IF ( data_length_CE='1' ) THEN
        data_length <= data_length_MuxOut;
      END IF;

      -- Update of register 'page_offset'
      IF ( need_new_desc_CE='1' ) THEN
        page_offset <= page_offset_MuxOut;
      END IF;

      -- Update of register 'page_free_space'
      IF ( need_new_desc_CE='1' ) THEN
        page_free_space <= page_free_space_MuxOut;
      END IF;

      -- Update of register 'need_new_desc'
      IF ( need_new_desc_CE='1' ) THEN
        need_new_desc <= need_new_desc_MuxOut;
      END IF;

      -- Update of register 'mem_length'
      IF ( WireFalse_9='1' ) THEN
        mem_length <= BinOpOut_51;
      END IF;

      -- Update of register 'mem_l_addr'
      IF ( WireFalse_9='1' ) THEN
        mem_l_addr <= BinOpOut_60;
      END IF;

      -- Update of register 'parts'
      IF ( parts_CE='1' ) THEN
        parts <= parts_MuxOut;
      END IF;

      -- Update of register 'hw_buffer_free_space'
      IF ( CForkIn_1='1' ) THEN
        hw_buffer_free_space <= BinOpOut_7;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( sw_str_ptr, sw_end_ptr, interrupt_reg, timeout_reg, sw_buffer_mask, BinOpOut_47, BinOpOut_138, 
    BinOpOut_139, BinOpOut_140, BinOpOut_141, BinOpOut_142, BinOpOut_143, BinOpOut_144, BinOpOut_145, 
    BinOpOut_146, BinOpOut_147, MuxEnables_8 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_8 IS
      WHEN "10000000000000000" => ifc_sw_drd_MuxOut <= BinOpOut_138;
      WHEN "01000000000000000" => ifc_sw_drd_MuxOut <= BinOpOut_139;
      WHEN "00100000000000000" => ifc_sw_drd_MuxOut <= sw_str_ptr;
      WHEN "00010000000000000" => ifc_sw_drd_MuxOut <= sw_end_ptr;
      WHEN "00001000000000000" => ifc_sw_drd_MuxOut <= sw_buffer_mask;
      WHEN "00000100000000000" => ifc_sw_drd_MuxOut <= interrupt_reg;
      WHEN "00000010000000000" => ifc_sw_drd_MuxOut <= timeout_reg;
      WHEN "00000001000000000" => ifc_sw_drd_MuxOut <= BinOpOut_47;
      WHEN "00000000100000000" => ifc_sw_drd_MuxOut <= BinOpOut_140;
      WHEN "00000000010000000" => ifc_sw_drd_MuxOut <= BinOpOut_141;
      WHEN "00000000001000000" => ifc_sw_drd_MuxOut <= BinOpOut_142;
      WHEN "00000000000100000" => ifc_sw_drd_MuxOut <= BinOpOut_143;
      WHEN "00000000000010000" => ifc_sw_drd_MuxOut <= BinOpOut_144;
      WHEN "00000000000001000" => ifc_sw_drd_MuxOut <= BinOpOut_145;
      WHEN "00000000000000100" => ifc_sw_drd_MuxOut <= BinOpOut_146;
      WHEN "00000000000000010" => ifc_sw_drd_MuxOut <= BinOpOut_147;
      WHEN "00000000000000001" => ifc_sw_drd_MuxOut <= ConstOut_105;
      WHEN OTHERS => ifc_sw_drd_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( S_23, MuxEnables_9 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_9 IS
      WHEN "10" => ifc_dma_dout <= S_23;
      WHEN "01" => ifc_dma_dout <= ConstOut;
      WHEN OTHERS => ifc_dma_dout <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_10 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_10 IS
      WHEN "10" => ifc_dma_req <= ConstOut_2;
      WHEN "01" => ifc_dma_req <= ConstOut;
      WHEN OTHERS => ifc_dma_req <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( S_33, S_35, MuxEnables_11 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_11 IS
      WHEN "10" => S_32 <= to_unsigned(S_33);
      WHEN "01" => S_32 <= S_35;
      WHEN OTHERS => S_32 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_12 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_12 IS
      WHEN "10" => dma_done_release <= ConstOut_2;
      WHEN "01" => dma_done_release <= ConstOut;
      WHEN OTHERS => dma_done_release <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_116, BinOpOut_118, MuxEnables_13 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_13 IS
      WHEN "10" => dma_done_cnt_MuxOut <= BinOpOut_116;
      WHEN "01" => dma_done_cnt_MuxOut <= BinOpOut_118;
      WHEN OTHERS => dma_done_cnt_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( SW_DWR, BinOpOut_122, MuxEnables_14 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_14 IS
      WHEN "10" => sw_str_ptr_MuxOut <= BinOpOut_122;
      WHEN "01" => sw_str_ptr_MuxOut <= UNSIGNED(SW_DWR);
      WHEN OTHERS => sw_str_ptr_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( sw_str_ptr, BinOpOut_55, BinOpOut_56, MuxEnables_15 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_15 IS
      WHEN "100" => sw_last_end_ptr_MuxOut <= sw_str_ptr;
      WHEN "010" => sw_last_end_ptr_MuxOut <= BinOpOut_55;
      WHEN "001" => sw_last_end_ptr_MuxOut <= BinOpOut_56;
      WHEN OTHERS => sw_last_end_ptr_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_16 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_16 IS
      WHEN "10000" => status_reg_MuxOut <= ConstOut_5;
      WHEN "01000" => status_reg_MuxOut <= ConstOut_29;
      WHEN "00100" => status_reg_MuxOut <= ConstOut_28;
      WHEN "00010" => status_reg_MuxOut <= ConstOut_27;
      WHEN "00001" => status_reg_MuxOut <= ConstOut_82;
      WHEN OTHERS => status_reg_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_121, BinOpOut_124, MuxEnables_17 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_17 IS
      WHEN "10" => interrupt_mon_MuxOut <= BinOpOut_121;
      WHEN "01" => interrupt_mon_MuxOut <= BinOpOut_124;
      WHEN OTHERS => interrupt_mon_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_18 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_18 IS
      WHEN "10" => interrupt_reset_MuxOut <= ConstOut;
      WHEN "01" => interrupt_reset_MuxOut <= ConstOut_2;
      WHEN OTHERS => interrupt_reset_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_135, MuxEnables_19 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_19 IS
      WHEN "10" => interrupt_enable_MuxOut <= ConstOut;
      WHEN "01" => interrupt_enable_MuxOut <= BinOpOut_135;
      WHEN OTHERS => interrupt_enable_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_136, MuxEnables_20 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_20 IS
      WHEN "10" => timeout_enable_MuxOut <= ConstOut;
      WHEN "01" => timeout_enable_MuxOut <= BinOpOut_136;
      WHEN OTHERS => timeout_enable_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_21 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_21 IS
      WHEN "10" => hw_buffer_full <= ConstOut_2;
      WHEN "01" => hw_buffer_full <= ConstOut;
      WHEN OTHERS => hw_buffer_full <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( need_new_desc, MuxEnables_22 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_22 IS
      WHEN "100" => getNextDesc_MuxOut <= ConstOut;
      WHEN "010" => getNextDesc_MuxOut <= ConstOut_2;
      WHEN "001" => getNextDesc_MuxOut <= need_new_desc;
      WHEN OTHERS => getNextDesc_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_23 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_23 IS
      WHEN "10" => newDescReady_MuxOut <= ConstOut;
      WHEN "01" => newDescReady_MuxOut <= ConstOut_2;
      WHEN OTHERS => newDescReady_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( Z_Dones_1_3, S_17, MuxEnables_24 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_24 IS
      WHEN "10" => LoopZ_5 <= to_unsigned(S_17);
      WHEN "01" => LoopZ_5 <= to_unsigned(Z_Dones_1_3);
      WHEN OTHERS => LoopZ_5 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_133, WireTrue_17 ) BEGIN
    -- Switch Decoder
    CASE BinOpOut_133 IS
      WHEN "000000" => SwitchOut <= WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "000100" => SwitchOut <= '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "001000" => SwitchOut <= '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "001100" => SwitchOut <= '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "010000" => SwitchOut <= '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "010100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "011000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "011100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "100000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "100100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "101000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_17 & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "101100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0' & '0' & '0' & '0' & '0';
      WHEN "110000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0' & '0' & '0' & '0';
      WHEN "110100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0' & '0' & '0';
      WHEN "111000" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0' & '0';
      WHEN "111100" => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17 & '0';
      WHEN OTHERS => SwitchOut <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        WireTrue_17;
    END CASE;
  END PROCESS;

  PROCESS( WireTrue_16, BinOpOut_133 ) BEGIN
    -- Switch Decoder
    CASE BinOpOut_133 IS
      WHEN "000000" => SwitchOut_1 <= WireTrue_16 & '0' & '0' & '0' & '0' & '0' & '0';
      WHEN "001000" => SwitchOut_1 <= '0' & WireTrue_16 & '0' & '0' & '0' & '0' & '0';
      WHEN "001100" => SwitchOut_1 <= '0' & '0' & WireTrue_16 & '0' & '0' & '0' & '0';
      WHEN "010000" => SwitchOut_1 <= '0' & '0' & '0' & WireTrue_16 & '0' & '0' & '0';
      WHEN "010100" => SwitchOut_1 <= '0' & '0' & '0' & '0' & WireTrue_16 & '0' & '0';
      WHEN "011000" => SwitchOut_1 <= '0' & '0' & '0' & '0' & '0' & WireTrue_16 & '0';
      WHEN OTHERS => SwitchOut_1 <= '0' & '0' & '0' & '0' & '0' & '0' & WireTrue_16;
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_25 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_25 IS
      WHEN "10" => ConstOut_107 <= ConstOut;
      WHEN "01" => ConstOut_107 <= ConstOut_2;
      WHEN OTHERS => ConstOut_107 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( control_reg, CForkIn_10 ) BEGIN
    -- Switch Decoder
    CASE control_reg IS
      WHEN "000" => SwitchOut_2 <= CForkIn_10 & '0' & '0' & '0' & '0';
      WHEN "100" => SwitchOut_2 <= '0' & CForkIn_10 & '0' & '0' & '0';
      WHEN "001" => SwitchOut_2 <= '0' & '0' & CForkIn_10 & '0' & '0';
      WHEN "010" => SwitchOut_2 <= '0' & '0' & '0' & CForkIn_10 & '0';
      WHEN OTHERS => SwitchOut_2 <= '0' & '0' & '0' & '0' & CForkIn_10;
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_128, MuxEnables_26 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_26 IS
      WHEN "10" => int_timeout_MuxOut <= ConstOut_105;
      WHEN "01" => int_timeout_MuxOut <= BinOpOut_128;
      WHEN OTHERS => int_timeout_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_31, BinOpOut_47, BinOpOut_49, MuxEnables_27 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_27 IS
      WHEN "100" => data_length_MuxOut <= BinOpOut_31;
      WHEN "010" => data_length_MuxOut <= BinOpOut_47;
      WHEN "001" => data_length_MuxOut <= BinOpOut_49;
      WHEN OTHERS => data_length_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_52, MuxEnables_28 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_28 IS
      WHEN "10" => page_offset_MuxOut <= ConstOut_7;
      WHEN "01" => page_offset_MuxOut <= BinOpOut_52;
      WHEN OTHERS => page_offset_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_54, MuxEnables_29 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_29 IS
      WHEN "10" => page_free_space_MuxOut <= ConstOut_6;
      WHEN "01" => page_free_space_MuxOut <= BinOpOut_54;
      WHEN OTHERS => page_free_space_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( MuxEnables_30 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_30 IS
      WHEN "10" => need_new_desc_MuxOut <= ConstOut_2;
      WHEN "01" => need_new_desc_MuxOut <= ConstOut;
      WHEN OTHERS => need_new_desc_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      IF ( PIN_RESET='1' ) THEN
        SeqChain_64 <= '0';
        SeqChain_31 <= '0';
        SeqChain_62 <= '0';
        SeqChain_61 <= '0';
        SeqChain_60 <= '0';
        SeqChain_59 <= '0';
        SeqChain_58 <= '0';
        SeqChain_57 <= '0';
        SeqChain_56 <= '0';
        SeqChain_55 <= '0';
        SeqChain_54 <= '0';
        SeqChain_53 <= '0';
        SeqChain_52 <= '0';
        SeqChain_51 <= '0';
        SeqChain_50 <= '0';
        SeqChain_49 <= '0';
        SeqChain_48 <= '0';
        SeqChain_47 <= '0';
        SeqChain_46 <= '0';
        SeqChain_45 <= '0';
        SeqChain_44 <= '0';
        SeqChain_43 <= '0';
        SeqChain_42 <= '0';
        SeqChain_41 <= '0';
        SeqChain_40 <= '0';
        SeqChain_39 <= '0';
        SeqChain_38 <= '0';
        SeqChain_37 <= '0';
        SeqChain_36 <= '0';
        SeqChain_35 <= '0';
        SeqChain_34 <= '0';
        SeqChain_33 <= '0';
        SeqChain_32 <= '0';
        Z_Dones_3_1 <= '0';
        CForkIn_13 <= '0';
        Z_Dones_1_2 <= '0';
        Z_Dones_2 <= '0';
        SeqChain_17 <= '0';
        SeqChain_27 <= '0';
        SeqChain_26 <= '0';
        SeqChain_25 <= '0';
        SeqChain_24 <= '0';
        SeqChain_23 <= '0';
        SeqChain_22 <= '0';
        SeqChain_21 <= '0';
        SeqChain_20 <= '0';
        SeqChain_19 <= '0';
        SeqChain_18 <= '0';
        Z_Dones_1_1 <= '0';
        LoopZ_2 <= '0';
      ELSE
        SeqChain_64 <= SeqChain_31;
        SeqChain_31 <= SeqChain_62;
        SeqChain_62 <= SeqChain_61;
        SeqChain_61 <= SeqChain_60;
        SeqChain_60 <= SeqChain_59;
        SeqChain_59 <= SeqChain_58;
        SeqChain_58 <= SeqChain_57;
        SeqChain_57 <= SeqChain_56;
        SeqChain_56 <= SeqChain_55;
        SeqChain_55 <= SeqChain_54;
        SeqChain_54 <= SeqChain_53;
        SeqChain_53 <= SeqChain_52;
        SeqChain_52 <= SeqChain_51;
        SeqChain_51 <= SeqChain_50;
        SeqChain_50 <= SeqChain_49;
        SeqChain_49 <= SeqChain_48;
        SeqChain_48 <= SeqChain_47;
        SeqChain_47 <= SeqChain_46;
        SeqChain_46 <= SeqChain_45;
        SeqChain_45 <= SeqChain_44;
        SeqChain_44 <= SeqChain_43;
        SeqChain_43 <= SeqChain_42;
        SeqChain_42 <= SeqChain_41;
        SeqChain_41 <= SeqChain_40;
        SeqChain_40 <= SeqChain_39;
        SeqChain_39 <= SeqChain_38;
        SeqChain_38 <= SeqChain_37;
        SeqChain_37 <= SeqChain_36;
        SeqChain_36 <= SeqChain_35;
        SeqChain_35 <= SeqChain_34;
        SeqChain_34 <= SeqChain_33;
        SeqChain_33 <= SeqChain_32;
        SeqChain_32 <= Z_Dones_3_1;
        Z_Dones_3_1 <= WireFalse_9;
        CForkIn_13 <= S_7;
        Z_Dones_1_2 <= WireTrue_4;
        Z_Dones_2 <= BodyStart_2;
        SeqChain_17 <= SeqChain_27;
        SeqChain_27 <= SeqChain_26;
        SeqChain_26 <= SeqChain_25;
        SeqChain_25 <= SeqChain_24;
        SeqChain_24 <= SeqChain_23;
        SeqChain_23 <= SeqChain_22;
        SeqChain_22 <= SeqChain_21;
        SeqChain_21 <= SeqChain_20;
        SeqChain_20 <= SeqChain_19;
        SeqChain_19 <= SeqChain_18;
        SeqChain_18 <= Z_Dones_1_1;
        Z_Dones_1_1 <= WireFalse_6;
        LoopZ_2 <= WireTrue_3;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      IF ( PIN_RESET='1' ) THEN
        SeqChain_16 <= '0';
        SeqChain_15 <= '0';
        SeqChain_14 <= '0';
        SeqChain_13 <= '0';
        SeqChain_12 <= '0';
        SeqChain_11 <= '0';
        SeqChain_10 <= '0';
        SeqChain_9 <= '0';
        SeqChain_8 <= '0';
        SeqChain_7 <= '0';
        SeqChain_6 <= '0';
        SeqChain_5 <= '0';
        SeqChain_4 <= '0';
        SeqChain_3 <= '0';
        SeqChain_2 <= '0';
        Z_Dones_6 <= '0';
        LoopZ_1 <= '0';
        SeqChain_1 <= '0';
        LoopZ <= '0';
        Z_Dones_3 <= '0';
        Z_Dones_1 <= '0';
        S_20 <= '0';
        BodyEnd_1 <= '0';
        BodyEnd <= '0';
        S_211 <= '0';
        S_209 <= '0';
        S_208 <= '0';
        S_207 <= '0';
        S_206 <= '0';
        S_205 <= '0';
        S_204 <= '0';
        S_203 <= '0';
        S_202 <= '0';
        S_201 <= '0';
        S_200 <= '0';
        S_199 <= '0';
        S_198 <= '0';
        S_197 <= '0';
        S_196 <= '0';
        S_194 <= '0';
        S_193 <= '0';
        S_192 <= '0';
        S_191 <= '0';
        S_190 <= '0';
        S_189 <= '0';
        S_188 <= '0';
        S_187 <= '0';
        S_186 <= '0';
        S_185 <= '0';
        S_184 <= '0';
      ELSE
        SeqChain_16 <= SeqChain_15;
        SeqChain_15 <= SeqChain_14;
        SeqChain_14 <= SeqChain_13;
        SeqChain_13 <= SeqChain_12;
        SeqChain_12 <= SeqChain_11;
        SeqChain_11 <= SeqChain_10;
        SeqChain_10 <= SeqChain_9;
        SeqChain_9 <= SeqChain_8;
        SeqChain_8 <= SeqChain_7;
        SeqChain_7 <= SeqChain_6;
        SeqChain_6 <= SeqChain_5;
        SeqChain_5 <= SeqChain_4;
        SeqChain_4 <= SeqChain_3;
        SeqChain_3 <= SeqChain_2;
        SeqChain_2 <= Z_Dones_6;
        Z_Dones_6 <= WireTrue_1;
        LoopZ_1 <= CForkIn_1;
        SeqChain_1 <= WireFalse_1;
        LoopZ <= SeqChain_1;
        Z_Dones_3 <= WireTrue;
        Z_Dones_1 <= WireFalse;
        S_20 <= to_stdlogic(S_19);
        BodyEnd_1 <= BodyStart_1;
        BodyEnd <= BodyStart;
        S_211 <= to_stdlogic(S_212);
        S_209 <= to_stdlogic(S_210);
        S_208 <= S_209;
        S_207 <= S_184;
        S_206 <= S_207;
        S_205 <= S_206;
        S_204 <= S_205;
        S_203 <= S_204;
        S_202 <= S_203;
        S_201 <= S_202;
        S_200 <= S_201;
        S_199 <= S_200;
        S_198 <= S_199;
        S_197 <= S_198;
        S_196 <= S_197;
        S_194 <= to_stdlogic(S_195);
        S_193 <= S_194;
        S_192 <= S_193;
        S_191 <= S_192;
        S_190 <= S_191;
        S_189 <= S_190;
        S_188 <= S_189;
        S_187 <= S_188;
        S_186 <= S_187;
        S_185 <= S_186;
        S_184 <= S_134;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( BinOpOut_4, MuxEnables_31 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_31 IS
      WHEN "10" => parts_MuxOut <= ConstOut_1;
      WHEN "01" => parts_MuxOut <= BinOpOut_4;
      WHEN OTHERS => parts_MuxOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( Z_Dones_1, S_20, MuxEnables_32 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_32 IS
      WHEN "10" => SeqChain <= to_unsigned(S_20);
      WHEN "01" => SeqChain <= to_unsigned(Z_Dones_1);
      WHEN OTHERS => SeqChain <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      IF ( PIN_RESET='1' ) THEN
        S_183 <= '0';
        S_182 <= '0';
        S_181 <= '0';
        S_180 <= '0';
        S_179 <= '0';
        S_178 <= '0';
        S_177 <= '0';
        S_176 <= '0';
        S_175 <= '0';
        S_174 <= '0';
        S_173 <= '0';
        S_172 <= '0';
        S_171 <= '0';
        S_170 <= '0';
        S_169 <= '0';
        S_168 <= '0';
        S_167 <= '0';
        S_166 <= '0';
        S_165 <= '0';
        S_164 <= '0';
        S_163 <= '0';
        S_162 <= '0';
        S_161 <= '0';
        S_160 <= '0';
        S_159 <= '0';
        S_158 <= '0';
        S_157 <= '0';
        S_156 <= '0';
        S_155 <= '0';
        S_154 <= '0';
        S_153 <= '0';
        S_152 <= '0';
        S_151 <= '0';
        S_150 <= '0';
        S_149 <= '0';
        S_148 <= '0';
        S_147 <= '0';
        S_146 <= '0';
        S_145 <= '0';
        S_144 <= '0';
        S_143 <= '0';
        S_142 <= '0';
        S_141 <= '0';
        S_140 <= '0';
        S_139 <= '0';
        S_138 <= '0';
        S_137 <= '0';
        S_136 <= '0';
        S_134 <= '0';
        S_133 <= '0';
      ELSE
        S_183 <= S_108;
        S_182 <= S_183;
        S_181 <= S_182;
        S_180 <= S_181;
        S_179 <= S_180;
        S_178 <= S_179;
        S_177 <= S_178;
        S_176 <= S_177;
        S_175 <= S_176;
        S_174 <= S_175;
        S_173 <= S_174;
        S_172 <= S_173;
        S_171 <= S_172;
        S_170 <= S_171;
        S_169 <= S_170;
        S_168 <= S_169;
        S_167 <= S_168;
        S_166 <= S_167;
        S_165 <= S_166;
        S_164 <= S_165;
        S_163 <= S_164;
        S_162 <= S_163;
        S_161 <= S_162;
        S_160 <= S_161;
        S_159 <= S_160;
        S_158 <= S_159;
        S_157 <= S_158;
        S_156 <= S_83;
        S_155 <= S_156;
        S_154 <= S_155;
        S_153 <= S_154;
        S_152 <= S_153;
        S_151 <= S_152;
        S_150 <= S_151;
        S_149 <= S_150;
        S_148 <= S_149;
        S_147 <= S_148;
        S_146 <= S_147;
        S_145 <= S_146;
        S_144 <= S_145;
        S_143 <= S_144;
        S_142 <= S_143;
        S_141 <= S_142;
        S_140 <= S_141;
        S_139 <= S_140;
        S_138 <= S_139;
        S_137 <= S_138;
        S_136 <= S_137;
        S_134 <= to_stdlogic(S_135);
        S_133 <= S_99;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      IF ( PIN_RESET='1' ) THEN
        S_132 <= '0';
        S_131 <= '0';
        S_130 <= '0';
        S_129 <= '0';
        S_128 <= '0';
        S_127 <= '0';
        S_126 <= '0';
        S_125 <= '0';
        S_124 <= '0';
        S_123 <= '0';
        S_122 <= '0';
        S_121 <= '0';
        S_120 <= '0';
        S_119 <= '0';
        S_118 <= '0';
        S_117 <= '0';
        S_115 <= '0';
        S_113 <= '0';
        S_112 <= '0';
        S_111 <= '0';
        S_110 <= '0';
        S_109 <= '0';
        S_108 <= '0';
        S_106 <= '0';
        S_105 <= '0';
        S_104 <= '0';
        S_103 <= '0';
        S_102 <= '0';
        S_101 <= '0';
        S_100 <= '0';
        S_99 <= '0';
        S_98 <= '0';
        S_97 <= '0';
        S_95 <= '0';
        S_94 <= '0';
        S_92 <= '0';
        S_91 <= '0';
        S_90 <= '0';
        S_89 <= '0';
        S_87 <= '0';
        S_86 <= '0';
        S_84 <= '0';
        S_83 <= '0';
        S_81 <= '0';
        S_80 <= '0';
        S_79 <= '0';
        S_78 <= '0';
        S_77 <= '0';
        S_76 <= '0';
        S_75 <= '0';
      ELSE
        S_132 <= S_133;
        S_131 <= S_132;
        S_130 <= S_131;
        S_129 <= S_130;
        S_128 <= S_129;
        S_127 <= S_128;
        S_126 <= S_127;
        S_125 <= S_126;
        S_124 <= S_125;
        S_123 <= S_124;
        S_122 <= S_123;
        S_121 <= S_122;
        S_120 <= S_121;
        S_119 <= S_120;
        S_118 <= S_119;
        S_117 <= S_118;
        S_115 <= to_stdlogic(S_116);
        S_113 <= to_stdlogic(S_114);
        S_112 <= S_113;
        S_111 <= S_112;
        S_110 <= S_111;
        S_109 <= S_110;
        S_108 <= S_109;
        S_106 <= to_stdlogic(S_107);
        S_105 <= S_106;
        S_104 <= S_105;
        S_103 <= S_104;
        S_102 <= S_103;
        S_101 <= S_102;
        S_100 <= S_101;
        S_99 <= S_100;
        S_98 <= S_86;
        S_97 <= S_98;
        S_95 <= to_stdlogic(S_96);
        S_94 <= S_95;
        S_92 <= to_stdlogic(S_93);
        S_91 <= S_92;
        S_90 <= S_91;
        S_89 <= S_90;
        S_87 <= to_stdlogic(S_88);
        S_86 <= S_87;
        S_84 <= to_stdlogic(S_85);
        S_83 <= S_84;
        S_81 <= to_stdlogic(S_82);
        S_80 <= S_81;
        S_79 <= S_80;
        S_78 <= S_79;
        S_77 <= S_78;
        S_76 <= S_77;
        S_75 <= S_76;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( PIN_CLK ) BEGIN
    IF rising_edge( PIN_CLK ) THEN
      IF ( PIN_RESET='1' ) THEN
        S_74 <= '0';
        S_73 <= '0';
        S_72 <= '0';
        sw_buffer_mask <= (OTHERS => '0');
        timeout_reg <= "00000000000000000000000000001010";
        interrupt_reg <= (OTHERS => '0');
        control_reg <= "100";
        hw_str_ptr <= (OTHERS => '0');
        hw_end_ptr <= (OTHERS => '0');
        hw_buffer_mask <= (OTHERS => '0');
        sw_end_ptr <= (OTHERS => '0');
        ifc_sw_drdy <= "0";
        cnt_desc_empty <= "00000000";
        cnt_down_descs <= "00000000";
        cnt_no_space <= "00000000";
        cnt_space_available <= "00000000";
        cnt_not_buf_rellen <= "00000000";
        cnt_dma_ack <= "00000000";
      ELSE
        S_74 <= S_75;
        S_73 <= S_74;
        S_72 <= S_73;

        -- Update of register 'sw_buffer_mask'
        IF ( LinkWire_3_1='1' ) THEN
          sw_buffer_mask <= UNSIGNED(SW_DWR);
        END IF;

        -- Update of register 'timeout_reg'
        IF ( LinkWire_5='1' ) THEN
          timeout_reg <= UNSIGNED(SW_DWR);
        END IF;

        -- Update of register 'interrupt_reg'
        IF ( LinkWire_4='1' ) THEN
          interrupt_reg <= UNSIGNED(SW_DWR);
        END IF;

        -- Update of register 'control_reg'
        IF ( LinkWire_0='1' ) THEN
          control_reg <= BinOpOut_134;
        END IF;

        -- Update of register 'hw_str_ptr'
        IF ( WireTrue_14='1' ) THEN
          hw_str_ptr <= BinOpOut_129;
        END IF;

        -- Update of register 'hw_end_ptr'
        IF ( WireFalse_10='1' ) THEN
          hw_end_ptr <= BinOpOut_111;
        END IF;

        -- Update of register 'hw_buffer_mask'
        IF ( WireTrue_1='1' ) THEN
          hw_buffer_mask <= BinOpOut_9;
        END IF;

        -- Update of register 'sw_end_ptr'
        IF ( LinkWire_2_1='1' ) THEN
          sw_end_ptr <= UNSIGNED(SW_DWR);
        END IF;

        -- Update of register 'ifc_sw_drdy'
        IF ( CForkIn_12='1' ) THEN
          ifc_sw_drdy <= to_unsigned(SW_RD);
        END IF;

        -- Update of register 'cnt_desc_empty'
        IF ( BodyStart_1='1' ) THEN
          cnt_desc_empty <= BinOpOut_2;
        END IF;

        -- Update of register 'cnt_down_descs'
        IF ( WireTrue='1' ) THEN
          cnt_down_descs <= BinOpOut_5;
        END IF;

        -- Update of register 'cnt_no_space'
        IF ( BodyStart_2='1' ) THEN
          cnt_no_space <= BinOpOut_45;
        END IF;

        -- Update of register 'cnt_space_available'
        IF ( WireFalse_7='1' ) THEN
          cnt_space_available <= BinOpOut_46;
        END IF;

        -- Update of register 'cnt_not_buf_rellen'
        IF ( WireTrue_6='1' ) THEN
          cnt_not_buf_rellen <= BinOpOut_57;
        END IF;

        -- Update of register 'cnt_dma_ack'
        IF ( WireFalse_10='1' ) THEN
          cnt_dma_ack <= BinOpOut_112;
        END IF;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( DESC_DO, BinOpOut_11, BinOpOut_12, BinOpOut_13, BinOpOut_14, BinOpOut_15, BinOpOut_16, BinOpOut_17, 
    BinOpOut_18, BinOpOut_19, BinOpOut_20, BinOpOut_21, BinOpOut_22, BinOpOut_23, BinOpOut_24, BinOpOut_25, 
    BinOpOut_26, BinOpOut_32, BinOpOut_33, BinOpOut_34, BinOpOut_35, BinOpOut_36, BinOpOut_37, BinOpOut_38, 
    BinOpOut_39, BinOpOut_40, BinOpOut_41, BinOpOut_42, BinOpOut_43, BinOpOut_61, BinOpOut_62, BinOpOut_63, 
    BinOpOut_64, BinOpOut_65, BinOpOut_66, BinOpOut_67, BinOpOut_68, BinOpOut_69, BinOpOut_70, BinOpOut_71, 
    BinOpOut_72, BinOpOut_73, BinOpOut_74, BinOpOut_75, BinOpOut_76, BinOpOut_77, BinOpOut_78, BinOpOut_79, 
    BinOpOut_80, BinOpOut_81, BinOpOut_82, BinOpOut_83, BinOpOut_84, BinOpOut_85, BinOpOut_86, BinOpOut_87, 
    BinOpOut_88, BinOpOut_89, BinOpOut_90, BinOpOut_91, BinOpOut_92, BinOpOut_94, BinOpOut_95, BinOpOut_96, 
    BinOpOut_97, BinOpOut_98, BinOpOut_99, BinOpOut_100, BinOpOut_101, BinOpOut_102, BinOpOut_103, BinOpOut_104, 
    BinOpOut_105, BinOpOut_106, BinOpOut_107, BinOpOut_108, BinOpOut_109, MuxEnables_33 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_33 IS
      WHEN "10000000000000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        UNSIGNED(DESC_DO);
      WHEN "01000000000000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_11;
      WHEN "00100000000000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_12;
      WHEN "00010000000000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_13;
      WHEN "00001000000000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_14;
      WHEN "00000100000000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_15;
      WHEN "00000010000000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_16;
      WHEN "00000001000000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_17;
      WHEN "00000000100000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_18;
      WHEN "00000000010000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_19;
      WHEN "00000000001000000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_20;
      WHEN "00000000000100000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_21;
      WHEN "00000000000010000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_22;
      WHEN "00000000000001000000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_23;
      WHEN "00000000000000100000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_24;
      WHEN "00000000000000010000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_25;
      WHEN "00000000000000001000000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_26;
      WHEN "00000000000000000100000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_32;
      WHEN "00000000000000000010000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_33;
      WHEN "00000000000000000001000000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_34;
      WHEN "00000000000000000000100000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_35;
      WHEN "00000000000000000000010000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_36;
      WHEN "00000000000000000000001000000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_37;
      WHEN "00000000000000000000000100000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_38;
      WHEN "00000000000000000000000010000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_39;
      WHEN "00000000000000000000000001000000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_40;
      WHEN "00000000000000000000000000100000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_41;
      WHEN "00000000000000000000000000010000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_42;
      WHEN "00000000000000000000000000001000000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_43;
      WHEN "00000000000000000000000000000100000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_61;
      WHEN "00000000000000000000000000000010000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_62;
      WHEN "00000000000000000000000000000001000000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_63;
      WHEN "00000000000000000000000000000000100000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_64;
      WHEN "00000000000000000000000000000000010000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_65;
      WHEN "00000000000000000000000000000000001000000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_66;
      WHEN "00000000000000000000000000000000000100000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_67;
      WHEN "00000000000000000000000000000000000010000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_68;
      WHEN "00000000000000000000000000000000000001000000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_69;
      WHEN "00000000000000000000000000000000000000100000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_70;
      WHEN "00000000000000000000000000000000000000010000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_71;
      WHEN "00000000000000000000000000000000000000001000000000000000000000000000000000000" => S_22 <= 
        BinOpOut_72;
      WHEN "00000000000000000000000000000000000000000100000000000000000000000000000000000" => S_22 <= 
        BinOpOut_73;
      WHEN "00000000000000000000000000000000000000000010000000000000000000000000000000000" => S_22 <= 
        BinOpOut_74;
      WHEN "00000000000000000000000000000000000000000001000000000000000000000000000000000" => S_22 <= 
        BinOpOut_75;
      WHEN "00000000000000000000000000000000000000000000100000000000000000000000000000000" => S_22 <= 
        BinOpOut_76;
      WHEN "00000000000000000000000000000000000000000000010000000000000000000000000000000" => S_22 <= 
        BinOpOut_77;
      WHEN "00000000000000000000000000000000000000000000001000000000000000000000000000000" => S_22 <= 
        BinOpOut_78;
      WHEN "00000000000000000000000000000000000000000000000100000000000000000000000000000" => S_22 <= 
        BinOpOut_79;
      WHEN "00000000000000000000000000000000000000000000000010000000000000000000000000000" => S_22 <= 
        BinOpOut_80;
      WHEN "00000000000000000000000000000000000000000000000001000000000000000000000000000" => S_22 <= 
        BinOpOut_81;
      WHEN "00000000000000000000000000000000000000000000000000100000000000000000000000000" => S_22 <= 
        BinOpOut_82;
      WHEN "00000000000000000000000000000000000000000000000000010000000000000000000000000" => S_22 <= 
        BinOpOut_83;
      WHEN "00000000000000000000000000000000000000000000000000001000000000000000000000000" => S_22 <= 
        BinOpOut_84;
      WHEN "00000000000000000000000000000000000000000000000000000100000000000000000000000" => S_22 <= 
        BinOpOut_85;
      WHEN "00000000000000000000000000000000000000000000000000000010000000000000000000000" => S_22 <= 
        BinOpOut_86;
      WHEN "00000000000000000000000000000000000000000000000000000001000000000000000000000" => S_22 <= 
        BinOpOut_87;
      WHEN "00000000000000000000000000000000000000000000000000000000100000000000000000000" => S_22 <= 
        BinOpOut_88;
      WHEN "00000000000000000000000000000000000000000000000000000000010000000000000000000" => S_22 <= 
        BinOpOut_89;
      WHEN "00000000000000000000000000000000000000000000000000000000001000000000000000000" => S_22 <= 
        BinOpOut_90;
      WHEN "00000000000000000000000000000000000000000000000000000000000100000000000000000" => S_22 <= 
        BinOpOut_91;
      WHEN "00000000000000000000000000000000000000000000000000000000000010000000000000000" => S_22 <= 
        BinOpOut_92;
      WHEN "00000000000000000000000000000000000000000000000000000000000001000000000000000" => S_22 <= 
        BinOpOut_94;
      WHEN "00000000000000000000000000000000000000000000000000000000000000100000000000000" => S_22 <= 
        BinOpOut_95;
      WHEN "00000000000000000000000000000000000000000000000000000000000000010000000000000" => S_22 <= 
        BinOpOut_96;
      WHEN "00000000000000000000000000000000000000000000000000000000000000001000000000000" => S_22 <= 
        BinOpOut_97;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000100000000000" => S_22 <= 
        BinOpOut_98;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000010000000000" => S_22 <= 
        BinOpOut_99;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000001000000000" => S_22 <= 
        BinOpOut_100;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000100000000" => S_22 <= 
        BinOpOut_101;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000010000000" => S_22 <= 
        BinOpOut_102;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000001000000" => S_22 <= 
        BinOpOut_103;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000100000" => S_22 <= 
        BinOpOut_104;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000010000" => S_22 <= 
        BinOpOut_105;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000001000" => S_22 <= 
        BinOpOut_106;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000000100" => S_22 <= 
        BinOpOut_107;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000000010" => S_22 <= 
        BinOpOut_108;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000000001" => S_22 <= 
        BinOpOut_109;
      WHEN OTHERS => S_22 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( BinOpOut_3, MuxEnables_34 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_34 IS
      WHEN "10000000000000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        BinOpOut_3;
      WHEN "01000000000000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_11;
      WHEN "00100000000000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_12;
      WHEN "00010000000000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_13;
      WHEN "00001000000000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_14;
      WHEN "00000100000000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_15;
      WHEN "00000010000000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_16;
      WHEN "00000001000000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_17;
      WHEN "00000000100000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_18;
      WHEN "00000000010000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_19;
      WHEN "00000000001000000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_20;
      WHEN "00000000000100000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_21;
      WHEN "00000000000010000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_22;
      WHEN "00000000000001000000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_23;
      WHEN "00000000000000100000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_24;
      WHEN "00000000000000010000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_25;
      WHEN "00000000000000001000000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_26;
      WHEN "00000000000000000100000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_4;
      WHEN "00000000000000000010000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_31;
      WHEN "00000000000000000001000000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_32;
      WHEN "00000000000000000000100000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_33;
      WHEN "00000000000000000000010000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_34;
      WHEN "00000000000000000000001000000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_35;
      WHEN "00000000000000000000000100000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_36;
      WHEN "00000000000000000000000010000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_37;
      WHEN "00000000000000000000000001000000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_38;
      WHEN "00000000000000000000000000100000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_39;
      WHEN "00000000000000000000000000010000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_40;
      WHEN "00000000000000000000000000001000000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_41;
      WHEN "00000000000000000000000000000100000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_50;
      WHEN "00000000000000000000000000000010000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_51;
      WHEN "00000000000000000000000000000001000000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_52;
      WHEN "00000000000000000000000000000000100000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_53;
      WHEN "00000000000000000000000000000000010000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_54;
      WHEN "00000000000000000000000000000000001000000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_55;
      WHEN "00000000000000000000000000000000000100000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_56;
      WHEN "00000000000000000000000000000000000010000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_57;
      WHEN "00000000000000000000000000000000000001000000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_58;
      WHEN "00000000000000000000000000000000000000100000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_59;
      WHEN "00000000000000000000000000000000000000010000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_60;
      WHEN "00000000000000000000000000000000000000001000000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_61;
      WHEN "00000000000000000000000000000000000000000100000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_62;
      WHEN "00000000000000000000000000000000000000000010000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_63;
      WHEN "00000000000000000000000000000000000000000001000000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_64;
      WHEN "00000000000000000000000000000000000000000000100000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_65;
      WHEN "00000000000000000000000000000000000000000000010000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_66;
      WHEN "00000000000000000000000000000000000000000000001000000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_67;
      WHEN "00000000000000000000000000000000000000000000000100000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_68;
      WHEN "00000000000000000000000000000000000000000000000010000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_69;
      WHEN "00000000000000000000000000000000000000000000000001000000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_70;
      WHEN "00000000000000000000000000000000000000000000000000100000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_71;
      WHEN "00000000000000000000000000000000000000000000000000010000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_72;
      WHEN "00000000000000000000000000000000000000000000000000001000000000000000000000000" => BinOpOut_149 <= 
        ConstOut_73;
      WHEN "00000000000000000000000000000000000000000000000000000100000000000000000000000" => BinOpOut_149 <= 
        ConstOut_74;
      WHEN "00000000000000000000000000000000000000000000000000000010000000000000000000000" => BinOpOut_149 <= 
        ConstOut_75;
      WHEN "00000000000000000000000000000000000000000000000000000001000000000000000000000" => BinOpOut_149 <= 
        ConstOut_76;
      WHEN "00000000000000000000000000000000000000000000000000000000100000000000000000000" => BinOpOut_149 <= 
        ConstOut_77;
      WHEN "00000000000000000000000000000000000000000000000000000000010000000000000000000" => BinOpOut_149 <= 
        ConstOut_78;
      WHEN "00000000000000000000000000000000000000000000000000000000001000000000000000000" => BinOpOut_149 <= 
        ConstOut_79;
      WHEN "00000000000000000000000000000000000000000000000000000000000100000000000000000" => BinOpOut_149 <= 
        ConstOut_80;
      WHEN "00000000000000000000000000000000000000000000000000000000000010000000000000000" => BinOpOut_149 <= 
        ConstOut_81;
      WHEN "00000000000000000000000000000000000000000000000000000000000001000000000000000" => BinOpOut_149 <= 
        ConstOut_1;
      WHEN "00000000000000000000000000000000000000000000000000000000000000100000000000000" => BinOpOut_149 <= 
        ConstOut_3;
      WHEN "00000000000000000000000000000000000000000000000000000000000000010000000000000" => BinOpOut_149 <= 
        ConstOut_83;
      WHEN "00000000000000000000000000000000000000000000000000000000000000001000000000000" => BinOpOut_149 <= 
        ConstOut_84;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000100000000000" => BinOpOut_149 <= 
        ConstOut_85;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000010000000000" => BinOpOut_149 <= 
        ConstOut_86;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000001000000000" => BinOpOut_149 <= 
        ConstOut_87;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000100000000" => BinOpOut_149 <= 
        ConstOut_88;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000010000000" => BinOpOut_149 <= 
        ConstOut_89;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000001000000" => BinOpOut_149 <= 
        ConstOut_90;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000100000" => BinOpOut_149 <= 
        ConstOut_91;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000010000" => BinOpOut_149 <= 
        ConstOut_92;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000001000" => BinOpOut_149 <= 
        ConstOut_93;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000000100" => BinOpOut_149 <= 
        ConstOut_94;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000000010" => BinOpOut_149 <= 
        ConstOut_95;
      WHEN "00000000000000000000000000000000000000000000000000000000000000000000000000001" => BinOpOut_149 <= 
        ConstOut_96;
      WHEN OTHERS => BinOpOut_149 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;


  -- Combinational expressions:

  debug_status_CE <= WireTrue_1 or WireFalse_6 or BodyStart_2 or WireTrue_4 or WireTrue_5 or WireFalse_8 or 
    WireTrue_6 or WireFalse_9 or WireTrue_7 or WireFalse_10 or WireFalse_5 or WireFalse_4;
  MuxEnables <= WireTrue_1 & WireFalse_6 & BodyStart_2 & WireTrue_4 & WireTrue_5 & WireFalse_8 & WireTrue_6 & 
    WireFalse_9 & WireTrue_7 & WireFalse_10 & WireFalse_5 & WireFalse_4;
  MuxEnables_1 <= CForkIn_6 & not(CForkIn_6);
  MuxEnables_2 <= WireTrue_11 & not(WireTrue_11);
  MuxEnables_3 <= WireTrue_13 & not(WireTrue_13);
  MuxEnables_4 <= CForkIn_11 & not(CForkIn_11);
  MuxEnables_5 <= S_3 & S_24;
  MuxEnables_6 <= WireTrue & not(WireTrue);
  MuxEnables_7 <= CForkIn_12 & not(CForkIn_12);
  ifc_sw_drd_CE <= LinkWire_0_1 or LinkWire_1_1 or LinkWire_2_2 or LinkWire_3_2 or LinkWire_4_1 or LinkWire_5_1 or 
    LinkWire_6 or LinkWire_7 or LinkWire_8 or LinkWire_9 or LinkWire_10 or LinkWire_11 or LinkWire_12 or 
    LinkWire_13 or LinkWire_14 or LinkWire_15 or DefaultWire_1;
  MuxEnables_8 <= LinkWire_0_1 & LinkWire_1_1 & LinkWire_2_2 & LinkWire_3_2 & LinkWire_4_1 & LinkWire_5_1 & 
    LinkWire_6 & LinkWire_7 & LinkWire_8 & LinkWire_9 & LinkWire_10 & LinkWire_11 & LinkWire_12 & LinkWire_13 & 
    LinkWire_14 & LinkWire_15 & DefaultWire_1;
  MuxEnables_9 <= CForkIn_9 & not(CForkIn_9);
  MuxEnables_10 <= SeqChain_63 & not(SeqChain_63);
  DataIntoFIFO_0 <= BinOpOut_53(0 DOWNTO 0);
  DataIntoFIFO_1 <= BinOpOut_53(1 DOWNTO 1);
  DataIntoFIFO_2 <= BinOpOut_53(2 DOWNTO 2);
  DataIntoFIFO_3 <= BinOpOut_53(3 DOWNTO 3);
  DataIntoFIFO_4 <= BinOpOut_53(4 DOWNTO 4);
  DataIntoFIFO_5 <= BinOpOut_53(5 DOWNTO 5);
  DataIntoFIFO_6 <= BinOpOut_53(6 DOWNTO 6);
  DataIntoFIFO_7 <= BinOpOut_53(7 DOWNTO 7);
  DataIntoFIFO_8 <= BinOpOut_53(8 DOWNTO 8);
  DataIntoFIFO_9 <= BinOpOut_53(9 DOWNTO 9);
  DataIntoFIFO_10 <= BinOpOut_53(10 DOWNTO 10);
  DataIntoFIFO_11 <= BinOpOut_53(11 DOWNTO 11);
  DataIntoFIFO_12 <= BinOpOut_53(12 DOWNTO 12);
  S_39 <= S_25(0 DOWNTO 0);
  S_40 <= S_25(1 DOWNTO 1);
  S_29 <= to_unsigned(S_53) & to_unsigned(S_52) & to_unsigned(S_51) & to_unsigned(S_50) & to_unsigned(S_49) & 
    to_unsigned(S_48) & to_unsigned(S_47) & to_unsigned(S_46) & to_unsigned(S_45) & to_unsigned(S_44) & 
    to_unsigned(S_43) & to_unsigned(S_42) & to_unsigned(S_41);
  S_37 <= S_27(0 DOWNTO 0);
  S_38 <= S_27(1 DOWNTO 1);
  S_36 <= not((to_unsigned(S_30) and not(to_unsigned(S_33))));
  S_35 <= S_34 and S_4;
  S_34 <= not((to_unsigned(S_30) and to_unsigned(S_33)));
  MuxEnables_11 <= to_stdlogic(not(S_31)) & to_stdlogic(S_31);
  S_31 <= S_35 xor AckOut;
  S_30 <= to_stdlogic(S_25 = S_27);
  S_28 <= S_27 + C_0;
  S_26 <= S_25 + C_0;
  AckOut <= S_1 and S_36;
  MuxEnables_12 <= S_3 & S_24;
  S_24 <= not(S_3);
  dma_done_cnt_CE <= WireTrue_8 or WireTrue_9;
  MuxEnables_13 <= WireTrue_8 & WireTrue_9;
  sw_str_ptr_CE <= S_3 or LinkWire_1;
  MuxEnables_14 <= S_3 & LinkWire_1;
  sw_last_end_ptr_CE <= WireTrue_1 or WireTrue_5 or WireFalse_8;
  MuxEnables_15 <= WireTrue_1 & WireTrue_5 & WireFalse_8;
  status_reg_CE <= CJoinOut or WireTrue_15 or WireFalse_16 or LinkWire_3 or DefaultWire;
  MuxEnables_16 <= CJoinOut & WireTrue_15 & WireFalse_16 & LinkWire_3 & DefaultWire;
  interrupt_mon_CE <= WireTrue_10 or WireFalse_13;
  MuxEnables_17 <= WireTrue_10 & WireFalse_13;
  interrupt_reset_CE <= WireTrue_10 or LinkWire_4;
  MuxEnables_18 <= WireTrue_10 & LinkWire_4;
  MuxEnables_19 <= S_15 & LinkWire_4;
  timeout_enable_CE <= S_15 or LinkWire_4;
  MuxEnables_20 <= S_15 & LinkWire_4;
  MuxEnables_21 <= BodyStart_2 & not(BodyStart_2);
  getNextDesc_CE <= SeqChain_1 or WireTrue_1 or WireFalse_10;
  MuxEnables_22 <= SeqChain_1 & WireTrue_1 & WireFalse_10;
  newDescReady_CE <= WireFalse or WireFalse_1 or WireFalse_8;
  MuxEnables_23 <= to_stdlogic(to_unsigned(WireFalse) or to_unsigned(WireFalse_8)) & WireFalse_1;
  S_16 <= to_unsigned(S_17) xor S_18;
  MuxEnables_24 <= to_stdlogic(S_18) & to_stdlogic(not(S_18));
  S_18 <= to_unsigned(Z_Dones_1_3) xor to_unsigned(Z_Dones_2_1);
  BinOpOut_147 <= ConstOut_111 & debug_status;
  BinOpOut_146 <= ConstOut_10 & cnt_no_space & cnt_down_descs & cnt_desc_empty;
  BinOpOut_145 <= ConstOut_1 & to_unsigned(DMA_DONE) & cnt_dma_ack & cnt_not_buf_rellen & cnt_space_available;
  BinOpOut_144 <= ConstOut_110 & dma_done_release;
  BinOpOut_143 <= ConstOut_42 & ifc_buf_newlen;
  BinOpOut_142 <= ConstOut_110 & to_unsigned(DESC_EMPTY);
  BinOpOut_141 <= ConstOut_110 & UNSIGNED(DESC_DO);
  BinOpOut_140 <= hw_end_ptr & hw_str_ptr;
  BinOpOut_139 <= ConstOut_109 & status_reg;
  BinOpOut_138 <= ConstOut_108 & control_reg;
  LinkWire_0_1 <= SwitchOut(16);
  LinkWire_1_1 <= SwitchOut(15);
  LinkWire_2_2 <= SwitchOut(14);
  LinkWire_3_2 <= SwitchOut(13);
  LinkWire_4_1 <= SwitchOut(12);
  LinkWire_5_1 <= SwitchOut(11);
  LinkWire_6 <= SwitchOut(10);
  LinkWire_7 <= SwitchOut(9);
  LinkWire_8 <= SwitchOut(8);
  LinkWire_9 <= SwitchOut(7);
  LinkWire_10 <= SwitchOut(6);
  LinkWire_11 <= SwitchOut(5);
  LinkWire_12 <= SwitchOut(4);
  LinkWire_13 <= SwitchOut(3);
  LinkWire_14 <= SwitchOut(2);
  LinkWire_15 <= SwitchOut(1);
  DefaultWire_1 <= SwitchOut(0);
  WireTrue_17 <= WireFalse_17 and BinOpOut_137;
  BinOpOut_137 <= to_stdlogic(to_unsigned(SW_RD) = ConstOut_2);
  RangeCast <= UNSIGNED(SW_DWR);
  BinOpOut_136 <= RangeCast(0 DOWNTO 0);
  RangeCast_1 <= UNSIGNED(SW_DWR);
  BinOpOut_135 <= RangeCast_1(1 DOWNTO 1);
  RangeCast_2 <= UNSIGNED(SW_DWR);
  BinOpOut_134 <= RangeCast_2(2 DOWNTO 0);
  LinkWire_0 <= SwitchOut_1(6);
  LinkWire_1 <= SwitchOut_1(5);
  LinkWire_2_1 <= SwitchOut_1(4);
  LinkWire_3_1 <= SwitchOut_1(3);
  LinkWire_4 <= SwitchOut_1(2);
  LinkWire_5 <= SwitchOut_1(1);
  RangeCast_3 <= UNSIGNED(SW_ADDR);
  BinOpOut_133 <= RangeCast_3(5 DOWNTO 0);
  S_71 <= LinkWire_15 or LinkWire_14 or LinkWire_13 or LinkWire_12 or LinkWire_11 or LinkWire_10 or LinkWire_9 or 
    LinkWire_8 or LinkWire_7 or LinkWire_6 or LinkWire_5_1 or LinkWire_4_1 or LinkWire_3_2 or LinkWire_2_2 or 
    LinkWire_1_1 or LinkWire_0_1 or DefaultWire_1 or (WireFalse_17 and not(BinOpOut_137)) or LinkWire_5 or 
    LinkWire_4 or LinkWire_3_1 or LinkWire_2_1 or LinkWire_1 or LinkWire_0 or SwitchOut_1(0);
  WireTrue_16 <= CForkIn_12 and BinOpOut_132;
  WireFalse_17 <= CForkIn_12 and not(BinOpOut_132);
  BinOpOut_132 <= to_stdlogic(to_unsigned(SW_WR) = ConstOut_2);
  BinOpOut_131 <= to_unsigned(SW_WR) or to_unsigned(SW_RD);
  CForkIn_12 <= StartOut_11 or to_stdlogic(LoopZ_5);
  MuxEnables_25 <= BinOpOut_8 & not(BinOpOut_8);
  CForkIn_11 <= StartOut_10 or LoopZ_4;
  S_13 <= WireTrue_15 or WireFalse_16;
  WireTrue_15 <= LinkWire_2 and BinOpOut_130;
  WireFalse_16 <= LinkWire_2 and not(BinOpOut_130);
  BinOpOut_130 <= to_stdlogic(hw_buffer_full = ConstOut_2);
  CJoinOut <= SwitchOut_2(4) or SwitchOut_2(3);
  LinkWire_2 <= SwitchOut_2(2);
  LinkWire_3 <= SwitchOut_2(1);
  DefaultWire <= SwitchOut_2(0);
  CForkIn_10 <= SeqChain_82 or SeqChain_81 or SeqChain_80 or SeqChain_79 or StartOut_9;
  CForkIn_9 <= StartOut_8 or Z_Dones_0;
  BinOpOut_129 <= hw_buffer_mask and (hw_str_ptr + UNSIGNED(BUF_RELLEN));
  S_12 <= WireTrue_14 or (CForkIn_8 and not(BinOpOut_58));
  WireTrue_14 <= CForkIn_8 and BinOpOut_58;
  CForkIn_8 <= StartOut_7 or LoopZ_8;
  int_timeout_CE <= WireTrue_12 or WireFalse_15;
  MuxEnables_26 <= WireTrue_12 & WireFalse_15;
  BinOpOut_128 <= int_timeout + ConstOut_106;
  WireTrue_13 <= WireFalse_14 and to_stdlogic(BinOpOut_127);
  WireFalse_15 <= WireFalse_14 and not(to_stdlogic(BinOpOut_127));
  BinOpOut_127 <= to_unsigned(to_stdlogic(timeout_enable = ConstOut_2)) and to_unsigned(to_stdlogic(int_timeout >= 
    timeout_reg));
  S_11 <= WireTrue_13 or WireFalse_15 or WireTrue_12;
  WireTrue_12 <= CForkIn_7 and to_stdlogic(BinOpOut_126);
  WireFalse_14 <= CForkIn_7 and not(to_stdlogic(BinOpOut_126));
  BinOpOut_126 <= to_unsigned(BinOpOut_117) or to_unsigned(BinOpOut_123);
  S_67 <= to_unsigned(to_stdlogic(interrupt_reset = ConstOut)) and to_unsigned(to_stdlogic(interrupt_mon >= 
    (interrupt_reg and ConstOut_104))) and to_unsigned(to_stdlogic(interrupt_enable = ConstOut_2));
  WireTrue_11 <= CForkIn_7 and to_stdlogic(S_67);
  CForkIn_7 <= StartOut_6 or Z_Dones_1_4;
  BinOpOut_125 <= ifc_interrupt1 & ifc_interrupt0;
  CForkIn_6 <= StartOut_5 or LoopZ_3;
  BinOpOut_124 <= interrupt_mon + BinOpOut_121;
  WireTrue_10 <= S_3 and BinOpOut_123;
  WireFalse_13 <= S_3 and not(BinOpOut_123);
  BinOpOut_123 <= to_stdlogic(interrupt_reset = ConstOut_2);
  BinOpOut_122 <= (sw_str_ptr + BinOpOut_121) and sw_buffer_mask;
  BinOpOut_121 <= ConstOut_45 & length;
  BinOpOut_120 <= ConstOut_103 & length;
  S_0 <= to_stdlogic(S_1) and to_stdlogic(S_36);
  False_fork_input <= to_stdlogic(S_1) and not(to_stdlogic(S_36));
  S_1 <= to_unsigned(CForkIn_5 and BinOpOut_119) or to_unsigned(S_2);
  S_9 <= WireTrue_10 or WireFalse_13 or (CForkIn_5 and not(BinOpOut_119));
  BinOpOut_119 <= to_stdlogic(dma_done_cnt /= ConstOut_103);
  CForkIn_5 <= StartOut_4 or LoopZ_7;
  BinOpOut_118 <= dma_done_cnt - ConstOut_102;
  WireTrue_9 <= WireFalse_12 and BinOpOut_117;
  S_68 <= to_unsigned(BinOpOut_117) and to_unsigned(BinOpOut_113) and to_unsigned(BinOpOut_115);
  WireFalse_12 <= WireFalse_11 and not(to_stdlogic(S_68));
  BinOpOut_117 <= to_stdlogic(dma_done_release = ConstOut_2);
  BinOpOut_115 <= to_stdlogic(RESIZE(UNSIGNED(DMA_TAG), 8) = BinOpOut_114);
  BinOpOut_114 <= UNSIGNED(DMA_TAG_ID) or ConstOut_101;
  S_69 <= to_unsigned(BinOpOut_115) and to_unsigned(to_stdlogic(dma_done_release = ConstOut)) and to_unsigned(BinOpOut_113);
  S_10 <= WireTrue_9 or (WireFalse_12 and not(BinOpOut_117)) or (WireFalse_11 and to_stdlogic(S_68)) or 
    WireTrue_8;
  BinOpOut_116 <= dma_done_cnt + ConstOut_102;
  WireTrue_8 <= CForkIn_4 and to_stdlogic(S_69);
  WireFalse_11 <= CForkIn_4 and not(to_stdlogic(S_69));
  BinOpOut_113 <= to_stdlogic(to_unsigned(DMA_DONE) = ConstOut_2);
  CForkIn_4 <= StartOut_3 or Z_Dones_0_1;
  data_length_CE <= WireFalse_6 or WireTrue_4 or WireFalse_8;
  MuxEnables_27 <= WireFalse_6 & WireTrue_4 & WireFalse_8;
  MuxEnables_28 <= S_14 & WireTrue_5;
  MuxEnables_29 <= S_14 & WireTrue_5;
  need_new_desc_CE <= S_14 or WireTrue_5;
  MuxEnables_30 <= S_14 & WireTrue_5;
  False_fork_input_1 <= to_stdlogic(S_4) and not(to_stdlogic(S_34));
  S_4 <= to_unsigned(WireFalse_10) or to_unsigned(S_5);
  BinOpOut_112 <= cnt_dma_ack + ConstOut_101;
  BinOpOut_111 <= hw_buffer_mask and (hw_end_ptr + RESIZE(data_length, 16));
  S_8 <= SeqChain_63 or WireTrue_7;
  WireTrue_7 <= CForkIn_14 and BinOpOut_110;
  WireFalse_10 <= CForkIn_14 and not(BinOpOut_110);
  BinOpOut_110 <= to_stdlogic(to_unsigned(DMA_ACK) = ConstOut);
  BinOpOut_109 <= BinOpOut_93(15 DOWNTO 15);
  BinOpOut_108 <= BinOpOut_93(14 DOWNTO 14);
  BinOpOut_107 <= BinOpOut_93(13 DOWNTO 13);
  BinOpOut_106 <= BinOpOut_93(12 DOWNTO 12);
  BinOpOut_105 <= BinOpOut_93(11 DOWNTO 11);
  BinOpOut_104 <= BinOpOut_93(10 DOWNTO 10);
  BinOpOut_103 <= BinOpOut_93(9 DOWNTO 9);
  BinOpOut_102 <= BinOpOut_93(8 DOWNTO 8);
  BinOpOut_101 <= BinOpOut_93(7 DOWNTO 7);
  BinOpOut_100 <= BinOpOut_93(6 DOWNTO 6);
  BinOpOut_99 <= BinOpOut_93(5 DOWNTO 5);
  BinOpOut_98 <= BinOpOut_93(4 DOWNTO 4);
  BinOpOut_97 <= BinOpOut_93(3 DOWNTO 3);
  BinOpOut_96 <= BinOpOut_93(2 DOWNTO 2);
  BinOpOut_95 <= BinOpOut_93(1 DOWNTO 1);
  BinOpOut_94 <= BinOpOut_93(0 DOWNTO 0);
  BinOpOut_93 <= mem_length & ConstOut_82;
  BinOpOut_92 <= mem_l_addr(31 DOWNTO 31);
  BinOpOut_91 <= mem_l_addr(30 DOWNTO 30);
  BinOpOut_90 <= mem_l_addr(29 DOWNTO 29);
  BinOpOut_89 <= mem_l_addr(28 DOWNTO 28);
  BinOpOut_88 <= mem_l_addr(27 DOWNTO 27);
  BinOpOut_87 <= mem_l_addr(26 DOWNTO 26);
  BinOpOut_86 <= mem_l_addr(25 DOWNTO 25);
  BinOpOut_85 <= mem_l_addr(24 DOWNTO 24);
  BinOpOut_84 <= mem_l_addr(23 DOWNTO 23);
  BinOpOut_83 <= mem_l_addr(22 DOWNTO 22);
  BinOpOut_82 <= mem_l_addr(21 DOWNTO 21);
  BinOpOut_81 <= mem_l_addr(20 DOWNTO 20);
  BinOpOut_80 <= mem_l_addr(19 DOWNTO 19);
  BinOpOut_79 <= mem_l_addr(18 DOWNTO 18);
  BinOpOut_78 <= mem_l_addr(17 DOWNTO 17);
  BinOpOut_77 <= mem_l_addr(16 DOWNTO 16);
  BinOpOut_76 <= mem_l_addr(15 DOWNTO 15);
  BinOpOut_75 <= mem_l_addr(14 DOWNTO 14);
  BinOpOut_74 <= mem_l_addr(13 DOWNTO 13);
  BinOpOut_73 <= mem_l_addr(12 DOWNTO 12);
  BinOpOut_72 <= mem_l_addr(11 DOWNTO 11);
  BinOpOut_71 <= mem_l_addr(10 DOWNTO 10);
  BinOpOut_70 <= mem_l_addr(9 DOWNTO 9);
  BinOpOut_69 <= mem_l_addr(8 DOWNTO 8);
  BinOpOut_68 <= mem_l_addr(7 DOWNTO 7);
  BinOpOut_67 <= mem_l_addr(6 DOWNTO 6);
  BinOpOut_66 <= mem_l_addr(5 DOWNTO 5);
  BinOpOut_65 <= mem_l_addr(4 DOWNTO 4);
  BinOpOut_64 <= mem_l_addr(3 DOWNTO 3);
  BinOpOut_63 <= mem_l_addr(2 DOWNTO 2);
  BinOpOut_62 <= mem_l_addr(1 DOWNTO 1);
  BinOpOut_61 <= mem_l_addr(0 DOWNTO 0);
  BinOpOut_60 <= BinOpOut_59 + UNSIGNED(BUFFER_ADDR);
  BinOpOut_59 <= ConstOut_42 & hw_end_ptr;
  BinOpOut_57 <= cnt_not_buf_rellen + ConstOut_101;
  S_7 <= WireTrue_6 or WireTrue_5 or WireFalse_8;
  WireTrue_6 <= CForkIn_13 and BinOpOut_58;
  WireFalse_9 <= CForkIn_13 and not(BinOpOut_58);
  BinOpOut_58 <= to_stdlogic(to_unsigned(BUF_RELLEN_DV) = ConstOut_2);
  BinOpOut_56 <= sw_buffer_mask and (sw_last_end_ptr + BinOpOut_49);
  BinOpOut_55 <= (sw_last_end_ptr + data_length) and sw_buffer_mask;
  BinOpOut_54 <= page_free_space - BinOpOut_53;
  BinOpOut_53 <= RESIZE(data_length, 13);
  BinOpOut_52 <= page_offset + BinOpOut_51;
  BinOpOut_51 <= RESIZE(data_length, 12);
  WireTrue_5 <= SeqChain_30 and BinOpOut_50;
  WireFalse_8 <= SeqChain_30 and not(BinOpOut_50);
  BinOpOut_50 <= to_stdlogic(data_length < BinOpOut_49);
  BinOpOut_49 <= ConstOut_45 & page_free_space;
  SeqChain_30 <= Z_Dones_1_2 or (SeqChain_29 and not(BinOpOut_48));
  WireTrue_4 <= SeqChain_29 and BinOpOut_48;
  BinOpOut_48 <= to_stdlogic(data_length > BinOpOut_47);
  BinOpOut_47 <= ConstOut_42 & hw_buffer_free_space;
  BinOpOut_45 <= cnt_no_space + ConstOut_101;
  BodyStart_2 <= SeqChain_28 or (Z_Dones_2 and BinOpOut_44);
  WireFalse_7 <= Z_Dones_2 and not(BinOpOut_44);
  BinOpOut_44 <= to_stdlogic(hw_buffer_free_space = ConstOut_42);
  BinOpOut_42 <= page_offset(10 DOWNTO 10);
  BinOpOut_41 <= page_offset(9 DOWNTO 9);
  BinOpOut_40 <= page_offset(8 DOWNTO 8);
  BinOpOut_39 <= page_offset(7 DOWNTO 7);
  BinOpOut_38 <= page_offset(6 DOWNTO 6);
  BinOpOut_37 <= page_offset(5 DOWNTO 5);
  BinOpOut_36 <= page_offset(4 DOWNTO 4);
  BinOpOut_35 <= page_offset(3 DOWNTO 3);
  BinOpOut_34 <= page_offset(2 DOWNTO 2);
  BinOpOut_33 <= page_offset(1 DOWNTO 1);
  BinOpOut_32 <= page_offset(0 DOWNTO 0);
  BinOpOut_31 <= (sw_end_ptr - sw_last_end_ptr) and sw_buffer_mask;
  WireTrue_3 <= CForkIn_3 and BinOpOut_30;
  WireFalse_6 <= CForkIn_3 and not(BinOpOut_30);
  BinOpOut_30 <= to_stdlogic(newDescReady = ConstOut);
  CForkIn_3 <= (WireTrue_2 and BinOpOut_29) or LoopZ_2;
  BinOpOut_46 <= cnt_space_available + ConstOut_101;
  BinOpOut_43 <= page_offset(11 DOWNTO 11);
  WireFalse_5 <= WireTrue_2 and not(BinOpOut_29);
  BinOpOut_29 <= to_stdlogic(sw_end_ptr /= sw_last_end_ptr);
  WireTrue_2 <= WireFalse_3 and to_stdlogic(BinOpOut_28);
  WireFalse_4 <= WireFalse_3 and not(to_stdlogic(BinOpOut_28));
  BinOpOut_28 <= to_unsigned(to_stdlogic(status_reg = ConstOut_28)) or to_unsigned(to_stdlogic(status_reg = 
    ConstOut_29));
  WireFalse_3 <= WireFalse_2 and not(BinOpOut_27);
  BinOpOut_27 <= to_stdlogic(status_reg = ConstOut_27);
  BinOpOut_26 <= BinOpOut_10(15 DOWNTO 15);
  BinOpOut_25 <= BinOpOut_10(14 DOWNTO 14);
  BinOpOut_24 <= BinOpOut_10(13 DOWNTO 13);
  BinOpOut_23 <= BinOpOut_10(12 DOWNTO 12);
  BinOpOut_22 <= BinOpOut_10(11 DOWNTO 11);
  BinOpOut_21 <= BinOpOut_10(10 DOWNTO 10);
  BinOpOut_20 <= BinOpOut_10(9 DOWNTO 9);
  BinOpOut_19 <= BinOpOut_10(8 DOWNTO 8);
  BinOpOut_18 <= BinOpOut_10(7 DOWNTO 7);
  BinOpOut_17 <= BinOpOut_10(6 DOWNTO 6);
  BinOpOut_16 <= BinOpOut_10(5 DOWNTO 5);
  BinOpOut_15 <= BinOpOut_10(4 DOWNTO 4);
  BinOpOut_14 <= BinOpOut_10(3 DOWNTO 3);
  BinOpOut_13 <= BinOpOut_10(2 DOWNTO 2);
  BinOpOut_12 <= BinOpOut_10(1 DOWNTO 1);
  BinOpOut_11 <= BinOpOut_10(0 DOWNTO 0);
  BinOpOut_10 <= ConstOut_10 & BinOpOut_114;
  BinOpOut_148 <= RangeCast_4(14 DOWNTO 0) & ConstOut;
  RangeCast_4 <= UNSIGNED(BUFFER_SIZE);
  BinOpOut_9 <= BinOpOut_148 - ConstOut_9;
  S_6 <= (to_stdlogic(S_4) and to_stdlogic(S_34)) or WireFalse_5 or WireFalse_4 or (WireFalse_2 and BinOpOut_27) or 
    SeqChain_16;
  WireTrue_1 <= CForkIn_2 and BinOpOut_8;
  WireFalse_2 <= CForkIn_2 and not(BinOpOut_8);
  BinOpOut_8 <= to_stdlogic(status_reg = ConstOut_5);
  CForkIn_2 <= StartOut_2 or LoopZ_6;
  S_14 <= WireTrue_1 or WireFalse_8;
  BinOpOut_7 <= hw_buffer_mask and ((hw_str_ptr + UNSIGNED(BUFFER_SIZE)) - hw_end_ptr);
  CForkIn_1 <= StartOut_1 or LoopZ_1;
  parts_CE <= WireFalse or WireTrue;
  MuxEnables_31 <= WireFalse & WireTrue;
  BinOpOut_5 <= cnt_down_descs + ConstOut_101;
  BinOpOut_4 <= parts + ConstOut_3;
  BinOpOut_3 <= ConstOut_4 + parts;
  WireTrue <= CForkIn and BinOpOut_6;
  WireFalse_1 <= CForkIn and not(BinOpOut_6);
  BinOpOut_6 <= to_stdlogic(parts < ConstOut_4);
  CForkIn <= to_stdlogic(SeqChain) or Z_Dones_3;
  S_19 <= to_unsigned(S_20) xor S_21;
  MuxEnables_32 <= to_stdlogic(S_21) & to_stdlogic(not(S_21));
  S_21 <= to_unsigned(Z_Dones_1) xor to_unsigned(BodyEnd_1 and not(BinOpOut_1));
  BinOpOut_2 <= cnt_desc_empty + ConstOut_101;
  BodyStart_1 <= WireFalse or (BodyEnd_1 and BinOpOut_1);
  BinOpOut_1 <= to_stdlogic(to_unsigned(DESC_EMPTY) = ConstOut_2);
  BodyStart <= (BodyEnd and BinOpOut) or LoopZ or StartOut;
  WireFalse <= BodyEnd and not(BinOpOut);
  BinOpOut <= to_stdlogic(getNextDesc = ConstOut);
  DataIn <= S_22;
  RangeCast_5 <= to_unsigned(DataOut);
  S_23 <= RangeCast_5(0 DOWNTO 0);
  S_212 <= to_unsigned(S_208) or to_unsigned(S_196) or to_unsigned(S_185) or to_unsigned(Z_Dones_1_1) or 
    to_unsigned(WireFalse_6);
  S_210 <= to_unsigned(S_191) or to_unsigned(S_184) or to_unsigned(Z_Dones_6) or to_unsigned(WireTrue_1);
  S_195 <= to_unsigned(S_184) or to_unsigned(Z_Dones_6) or to_unsigned(WireTrue_1);
  S_135 <= to_unsigned(Z_Dones_6) or to_unsigned(WireTrue_1);
  S_116 <= to_unsigned(S_108) or to_unsigned(S_94) or to_unsigned(S_86) or to_unsigned(S_72) or to_unsigned(Z_Dones_3_1) or 
    to_unsigned(WireFalse_9);
  S_114 <= to_unsigned(S_99) or to_unsigned(S_97) or to_unsigned(S_83) or to_unsigned(Z_Dones_3_1) or 
    to_unsigned(WireFalse_9);
  S_107 <= to_unsigned(S_97) or to_unsigned(S_83) or to_unsigned(Z_Dones_3_1) or to_unsigned(WireFalse_9);
  S_96 <= to_unsigned(S_89) or to_unsigned(S_80) or to_unsigned(Z_Dones_1_1) or to_unsigned(WireFalse_6);
  S_93 <= to_unsigned(S_80) or to_unsigned(Z_Dones_1_1) or to_unsigned(WireFalse_6);
  S_88 <= to_unsigned(S_83) or to_unsigned(Z_Dones_3_1) or to_unsigned(WireFalse_9);
  S_85 <= to_unsigned(Z_Dones_3_1) or to_unsigned(WireFalse_9);
  S_82 <= to_unsigned(Z_Dones_1_1) or to_unsigned(WireFalse_6);
  S_70 <= to_unsigned(S_211) or to_unsigned(S_157) or to_unsigned(S_136) or to_unsigned(S_134) or to_unsigned(S_117) or 
    to_unsigned(S_115) or to_unsigned(WireTrue);
  MuxEnables_33 <= WireTrue & Z_Dones_6 & SeqChain_2 & SeqChain_3 & SeqChain_4 & SeqChain_5 & SeqChain_6 & 
    SeqChain_7 & SeqChain_8 & SeqChain_9 & SeqChain_10 & SeqChain_11 & SeqChain_12 & SeqChain_13 & SeqChain_14 & 
    SeqChain_15 & SeqChain_16 & Z_Dones_1_1 & SeqChain_18 & SeqChain_19 & SeqChain_20 & SeqChain_21 & 
    SeqChain_22 & SeqChain_23 & SeqChain_24 & SeqChain_25 & SeqChain_26 & SeqChain_27 & SeqChain_17 & 
    Z_Dones_3_1 & SeqChain_32 & SeqChain_33 & SeqChain_34 & SeqChain_35 & SeqChain_36 & SeqChain_37 & 
    SeqChain_38 & SeqChain_39 & SeqChain_40 & SeqChain_41 & SeqChain_42 & SeqChain_43 & SeqChain_44 & 
    SeqChain_45 & SeqChain_46 & SeqChain_47 & SeqChain_48 & SeqChain_49 & SeqChain_50 & SeqChain_51 & 
    SeqChain_52 & SeqChain_53 & SeqChain_54 & SeqChain_55 & SeqChain_56 & SeqChain_57 & SeqChain_58 & 
    SeqChain_59 & SeqChain_60 & SeqChain_61 & SeqChain_62 & SeqChain_31 & SeqChain_64 & SeqChain_65 & 
    SeqChain_66 & SeqChain_67 & SeqChain_68 & SeqChain_69 & SeqChain_70 & SeqChain_71 & SeqChain_72 & 
    SeqChain_73 & SeqChain_74 & SeqChain_75 & SeqChain_76 & SeqChain_77 & SeqChain_78;
  MuxEnables_34 <= WireTrue & Z_Dones_6 & SeqChain_2 & SeqChain_3 & SeqChain_4 & SeqChain_5 & SeqChain_6 & 
    SeqChain_7 & SeqChain_8 & SeqChain_9 & SeqChain_10 & SeqChain_11 & SeqChain_12 & SeqChain_13 & SeqChain_14 & 
    SeqChain_15 & SeqChain_16 & Z_Dones_1_1 & SeqChain_18 & SeqChain_19 & SeqChain_20 & SeqChain_21 & 
    SeqChain_22 & SeqChain_23 & SeqChain_24 & SeqChain_25 & SeqChain_26 & SeqChain_27 & SeqChain_17 & 
    Z_Dones_3_1 & SeqChain_32 & SeqChain_33 & SeqChain_34 & SeqChain_35 & SeqChain_36 & SeqChain_37 & 
    SeqChain_38 & SeqChain_39 & SeqChain_40 & SeqChain_41 & SeqChain_42 & SeqChain_43 & SeqChain_44 & 
    SeqChain_45 & SeqChain_46 & SeqChain_47 & SeqChain_48 & SeqChain_49 & SeqChain_50 & SeqChain_51 & 
    SeqChain_52 & SeqChain_53 & SeqChain_54 & SeqChain_55 & SeqChain_56 & SeqChain_57 & SeqChain_58 & 
    SeqChain_59 & SeqChain_60 & SeqChain_61 & SeqChain_62 & SeqChain_31 & SeqChain_64 & SeqChain_65 & 
    SeqChain_66 & SeqChain_67 & SeqChain_68 & SeqChain_69 & SeqChain_70 & SeqChain_71 & SeqChain_72 & 
    SeqChain_73 & SeqChain_74 & SeqChain_75 & SeqChain_76 & SeqChain_77 & SeqChain_78;
  S_15 <= WireTrue_11 or WireTrue_13;
  I0_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I0_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I0_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I0_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I0_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_12 <= to_stdlogic(DataIntoFIFO_12);
  I0_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I0_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I0_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I0_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I0_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I1_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I1_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I1_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I1_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I1_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_11 <= to_stdlogic(DataIntoFIFO_11);
  I1_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I1_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I1_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I1_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I1_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I2_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I2_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I2_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I2_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I2_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_10 <= to_stdlogic(DataIntoFIFO_10);
  I2_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I2_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I2_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I2_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I2_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I3_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I3_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I3_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I3_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I3_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_9 <= to_stdlogic(DataIntoFIFO_9);
  I3_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I3_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I3_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I3_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I3_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I4_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I4_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I4_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I4_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I4_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_8 <= to_stdlogic(DataIntoFIFO_8);
  I4_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I4_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I4_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I4_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I4_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I5_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I5_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I5_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I5_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I5_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_7 <= to_stdlogic(DataIntoFIFO_7);
  I5_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I5_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I5_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I5_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I5_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I6_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I6_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I6_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I6_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I6_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_6 <= to_stdlogic(DataIntoFIFO_6);
  I6_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I6_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I6_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I6_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I6_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I7_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I7_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I7_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I7_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I7_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_5 <= to_stdlogic(DataIntoFIFO_5);
  I7_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I7_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I7_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I7_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I7_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I8_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I8_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I8_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I8_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I8_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_4 <= to_stdlogic(DataIntoFIFO_4);
  I8_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I8_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I8_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I8_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I8_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I9_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I9_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I9_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I9_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I9_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_3 <= to_stdlogic(DataIntoFIFO_3);
  I9_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I9_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I9_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I9_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I9_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I10_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I10_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I10_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I10_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I10_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_2 <= to_stdlogic(DataIntoFIFO_2);
  I10_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I10_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I10_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I10_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I10_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I11_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I11_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I11_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I11_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I11_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_1 <= to_stdlogic(DataIntoFIFO_1);
  I11_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I11_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I11_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I11_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I11_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I12_FIFORam_tx_dma_ctrl_opt_253_A0 <= to_stdlogic(S_39);
  I12_FIFORam_tx_dma_ctrl_opt_253_A1 <= to_stdlogic(S_40);
  I12_FIFORam_tx_dma_ctrl_opt_253_A2_GND <= GND;
  I12_FIFORam_tx_dma_ctrl_opt_253_A3_GND <= GND;
  I12_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_0 <= to_stdlogic(DataIntoFIFO_0);
  I12_FIFORam_tx_dma_ctrl_opt_253_DPRA0 <= to_stdlogic(S_37);
  I12_FIFORam_tx_dma_ctrl_opt_253_DPRA1 <= to_stdlogic(S_38);
  I12_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND <= GND;
  I12_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND <= GND;
  I12_FIFORam_tx_dma_ctrl_opt_253_WE <= to_stdlogic(S_35);
  I0_dma_mem_tx_dma_ctrl_opt_299_A_AddrIn <= STD_LOGIC_VECTOR(BinOpOut_149);
  I0_dma_mem_tx_dma_ctrl_opt_299_D_DataIn <= to_stdlogic(DataIn);
  I0_dma_mem_tx_dma_ctrl_opt_299_WE <= to_stdlogic(S_70);
  I0_start_tx_dma_ctrl_opt_693_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_674_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_646_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_628_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_617_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_590_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_584_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_556_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_544_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_345_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_335_aclr_GND <= GND;
  I0_start_tx_dma_ctrl_opt_305_aclr_GND <= GND;


  -- Port connections:

  INTERRUPT <= STD_LOGIC_VECTOR(ifc_interrupt);
  ENABLE <= to_stdlogic(ifc_enable);
  BUF_NEWLEN <= STD_LOGIC_VECTOR(ifc_buf_newlen);
  BUF_NEWLEN_DV <= to_stdlogic(dma_done_release);
  DESC_READ <= to_stdlogic(ifc_desc_read);
  SW_DRD <= STD_LOGIC_VECTOR(ifc_sw_drd);
  SW_ARDY <= to_stdlogic(ifc_sw_ardy);
  SW_DRDY <= to_stdlogic(ifc_sw_drdy);
  DMA_DOUT <= STD_LOGIC_VECTOR(ifc_dma_dout);
  DMA_REQ <= to_stdlogic(ifc_dma_req);


  -- Component instances:

  -- MPRAM component instance 'FIFORam'
  I0_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I0_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I0_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I0_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I0_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I0_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_12,
      DPO => S_53,
      DPRA0 => I0_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I0_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I0_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I0_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_66,
      WCLK => PIN_CLK,
      WE => I0_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I1_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I1_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I1_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I1_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I1_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I1_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_11,
      DPO => S_52,
      DPRA0 => I1_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I1_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I1_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I1_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_65,
      WCLK => PIN_CLK,
      WE => I1_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I2_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I2_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I2_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I2_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I2_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I2_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_10,
      DPO => S_51,
      DPRA0 => I2_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I2_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I2_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I2_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_64,
      WCLK => PIN_CLK,
      WE => I2_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I3_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I3_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I3_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I3_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I3_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I3_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_9,
      DPO => S_50,
      DPRA0 => I3_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I3_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I3_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I3_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_63,
      WCLK => PIN_CLK,
      WE => I3_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I4_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I4_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I4_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I4_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I4_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I4_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_8,
      DPO => S_49,
      DPRA0 => I4_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I4_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I4_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I4_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_62,
      WCLK => PIN_CLK,
      WE => I4_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I5_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I5_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I5_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I5_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I5_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I5_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_7,
      DPO => S_48,
      DPRA0 => I5_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I5_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I5_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I5_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_61,
      WCLK => PIN_CLK,
      WE => I5_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I6_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I6_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I6_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I6_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I6_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I6_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_6,
      DPO => S_47,
      DPRA0 => I6_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I6_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I6_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I6_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_60,
      WCLK => PIN_CLK,
      WE => I6_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I7_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I7_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I7_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I7_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I7_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I7_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_5,
      DPO => S_46,
      DPRA0 => I7_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I7_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I7_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I7_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_59,
      WCLK => PIN_CLK,
      WE => I7_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I8_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I8_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I8_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I8_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I8_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I8_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_4,
      DPO => S_45,
      DPRA0 => I8_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I8_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I8_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I8_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_58,
      WCLK => PIN_CLK,
      WE => I8_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I9_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I9_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I9_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I9_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I9_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I9_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_3,
      DPO => S_44,
      DPRA0 => I9_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I9_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I9_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I9_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_57,
      WCLK => PIN_CLK,
      WE => I9_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I10_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I10_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I10_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I10_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I10_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I10_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_2,
      DPO => S_43,
      DPRA0 => I10_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I10_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I10_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I10_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_56,
      WCLK => PIN_CLK,
      WE => I10_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I11_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I11_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I11_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I11_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I11_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I11_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_1,
      DPO => S_42,
      DPRA0 => I11_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I11_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I11_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I11_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_55,
      WCLK => PIN_CLK,
      WE => I11_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'FIFORam'
  I12_FIFORam_tx_dma_ctrl_opt_253 : RAM16X1D
    GENERIC MAP (
      INIT => X"0000"
    )
    PORT MAP (
      A0 => I12_FIFORam_tx_dma_ctrl_opt_253_A0,
      A1 => I12_FIFORam_tx_dma_ctrl_opt_253_A1,
      A2 => I12_FIFORam_tx_dma_ctrl_opt_253_A2_GND,
      A3 => I12_FIFORam_tx_dma_ctrl_opt_253_A3_GND,
      D => I12_FIFORam_tx_dma_ctrl_opt_253_D_DataIntoFIFO_0,
      DPO => S_41,
      DPRA0 => I12_FIFORam_tx_dma_ctrl_opt_253_DPRA0,
      DPRA1 => I12_FIFORam_tx_dma_ctrl_opt_253_DPRA1,
      DPRA2 => I12_FIFORam_tx_dma_ctrl_opt_253_DPRA2_GND,
      DPRA3 => I12_FIFORam_tx_dma_ctrl_opt_253_DPRA3_GND,
      SPO => S_54,
      WCLK => PIN_CLK,
      WE => I12_FIFORam_tx_dma_ctrl_opt_253_WE
    );

  -- MPRAM component instance 'dma_mem'
  I0_dma_mem_tx_dma_ctrl_opt_299 : RAM128X1D
    GENERIC MAP (
      INIT => X"00000000000000000000000000000000"
    )
    PORT MAP (
      A => I0_dma_mem_tx_dma_ctrl_opt_299_A_AddrIn,
      D => I0_dma_mem_tx_dma_ctrl_opt_299_D_DataIn,
      DPO => DataOut,
      DPRA => DMA_ADDR,
      SPO => DataOut_1,
      WCLK => PIN_CLK,
      WE => I0_dma_mem_tx_dma_ctrl_opt_299_WE
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_693 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_693_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_11
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_674 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_674_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_10
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_646 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_646_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_9
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_628 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_628_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_8
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_617 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_617_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_7
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_590 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_590_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_6
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_584 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_584_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_5
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_556 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_556_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_4
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_544 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_544_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_3
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_345 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_345_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_2
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_335 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_335_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut_1
    );

  -- Startup block
  I0_start_tx_dma_ctrl_opt_305 : CelStart
    GENERIC MAP (
      inpipelength => 11,
      outpipelength => 3
    )
    PORT MAP (
      aclr => I0_start_tx_dma_ctrl_opt_305_aclr_GND,
      clk => PIN_CLK,
      sclr => PIN_RESET,
      start => StartOut
    );

END;

