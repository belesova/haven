/* rx_dma_ctrl_opt.hcc: DMA engine controller - optimalized RX part
 * Copyright (C) 2008 CESNET
 * Author(s): Petr Kastovsky <kastovsky@liberouter.org>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of the Company nor the names of its contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * This software is provided ``as is'', and any express or implied
 * warranties, including, but not limited to, the implied warranties of
 * merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall the company or contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute
 * goods or services; loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether
 * in contract, strict liability, or tort (including negligence or
 * otherwise) arising in any way out of the use of this software, even
 * if advised of the possibility of such damage.
 *
 * $Id: rx_dma_ctrl_opt.hcc 13727 2010-05-12 07:50:30Z pus $
 *
 */

#include <stdlib.hch>


/* Constants definition block */
#define DESC_WIDTH         64
#define MEM_PAGE_SIZE      4096
#define PAGE_MASK_WIDTH    (log2ceil(MEM_PAGE_SIZE))
#define DESC_BASE_WIDTH    (DESC_WIDTH - PAGE_MASK_WIDTH)
#define DMA_ADDR_WIDTH     (log2ceil(128/DMA_DATA_WIDTH))
#define DESC_PARTS         (DESC_WIDTH/DMA_DATA_WIDTH) 
#define DESC_PARTS_WIDTH   (log2ceil(128/DMA_DATA_WIDTH))

#define SENT_LENGTH_FIFO_LENGTH 2 // should be power of 2
#define SW_PTR_SIZE        32
#define HW_PTR_SIZE        13  // Don't change!
#define HW_BUF_SIZE        13  // Here you can change size of HW Buffer. Incremented by 1

/*
Type           Popis
 0             Request data transfer RAM => FPGA
 2             Request data transfer FPGA => RAM
*/
#define TYPE_RAM2FPGA   0
#define TYPE_FPGA2RAM   1

/* Tag            Description */
#define TAG_DESC    0x0 // descriptor block transfer
#define TAG_DATA    0x1 // packet data transfer
#define TAG_WIDTH   12  // look only at lower 12 bits, 4 MSB bits used for DMA controller id

/*
Value     Status
  0       Undefined
  1       Idle
  2       Running
  4       Pause
*/
#define STATUS_UNDEFINED 0
#define STATUS_IDLE      1
#define STATUS_RUNNING   2
#define STATUS_PAUSE     4
#define STATUS_DEBUG     0xF

/*------ Output signals ----------------*/
signal unsigned 2  ifc_interrupt = 0;
signal unsigned 1  ifc_interrupt0 = 0;
signal unsigned 1  ifc_interrupt1 = 0;
signal unsigned 1  ifc_enable = 0;
/*-----+ receive buffer interface */
signal unsigned 16 ifc_buf_rellen = 0;
signal unsigned 1  ifc_buf_rellen_dv = 0;
signal unsigned 1  ifc_buf_newlen_rdy = 1;
/*-----+ descriptor fifo interface */
signal unsigned 1  ifc_desc_read = 0;
/*-----+ memory interface */
signal unsigned 32 ifc_sw_drd = 0;
signal unsigned 1  ifc_sw_ardy = 0;
signal unsigned 1  ifc_sw_drdy = 0;
/*-----+ dma interface */
signal unsigned 1  ifc_dma_req = 0;
signal unsigned DMA_DATA_WIDTH ifc_dma_dout = 0;


/* Debug signals */
signal unsigned 1 debugDmaAckWait = 0;


#if __VHDL__
/******  Common interface **************/
set reset = external "RESET" with {synchronous=1};
set clock = external "CLK";
/*     + generics mapped to interface signals */
interface port_in                   (unsigned int 32 BUFFER_ADDR)    buffer_addr()  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 16 BUFFER_SIZE)    buffer_size()  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 8  DMA_TAG_ID)     dma_tag_id()   with {vhdl_type = "std_logic_vector"};
//interface port_in                   (unsigned int 8  DMA_DATA_WIDTH) dma_data_width() with {vhdl_type = "std_logic_vector"};
/*     + interrupt signal */
interface port_out() interrupt      (unsigned int 2  INTERRUPT = ifc_interrupt) with {vhdl_type = "std_logic_vector"};
interface port_out() enable         (unsigned int 1  ENABLE    = ifc_enable);
/*     + receive buffer interface */
interface port_in                   (unsigned int 16 BUF_NEWLEN)     buf_newlen() with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 1  BUF_NEWLEN_DV)  buf_newlen_dv();
interface port_out() buf_newlen_rdy (unsigned int 1  BUF_NEWLEN_RDY = ifc_buf_newlen_rdy);
interface port_out() buf_rellen     (unsigned int 16 BUF_RELLEN     = ifc_buf_rellen) with {vhdl_type = "std_logic_vector"};
interface port_out() buf_rellen_dv  (unsigned int 1  BUF_RELLEN_DV  = ifc_buf_rellen_dv);
/*     + descriptor fifo interface */
interface port_out() desc_read      (unsigned int 1  DESC_READ = ifc_desc_read);
interface port_in                   (unsigned int DMA_DATA_WIDTH DESC_DO)    desc_do() with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 1  DESC_EMPTY) desc_empty();
/*     + memory interface */
interface port_in                   (unsigned int 32 SW_DWR)  sw_dwr()  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 32 SW_ADDR) sw_addr() with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 1  SW_RD)   sw_rd();
interface port_in                   (unsigned int 1  SW_WR)   sw_wr();
interface port_in                   (unsigned int 4  SW_BE)   sw_be()   with {vhdl_type = "std_logic_vector"};
interface port_out() sw_drd         (unsigned int 32 SW_DRD  = ifc_sw_drd)   with {vhdl_type = "std_logic_vector"};
interface port_out() sw_ardy        (unsigned int 1  SW_ARDY = ifc_sw_ardy);
interface port_out() sw_drdy        (unsigned int 1  SW_DRDY = ifc_sw_drdy);
/*     + DMA interface */
interface port_out() dma_req        (unsigned int 1  DMA_REQ  = ifc_dma_req);
interface port_out() dma_dout       (unsigned int DMA_DATA_WIDTH DMA_DOUT = ifc_dma_dout)  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int DMA_ADDR_WIDTH DMA_ADDR)  dma_addr()  with {vhdl_type = "std_logic_vector"};
interface port_in                   (unsigned int 1  DMA_ACK)   dma_ack();
interface port_in                   (unsigned int 1  DMA_DONE)  dma_done();
interface port_in                   (unsigned int 16 DMA_TAG)   dma_tag()  with {vhdl_type = "std_logic_vector"};

/*     + input ports renaming */
#define HW_BUFFER_ADDR  buffer_addr.BUFFER_ADDR
#define HW_BUFFER_SIZE  buffer_size.BUFFER_SIZE
#define TAG_ID          dma_tag_id.DMA_TAG_ID
#define ifc_buf_newlen  buf_newlen.BUF_NEWLEN
#define ifc_buf_newlen_dv buf_newlen_dv.BUF_NEWLEN_DV
#define ifc_desc_do     desc_do.DESC_DO
#define ifc_desc_empty  desc_empty.DESC_EMPTY
#define ifc_sw_dwr      sw_dwr.SW_DWR
#define ifc_sw_addr     sw_addr.SW_ADDR
#define ifc_sw_rd       sw_rd.SW_RD
#define ifc_sw_wr       sw_wr.SW_WR
#define ifc_sw_be       sw_be.SW_BE
#define ifc_dma_addr    dma_addr.DMA_ADDR
#define ifc_dma_ack     dma_ack.DMA_ACK
#define ifc_dma_done    dma_done.DMA_DONE
#define ifc_dma_tag     dma_tag.DMA_TAG

#endif

#define SENT_LENGTH_FIFO_WIDTH  (HW_PTR_SIZE+1)
/* 1 bit for pageBreakFlag [12] @ 12 bits for length [11:0] */
chan unsigned SENT_LENGTH_FIFO_WIDTH  sentLengthFifo with 
                                 { fifolength = SENT_LENGTH_FIFO_LENGTH}; //, block = "BlockRAM" };

unsigned SW_PTR_SIZE swStrPtr = 0;
unsigned SW_PTR_SIZE swEndPtr = 0;
// Copy of the swEndPtr. Doesn't have to be the same as swEndPtr. Used to
// handle situations when the packet is split between physical pages and the SW
// buffer is nearly full. Then CTRL might think it has more space free in SW
// buffer than actual free space.
unsigned SW_PTR_SIZE localSwEndPtr = 0;

unsigned 32 controlRegister = 0x4;
unsigned 32 statusRegister = STATUS_IDLE;
unsigned 32 bufSizeMask = 0xfff;
unsigned 32 intrRegister = 0x0;
unsigned 32 intrMonitor = 0x0;
unsigned 32 regIntrMonitor = 0x0;
unsigned 1  intrReset = 0x0;
unsigned 1  interruptEnable = 0x0;
unsigned 1  timeoutEnable = 0x0;
unsigned 32 timeoutRegister = 0x0;
unsigned 32 timeoutMonitor = 0x0;

unsigned HW_BUF_SIZE hwStrPtr = 0x0;
unsigned HW_BUF_SIZE hwEndPtr = 0x0;

unsigned 8 dataDMAProgressCnt = 0x0;
signal unsigned 1 dataDMAProgressCnt_Up = 0x0;
signal unsigned 1 dataDMAProgressCnt_Down = 0x0;

signal unsigned 1 dma_done_release = 0;
unsigned (log2ceil(SENT_LENGTH_FIFO_LENGTH) + 1) dma_done_cnt = 0;

/*127              64       32 28 16   4 0
   #----------------|--------|-|---|---|-#
   global_addr
                    local_addr
                             reserved bits
                               tag
                                   lenght
                                       trans_type
*/
mpram {
    rom unsigned DMA_DATA_WIDTH R[128/DMA_DATA_WIDTH];
    ram unsigned DMA_DATA_WIDTH W[128/DMA_DATA_WIDTH];
}
DMAReqMem;


/* ------------ data DMA operations in progress counter --------*/
void main(void) {
   while (1) { 
      if ((dataDMAProgressCnt_Up == 1)&&(dataDMAProgressCnt_Down == 1)) par {
         delay;
      }
      else {
         if (dataDMAProgressCnt_Up == 1) par {
            dataDMAProgressCnt++;
         }
         else {
            if (dataDMAProgressCnt_Down == 1) par {
               dataDMAProgressCnt--;
            }
            else { delay; }
         }
      }
   }
}
/* --------------- new data arrival & enable signaling & dma req output-------*/
void main(void) {
   while (1) par { 
      if (ifc_buf_newlen_dv == 1)
         hwEndPtr += ifc_buf_newlen[HW_BUF_SIZE-1:0];
      else { delay; }
      ifc_enable = (statusRegister == STATUS_IDLE) ? 0 : 1;
      ifc_dma_dout = DMAReqMem.R[ifc_dma_addr];
   }
}

macro expr AddrDiff(a,b) = b - adju(a, width(b)); 
/* --------------- statusRegister ----------------------------*/
unsigned 1 setStoped = 0x1;
unsigned 1 setPaused = 0x0;
void main(void) {
   while (1) {
      while (setStoped == 1)
            statusRegister = (dataDMAProgressCnt == 0x0) ? STATUS_IDLE : STATUS_DEBUG;
      while (setPaused == 1)
            statusRegister = (dataDMAProgressCnt == 0x0) ? STATUS_PAUSE : STATUS_DEBUG;
      statusRegister = STATUS_RUNNING;
   }
}

signal unsigned 1 getNextDesc = 0;
       unsigned 1 newDescReady = 0;
/* --------------- descDownload ----------------------------*/
void main(void) {
   unsigned DESC_PARTS_WIDTH parts;
   while (1) {
      while (getNextDesc == 0) delay; // wait for new descriptor request
      par {
         newDescReady = 0;
         parts = 0;
         while (ifc_desc_empty == 1) delay; // no descriptors ready
      }
      while (parts < DESC_PARTS) par {
         ifc_desc_read = 1;
         DMAReqMem.W[(128/DMA_DATA_WIDTH - DESC_PARTS) + parts] = ifc_desc_do;
         parts++;
      }
      newDescReady = 1;
   }
}

unsigned 1 pageBreakFlag = 0;
/* --------------- P2 process ----------------------------*/
void main(void) { 
   unsigned PAGE_MASK_WIDTH descOffset;
   unsigned HW_BUF_SIZE dataLength;
   unsigned HW_PTR_SIZE hwDataLength;
   unsigned (PAGE_MASK_WIDTH+1) pageFreeSpace;
   unsigned HW_PTR_SIZE length;
   unsigned 32 laddr;
   unsigned SW_PTR_SIZE swFreeSpace;
   unsigned HW_BUF_SIZE localHwEndPtr;
   unsigned 1 getND;
   signal unsigned 64 aggreg;
   signal unsigned 16 tag;
   signal unsigned 4  trans_type;

   par {
#if DMA_DATA_WIDTH == 1
   seq {
      seq ( i = 0; i < 4; i++) {
         DMAReqMem.W[i] = trans_type[i];
      }
      seq ( i = 0; i < 16; i++) {
         DMAReqMem.W[16 + i] = tag[i];
      }
   }

   while (1) par {
      tag = adju(TAG_DATA | TAG_ID, 16);
      trans_type = TYPE_FPGA2RAM;
   }
#endif
#if DMA_DATA_WIDTH == 2
   seq {
      seq ( i = 0; i < 2; i++) {
         DMAReqMem.W[i] = trans_type[2*i+1 : 2*i];
      }
      seq ( i = 0; i < 8; i++) {
         DMAReqMem.W[8 + i] = tag[2*i+1 : 2*i];
      }
   }

   while (1) par {
      tag = adju(TAG_DATA | TAG_ID, 16);
      trans_type = TYPE_FPGA2RAM;
   }
#endif
#if DMA_DATA_WIDTH == 4
   seq {
      DMAReqMem.W[0] = TYPE_FPGA2RAM;
      seq ( i = 0; i < 4; i++) {
         DMAReqMem.W[4 + i] = tag[4*i+3 : 4*i];
      }
   }

   while (1) par {
      tag = adju(TAG_DATA | TAG_ID, 16);
   }
#endif
#if DMA_DATA_WIDTH == 8
   while (1) par {
      tag = adju(TAG_DATA | TAG_ID, 16);
      trans_type = TYPE_FPGA2RAM;
      aggreg = laddr @ tag @ length[HW_PTR_SIZE-2:0] @ trans_type;
   }
#endif

   while (1) {
      while ((controlRegister[2] == 1)&&(pageBreakFlag == 0)) {
         // dma has to finish second part of block - wait for pageBreakFlag == 0
         par { // dma engine stopped - reset variables - default state
            descOffset = 0;
            setStoped = 1;
            setPaused = 0;
            getNextDesc = 1; // read out all descriptors from fifo - after start one desc would be automatically preread
            localHwEndPtr = hwEndPtr;
         } 
      }
      delay;
      while ((controlRegister[0] == 1) || (controlRegister[1] == 1) || (pageBreakFlag == 1)) {
         while ((controlRegister[1] == 1)&&(pageBreakFlag == 0)) par {
         // dma engine is paused and no page-breaking transfer in progress
            setStoped = 0;
            setPaused = 1;
         }
         if (hwStrPtr != localHwEndPtr) { // there are data to send 
            par {
               dataLength = localHwEndPtr[HW_BUF_SIZE-1:0] - hwStrPtr[HW_BUF_SIZE-1:0]  ;
               pageFreeSpace = MEM_PAGE_SIZE - adju(descOffset, PAGE_MASK_WIDTH+1);
               swFreeSpace = (swStrPtr - localSwEndPtr - 1) & bufSizeMask;
               setStoped = 0;
               setPaused = 0;
            }
            if(dataLength > 0x1000)
               hwDataLength = 0x1000;
            else
               hwDataLength = dataLength[HW_PTR_SIZE-1:0];

            if (adju(hwDataLength,SW_PTR_SIZE) > swFreeSpace) {
               localHwEndPtr = hwEndPtr; // update End pointer - now it is safe
                                         // agregate data while waiting for sw buffer
               continue; // progress further if and only if there is enough space in sw buffer
            }
            else {
               delay; // should do something, but could cause critical logic path because of 32bit comparator
            };

            if (hwDataLength <= pageFreeSpace) par {
               length = hwDataLength;
               pageBreakFlag = 0;
            }
            else par {
               length = pageFreeSpace;
               pageBreakFlag = 1;
            }

               // wait for a descriptor and until SW buffer becomes ready
            while (newDescReady == 0) {
               delay;
            };


            //TODO : optimize request sending
#if DMA_DATA_WIDTH == 1
            seq ( i = 0; i < 12; i++) {
               DMAReqMem.W[64 + i] = descOffset[i];
            }
            laddr = HW_BUFFER_ADDR + adju(hwStrPtr, 32); 
            seq ( i = 0; i < 32; i++) {
               DMAReqMem.W[32 + i] = laddr[i];
            }
            seq ( i = 0; i < 12; i++) {
               DMAReqMem.W[4 + i] = length[i];
            }
#endif
#if DMA_DATA_WIDTH == 2
            seq ( i = 0; i < 6; i++) {
               DMAReqMem.W[32 + i] = descOffset[2*i+1:2*i];
            }
            laddr = HW_BUFFER_ADDR + adju(hwStrPtr, 32); 
            seq ( i = 0; i < 16; i++) {
               DMAReqMem.W[16 + i] = laddr[2*i+1:2*i];
            }
            seq ( i = 0; i < 6; i++) {
               DMAReqMem.W[2 + i] = length[2*i+1:2*i];
            }
#endif
#if DMA_DATA_WIDTH == 4
            seq ( i = 0; i < 3; i++) {
               DMAReqMem.W[16 + i] = descOffset[4*i+3:4*i];
            }
            laddr = HW_BUFFER_ADDR + adju(hwStrPtr, 32); 
            seq ( i = 0; i < 8; i++) {
               DMAReqMem.W[8 + i] = laddr[4*i+3:4*i];
            }
            seq ( i = 0; i < 3; i++) {
               DMAReqMem.W[1 + i] = length[4*i+3:4*i];
            }
#endif
#if DMA_DATA_WIDTH == 8
            par {
               DMAReqMem.W[9] = DMAReqMem.W[9][7:4] @ descOffset[11:8];
               laddr = HW_BUFFER_ADDR + adju(hwStrPtr, 32); 
            }

            DMAReqMem.W[8] = descOffset[7:0];
            seq ( i = 0; i < 8; i++) {
               DMAReqMem.W[i] = aggreg[8*i+7:8*i];
            }
#endif
#if DMA_DATA_WIDTH == 16
            par {
               DMAReqMem.W[4] = DMAReqMem.W[4][15:12] @ descOffset;
               laddr = HW_BUFFER_ADDR + adju(hwStrPtr, 32); 
            }

            DMAReqMem.W[3] = laddr[31:16];
            DMAReqMem.W[2] = laddr[15:0];
            DMAReqMem.W[1] = adju(TAG_DATA | TAG_ID, 16);
            DMAReqMem.W[0] = length[HW_PTR_SIZE-2:0] @ TYPE_FPGA2RAM; //if lenght=0 means 0X1000 
#endif
#if DMA_DATA_WIDTH == 32
            par {
               DMAReqMem.W[2] = DMAReqMem.W[2][31:12] @ descOffset;
               laddr = HW_BUFFER_ADDR + adju(hwStrPtr, 32); 
            }

            DMAReqMem.W[1] = laddr;
            DMAReqMem.W[0] = adju(TAG_DATA | TAG_ID, 16) @ length[HW_PTR_SIZE-2:0] @ TYPE_FPGA2RAM;
#endif
#if DMA_DATA_WIDTH == 64
            par {
               DMAReqMem.W[1] = DMAReqMem.W[1][63:12] @ descOffset;
               laddr = HW_BUFFER_ADDR + adju(hwStrPtr, 32); 
            }
            DMAReqMem.W[0] = laddr @ adju(TAG_DATA | TAG_ID, 16) @
               length[PAGE_MASK_WIDTH-1/*HW_PTR_SIZE-2*/:0] @ TYPE_FPGA2RAM;
#endif

            par {
               ifc_dma_req = 1;
               dataDMAProgressCnt_Up = 1;
               descOffset += adju(length, PAGE_MASK_WIDTH); 
               hwStrPtr += adju(length, width(hwStrPtr));
               localSwEndPtr = (localSwEndPtr + adju(length, width(localSwEndPtr))) & bufSizeMask;
            }
            while (ifc_dma_ack == 0) {
               debugDmaAckWait = 1;
            }

            par {
               // add length to p2->p3 fifo
               sentLengthFifo ! (pageBreakFlag @ length);
          	getND = (descOffset == 0) ? 1 : 0; // page is full => get new descriptor
               // DO NOT remove this -- SW buffer overflow protection when
               // transmitting packet over page boundary
            }
            getNextDesc = getND; // page is full => get new descriptor

         }
         else par {
            setStoped = 0;
            setPaused = 0;
            localHwEndPtr = hwEndPtr; // update End pointer - now it is safe
         }
      }
   }
   }

}

void main(void) 
{
   macro expr tag = ((ifc_dma_tag <- TAG_WIDTH) == adju(TAG_DATA | TAG_ID, TAG_WIDTH));
   while (1) par
   {
      if     (ifc_dma_done == 1 && dma_done_release == 0 && tag) dma_done_cnt++;
      else if(ifc_dma_done == 1 && dma_done_release == 1 && tag) delay;
      else if                     (dma_done_release == 1)        dma_done_cnt--;
      else delay;
   }
}


/* --------------- P3 process ----------------------------*/
void main(void) {
   unsigned (HW_PTR_SIZE+1) flag_length;
   unsigned (HW_PTR_SIZE+1) length;
   length = 0;

   while (1) {
      if (dma_done_cnt != 0) {
         sentLengthFifo ? flag_length;
         par {
            dataDMAProgressCnt_Down = 1;
            if (flag_length[HW_PTR_SIZE] == 1)
               length = 0x0 @ flag_length[HW_PTR_SIZE-1:0];
            else
               length += adju(flag_length[HW_PTR_SIZE-1:0], HW_PTR_SIZE+1);

            ifc_buf_rellen = adju(flag_length[HW_PTR_SIZE-1:0], 16);
            ifc_buf_rellen_dv = 1;
            dma_done_release = 1;
            if(intrReset == 1) par {
               intrReset = 0;
               intrMonitor  = adju(flag_length[HW_PTR_SIZE-1:0], width(intrMonitor));
               }
            else
               intrMonitor += adju(flag_length[HW_PTR_SIZE-1:0], width(intrMonitor));
         }
         if (flag_length[HW_PTR_SIZE] == 0) par {
            swEndPtr = (swEndPtr + adju(length, SW_PTR_SIZE)) & bufSizeMask;
            length = 0;
         }
         else { delay; }
      }
      else { delay; }
   }
}

/* --------------- P4 process - interrupt signaling --------------------*/
unsigned int 1 timeoutExpired = 0;
void main(void) {
   while (1) {
      if (timeoutMonitor >= timeoutRegister)
         timeoutExpired = 1;
      else
         timeoutExpired = 0;
   }
}

void main(void) {
   while (1) par {
      ifc_interrupt = ifc_interrupt1 @ ifc_interrupt0; 
      regIntrMonitor = intrMonitor;
   }
}

void main(void) {
   while (1) par {
      if ((interruptEnable == 1) && (regIntrMonitor >= (intrRegister &~3)) && (intrReset == 0)) par {
         interruptEnable = 0;
         timeoutEnable = 0;
         ifc_interrupt0 = 1;
      }
      else { delay; }
      if (ifc_buf_newlen_dv == 1 || intrReset == 1)
         timeoutMonitor = 0x0;
      else if (timeoutEnable == 1 && timeoutExpired == 1) par {
         timeoutEnable = 0;
         interruptEnable = 0;
         timeoutMonitor = 0;
         ifc_interrupt1 = 1;
      }
      else // if(intrReset == 0) // Count up after first packet is received (after write to IR)
         timeoutMonitor++;
   }
}
/*
 * Address decoder
 *
 * Address space
 *
 * Offset  Hex   Length   Description
 *     00  00       4   Control Register
 *     04  04       4   Status Register
 *     08  08       4   Start Pointer
 *     12  0C       4   End Pointer
 *     16  10       4   Buffer Size Mask Register
 *     20  14       4   Interrupt Register
 *     24  18       4   Timeout Register
 *     28  1C       4   hwStrPtr -- debug purposes
 *     32  20       4   hwEndPtr -- debug purposes
 */

void main(void)
{
   while (1) par {
      ifc_sw_ardy = ifc_sw_wr | ifc_sw_rd;
      ifc_sw_drdy = ifc_sw_rd;
      if (ifc_sw_wr == 1) {
         switch (ifc_sw_addr[5:0]) {
            case 0x00 :
                  controlRegister = ifc_sw_dwr;
               break;
            case 0x04 :
                  delay; // statusRegister is read only
               break;
            case 0x08 :
                  swStrPtr = ifc_sw_dwr;
               break;
            case 0x0C :
                  // When running - no writing  !!!
                  if (controlRegister[2] == 1) par {
                     swEndPtr      = ifc_sw_dwr;
                     localSwEndPtr = ifc_sw_dwr;
                  }
                  else { delay; }
               break;
            case 0x10 :
                  bufSizeMask = ifc_sw_dwr;
               break;
            case 0x14 :
               par {
                  intrReset = 1;
                  intrRegister = ifc_sw_dwr;    // INFO: Software reads 1, although interrupts are not generated. Caused by following 2 lines.
                  interruptEnable = ifc_sw_dwr[1];
                  timeoutEnable = ifc_sw_dwr[0];
               }
               break;
            case 0x18 :
                  timeoutRegister = ifc_sw_dwr;
               break;
            default :
                  delay;
               break;
         }
      }
      else if (ifc_sw_rd == 1) {
         switch (ifc_sw_addr[5:0]) {
            case 0x00 :
               ifc_sw_drd = controlRegister;
               break;
            case 0x04 :
               ifc_sw_drd = statusRegister;
               break;
            case 0x08 :
               ifc_sw_drd = swStrPtr;
               break;
            case 0x0C :
               ifc_sw_drd = swEndPtr;
               break;
            case 0x10 : 
               ifc_sw_drd = bufSizeMask;
               break;
            case 0x14 : 
               ifc_sw_drd = intrRegister;
               break;
            case 0x18 : 
               ifc_sw_drd = timeoutRegister;
               break;
            case 0x1C : 
               ifc_sw_drd = 0x0 @ hwStrPtr;
               break;
            case 0x20 : 
               ifc_sw_drd = 0x0 @ hwEndPtr;
               break;

            // Debug space -- will be removed in optimized version
            case 0x24 :
               ifc_sw_drd = adju(ifc_desc_read @ ifc_desc_empty @
                                 ifc_desc_do, width(ifc_sw_drd));
               break;
            case 0x28 :
               ifc_sw_drd = adju(ifc_buf_newlen_rdy @ ifc_buf_newlen_dv @
                                 ifc_buf_newlen, width(ifc_sw_drd));
               break;
            case 0x2C: 
               ifc_sw_drd = adju(ifc_buf_rellen_dv @ ifc_buf_rellen,
                                 width(ifc_sw_drd));
               break;
            case 0x30:
               ifc_sw_drd = localSwEndPtr;
               break;
            case 0x34:
               ifc_sw_drd = adju(debugDmaAckWait, 32);
               break;
            default : 
               ifc_sw_drd = 0x0;
               break; 
         } 
      }
      else { delay; }
   }
}
