<?xml version="1.0" encoding="iso-8859-2"?>
<source>
   <component>Internal Bus Simulation Component</component>

   <authors>
      <author login="xkobie00">Petr Kobiersky</author>
   </authors>

   <features>
      <item>Generate local read and write transaction</item>
      <item>Log outcoming and incoming transactions</item> 
      <item>Functions for generating bus transactions</item>
   </features>
   

   <description>
      Easy use component for creating read and write transaction on Internal Bus. Internal Bus
      transactions can be generated by function calls from testbench file. This component also
      support loging incoming and outcoming transaction in user readable file.
   </description>
   
   <interface>
      <generic_map>
         <generic name="UPSTREAM_LOG_FILE" type="string" default="">
			   Specify path to file where upstream transaction is logged.
         </generic>
         
		   <generic name="DOWNSTREAM_LOG_FILE" type="string" default="">
			   Specify path to file where downstream transaction is logged.
         </generic>
      </generic_map>
      
      <port_map>
         <divider>Common Interface</divider>
         
         <port name="IB_CLK" dir="in" width="1">
            Internal Bus Clock.
         </port>
           
         <port name="IB_RESET" dir="in" width="1">
            Internal Bus Reset.
         </port>
         
         <divider>Internal Bus Interface</divider>
         
         <port name="INTERNAL_BUS" dir="inout" width="t_internal_bus64">
            Internal Bus Port
         </port> 

         <divider>Simulation Interface</divider>

         <port name="STATUS" dir="out" width="t_ib_status">
            Status interface - Readed data is also send to this interface  
         </port>

         <port name="CTRL" dir="in" width="t_ib_ctrl">
            Ctrl port - set command for IB_SIM command
         </port>

         <port name="STROBE" dir="in" width="1">
            Strobe command on CTRL port
         </port>

         <port name="BUSY" dir="out" width="1">
            IB_SIM is BUSY (sending or waiting for some read transaction)            
         </port>
      </port_map>
   </interface>
  
   <body>
      
<!-- Here is description in standard Satrapa format-->
<h2>Informations</h2>
   <p>
      When you want to use IB_SIM component ib_sim_oper package must be included<br/>
      <i>use work.ib_sim_oper.all; -- Internal Bus Simulation Package</i>
   </p>
   <p>
      Simulation interface of ib_sim must be connected to folowing signal names:<br/>
      STATUS             => ib_sim_status <br/>
      CTRL               => ib_sim_ctrl   <br/>
      STROBE             => ib_sim_strobe <br/>
      BUSY               => ib_sim_busy   <br/>
   </p>

<h2>IB_OP procedure for testbench</h2>
   <p>
   This procedure must be placed to your testbench file. Using this procedure is
   IB_SIM gets BUS operations.
         
   <pre>	    
   procedure ib_op(ctrl : in t_ib_ctrl) is
   begin
      wait until (IB_CLK'event and IB_CLK='1' and ib_sim_busy = '0');
      ib_sim_ctrl &lt;= ctrl;
      ib_sim_strobe &lt;= '1';
      wait until (IB_CLK'event and IB_CLK='1');
      ib_sim_strobe &lt;= '0';
   end ib_op;
   </pre>
   </p>

   
<h2>Supported commands for IB_SIM</h2>
   <p>
   Result of this five functions can be used as a parametr for
   ib_op procedure.<br/>
   Ex. <i>ib_op(ib_local_write_file(16#22222220#, 64, "./tests/test_write0.txt"));</i>
   </p>

   <p>
   <b><i>Send Local Read Transaction</i></b>
   <pre>
   function ib_local_read(src_addr    : in std_logic_vector(31 downto 0); -- Address from where are data readed
                          dst_addr    : in std_logic_vector(31 downto 0); -- Destination address of completition transaction
                          length      : in integer;                       -- Number of bytes to be readed
                          tag         : in integer;                       -- Transaction Tag
                          read_wait   : in boolean:=false)                -- Wait for completition transaction
                     return t_ib_ctrl;
   </pre>
   
   <b><i>Send Local Read Transaction (Readed data is saved to file)</i></b>
   <pre>
   function ib_local_read_file(src_addr    : in std_logic_vector(31 downto 0); -- Address from where are data readed
                               dst_addr    : in std_logic_vector(31 downto 0); -- Destination address of completition transaction
                               length      : in integer;                       -- Number of bytes to be readed
                               tag         : in integer;                       -- Transaction Tag
                               file_name   : in string)                        -- Filename where are readed data saved (64 bit hexa values)
                     return t_ib_ctrl;
   </pre>

   <b><i>Send Local Write Transaction (up to 64 bits of data)</i></b>
   <pre>
   function ib_local_write(dst_addr   : in std_logic_vector(31 downto 0);  -- Destination address of write transaction
                           src_addr   : in std_logic_vector(31 downto 0);  -- From where are write transaction generated
                           length     : in integer;                        -- Length of writen data
                           tag        : in integer;                        -- Transaction Tag
                           trans_flag : in std_logic;                      -- 0 - No ACK/ 1 - Write completition ACK
                           data       : in std_logic_vector(63 downto 0))  -- Data to be writen
                     return t_ib_ctrl;
   </pre>
   
   <b><i>Send Local Write Transaction (Write data from file)</i></b>
   <pre>
   function ib_local_write_file(dst_addr   : in std_logic_vector(31 downto 0); -- Destination address of write transaction
                                src_addr   : in std_logic_vector(31 downto 0); -- From where are write transaction generated
                                length     : in integer;                       -- Length of writen data (when 0 all data from file is writen)
                                tag        : in integer;                       -- Transaction Tag
                                trans_flag : in std_logic;                     -- 0 - No ACK/ 1 - Write completition ACK
                                file_name  : in string)                        -- Filename from where are data writen (64 bit hexa values)
                     return t_ib_ctrl;
   </pre>

   <b><i>Send Local Write Transaction (Write 32 bit data from file)</i></b>
   <pre>
   function ib_local_write_file32(dst_addr   : in std_logic_vector(31 downto 0); -- Destination address of write transaction
                                  src_addr   : in std_logic_vector(31 downto 0); -- From where are write transaction generated
                                  length     : in integer;                       -- Length of writen data (when 0 all data from file is writen)
                                  tag        : in integer;                       -- Transaction Tag
                                  trans_flag : in std_logic;                     -- 0 - No ACK/ 1 - Write completition ACK
                                  file_name  : in string)                        -- Filename from where are data writen (64 bit hexa values)
                     return t_ib_ctrl;
   </pre>

   <b><i>Send Read Completition Transaction (Write data from file) - only for busmastering operations</i></b>
   <pre>
   function ib_read_completition(dst_addr    : in std_logic_vector(31 downto 0); -- Destination address of read completition
                                 src_addr    : in std_logic_vector(31 downto 0); -- Src address of completition transaction
                                 length      : in integer;                       -- Transaction Length (when 0 all data from file is writen)
                                 tag         : in integer;                       -- Transaction Tag
                                 file_name   : in string)                        -- Filename from where are data writen
                     return t_ib_ctrl;
   </pre>

   <b><i>Send Write Completition Transaction - only for busmastering operations</i></b>
   <pre>
   function ib_write_completition(dst_addr    : in std_logic_vector(31 downto 0); -- Destination address of write completition
                                  src_addr    : in std_logic_vector(31 downto 0); -- Src address of completition transaction
                                  length      : in integer;                       -- Transaction Length
                                  tag         : in integer)                       -- Transaction Tag
                     return t_ib_ctrl;
   </pre>
   </p>

</body>  
</source>
