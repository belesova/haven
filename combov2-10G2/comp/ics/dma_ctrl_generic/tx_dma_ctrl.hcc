/* tx_dma_ctrl.hcc: Generic DMA controller - TX part
 * Copyright (C) 2009 CESNET
 * Author(s): Martin Spinler <xspinl00@stud.fit.vutbr.cz>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of the Company nor the names of its contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * This software is provided ``as is'', and any express or implied
 * warranties, including, but not limited to, the implied warranties of
 * merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall the company or contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute
 * goods or services; loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether
 * in contract, strict liability, or tort (including negligence or
 * otherwise) arising in any way out of the use of this software, even
 * if advised of the possibility of such damage.
 *
 * $Id: tx_dma_ctrl.hcc 14904 2010-08-06 10:47:46Z xspinl00 $
 *
 */

#include <stdlib.hch>
#include "common.hch"

/* ---------------------------- SIGNALS --------------------------- */
/*     + receive buffer interface */
signal unsigned 16                  ifc_buf_newlen;
signal unsigned 1                   ifc_buf_newlen_dv = 0;
signal unsigned IFC_WIDTH           ifc_buf_newlen_ifc;

#if __VHDL__
/*     + transmit buffer interface */
interface port_in                   (unsigned int 16              BUF_RELLEN)       buf_rellen()        with { vhdl_type = "std_logic_vector" };
interface port_in                   (unsigned int 1               BUF_RELLEN_DV)    buf_rellen_dv();
interface port_out() buf_newlen     (unsigned int 16              BUF_NEWLEN      = ifc_buf_newlen)     with { vhdl_type = "std_logic_vector" };
interface port_out() buf_newlen_dv  (unsigned int 1               BUF_NEWLEN_DV   = ifc_buf_newlen_dv);
#if IFC_COUNT != 1
interface port_in                   (unsigned int IFC_WIDTH       BUF_RELLEN_IFC)   buf_rellen_ifc()    with { vhdl_type = "std_logic_vector" };
interface port_out() buf_newlen_ifc (unsigned int IFC_WIDTH       BUF_NEWLEN_IFC  = ifc_buf_newlen_ifc) with { vhdl_type = "std_logic_vector" };

/*     + input ports renaming */
#define ifc_buf_rellen_ifc          buf_rellen_ifc.BUF_RELLEN_IFC
#else
#define ifc_buf_rellen_ifc          0
interface port_in                   (unsigned int 1               BUF_RELLEN_IFC)   buf_rellen_ifc()    with { vhdl_type = "std_logic_vector" };
interface port_out() buf_newlen_ifc (unsigned int 1               BUF_NEWLEN_IFC  = helper)             with { vhdl_type = "std_logic_vector" };
#endif

#define ifc_buf_rellen              buf_rellen.BUF_RELLEN
#define ifc_buf_rellen_dv           buf_rellen_dv.BUF_RELLEN_DV
#endif


/* ----------------------- GLOBAL REGISTERS ----------------------- */
mpram { ram unsigned 3           W[IFC_COUNT]; rom unsigned 3           R[IFC_COUNT]; } controlRegister with { block = "SelectRAM" };
mpram { ram unsigned 3           W[IFC_COUNT]; rom unsigned 3           R[IFC_COUNT]; } statusRegister  with { block = "SelectRAM" };
mpram { ram unsigned SW_PTR_SIZE W[IFC_COUNT]; rom unsigned SW_PTR_SIZE R[IFC_COUNT]; } intMonitor      with { block = "SelectRAM" };
mpram { ram unsigned SW_PTR_SIZE W[IFC_COUNT]; rom unsigned SW_PTR_SIZE R[IFC_COUNT]; } intStrPtr       with { block = "SelectRAM" };
mpram { ram unsigned SW_PTR_SIZE W[IFC_COUNT]; rom unsigned SW_PTR_SIZE R[IFC_COUNT]; } swEndPtr        with { block = "SelectRAM" };
mpram { ram unsigned SW_PTR_SIZE W[IFC_COUNT]; rom unsigned SW_PTR_SIZE R[IFC_COUNT]; } swStrPtr        with { block = "SelectRAM" };
mpram { ram unsigned HW_PTR_SIZE W[IFC_COUNT]; rom unsigned HW_PTR_SIZE R[IFC_COUNT]; } hwEndPtr        with { block = "SelectRAM" };
mpram { ram unsigned HW_PTR_SIZE W[IFC_COUNT]; rom unsigned HW_PTR_SIZE R[IFC_COUNT]; } hwStrPtr        with { block = "SelectRAM" };
ram unsigned SW_PTR_SIZE                         localSwStrPtr[IFC_COUNT]                               with { block = "SelectRAM" };
ram unsigned DESC_WIDTH                          descriptor[IFC_COUNT]                                  with { block = "SelectRAM" };
unsigned int 1                                   descriptorReady[IFC_COUNT];
unsigned int 1                                   intEnable[IFC_COUNT];
unsigned int 1                                   intReset[IFC_COUNT];
unsigned int 1                                   swStrPtrReset1[IFC_COUNT];      // for localSwStrPtr in NEW DATA process
unsigned int 1                                   swStrPtrReset2[IFC_COUNT];      // for swStrPtr in DATA SEND process
unsigned int DMAREQ_WIDTH                        DMARequest[DMA_PARTS];

signal unsigned int 1                            dma_done_release = 0;
unsigned int (log2ceil(PENDING_FIFO_LENGTH))     dma_done_cnt = 0;
chan unsigned int PENDING_FIFO_WIDTH             DMAPendingRequests_Fifo with { fifolength = PENDING_FIFO_LENGTH };

#ifdef SELECTRAM
mpram { ram unsigned SW_PTR_SIZE W[IFC_COUNT]; rom unsigned SW_PTR_SIZE R[IFC_COUNT]; } swStrPtrValue1  with { block = "SelectRAM" };
mpram { ram unsigned SW_PTR_SIZE W[IFC_COUNT]; rom unsigned SW_PTR_SIZE R[IFC_COUNT]; } swStrPtrValue2  with { block = "SelectRAM" };
mpram { ram unsigned SW_PTR_SIZE W[IFC_COUNT]; rom unsigned SW_PTR_SIZE R[IFC_COUNT]; } swBufferMask1   with { block = "SelectRAM" };
mpram { ram unsigned SW_PTR_SIZE W[IFC_COUNT]; rom unsigned SW_PTR_SIZE R[IFC_COUNT]; } swBufferMask2   with { block = "SelectRAM" };
#else
unsigned int SW_PTR_SIZE                         swBufferMask[IFC_COUNT];
unsigned int SW_PTR_SIZE                         swStrPtrValue[IFC_COUNT];
#endif


/* ------------------------ NEW DATA PROCESS --------------------- */
/* --------------- data sent ----------------*/
void main(void)
{
   unsigned IFC_WIDTH i;
   unsigned (HW_PTR_SIZE) rellen;
   unsigned 1 dv;
   seq (j = 0; j < IFC_COUNT; ++j)
   {
      hwStrPtr.W[j] = BUFFER_SIZE;
   }
   while (1) par
   {
      par
      {
         i = ifc_buf_rellen_ifc;
         dv = ifc_buf_rellen_dv;
         rellen = ifc_buf_rellen[HW_PTR_SIZE-1:0];
      }
      if(dv == 1)
         hwStrPtr.W[i] += rellen;
   }
}

/* --------------- main process ------------------*/
unsigned 3                 cr;
unsigned SW_PTR_SIZE       swStr;
unsigned SW_PTR_SIZE       swEnd;
unsigned SW_PTR_SIZE       swDiff; 
unsigned HW_PTR_SIZE       length; 
unsigned HW_PTR_SIZE       hwLength; 
unsigned (PAGE_WIDTH+1)    pageSpace;
unsigned DESC_WIDTH        newDescriptor;
unsigned IFC_WIDTH         newData_activeIfc = 0;

void main(void)
{
   seq (j = 0; j < IFC_COUNT; ++j)
   {
      par
      {
         descriptorReady[j] = 0;
         statusRegister.W[j] = STATUS_STOPPED;
         controlRegister.W[j] = 1 << CONTROL_STOP;
         swStrPtrReset1[j] = 1;
         swStrPtrReset2[j] = 1;
         swStrPtrValue1W[j] = 0;
      }
   }

   while(1)
   {
      #if IFC_COUNT == 1
      macro expr i = 0;
      cr = controlRegister.R[i];
      #else
      macro expr i = newData_activeIfc;
      par
      {
         i = i + 1;
         cr = controlRegister.R[i+1];
      }
      #endif
      if(cr[CONTROL_STOP] == 1) par
      {
         #if IFC_COUNT == 1
         ifc_enable = 0;
         #else
         ifc_enable &= ~decode(i);
         #endif
         statusRegister.W[i] = STATUS_STOPPED;
         descriptorReady[i] = 0;
         intEnable[i] = 0;
      }
      else if(cr[CONTROL_RUN] == 1)
      {
         par
         {
            #if IFC_COUNT == 1
            ifc_enable = 1;
            #else
            ifc_enable |= decode(i);
            #endif
            ifc_desc_ifc = i;
            hwLength = hwStrPtr.R[i] - hwEndPtr.W[i];
            swEnd = swEndPtr.R[i];
            statusRegister.W[i] = STATUS_RUNNING;
            if(swStrPtrReset1[i] == 1) par
            {
               swStrPtrReset1[i] = 0;
               swStr = swStrPtrValue1R[i];
               localSwStrPtr[i] = swStrPtrValue1R[i];
            }
            else
               swStr = localSwStrPtr[i];
         }

         par
         {
            swDiff = swEnd - swStr;
            if(descriptorReady[i] == 0 && ifc_desc_empty == 0) 
            {
               ifc_desc_read = 1;
               while(ifc_desc_dv != 1) delay;
               par
               {
                  descriptor[i] = ifc_desc_data;
                  descriptorReady[i] = 1;
               }
            }
         }
         if(swEnd != swStr && descriptorReady[i] == 1/* && hwLength != 0*/)
         {
            delay;
            if(hwLength != 0)
            {
               par
               {
                  pageSpace = PAGE_SIZE - adju(descriptor[i][PAGE_WIDTH-1:0], PAGE_WIDTH + 1);
                  if(swDiff < adju(hwLength, SW_PTR_SIZE))
                     length = adju(swDiff, width(length));
                  else
                     length = hwLength;
               }
               if(length > 0x0 @ pageSpace)
                  length = 0x0 @ pageSpace;
               else
                  delay;
               #if DMAREQ_WIDTH == 32
               par
               {
                  DMARequest[3] = descriptor[i][63:32];
                  DMARequest[2] = descriptor[i][31:0];
                  #if IFC_COUNT == 1
                  DMARequest[1] = BUFFER_ADDR + adju(hwEndPtr.W[i][HW_PTR_SIZE-2:0], 32);
                  DMARequest[0] = TAG_TX <- 16 @ length[PAGE_WIDTH-1:0] @ TYPE_RAM2FPGA <- 4; 
                  #else
                  DMARequest[1] = BUFFER_ADDR + adju(i @ adju(hwEndPtr.W[i][HW_PTR_SIZE-2:0], log2ceil(BUFFER_AREA)), 32);
                  DMARequest[0] = adju(i, 15) @ TAG_TX <- 1 @ length[PAGE_WIDTH-1:0] @ TYPE_RAM2FPGA <- 4; 
                  #endif

                  swEnd = swStr + adju(length, 32);
                  newDescriptor = descriptor[i][63:PAGE_WIDTH] @ (length[PAGE_WIDTH-1:0] + descriptor[i][PAGE_WIDTH-1:0]);
               }
               #else
                  #error "This DMAREQ_WIDTH is unimplemented. Add a few lines here."
               #endif
               par
               {
                  ifc_dma_req = 1;
                  while (ifc_dma_ack == 0)
                     ifc_dma_dout = DMARequest[ifc_dma_addr];

                  DMAPendingRequests_Fifo ! (i @ length[HW_PTR_SIZE-1:0]);
                  if(newDescriptor[PAGE_WIDTH-1:0] == 0)
                     descriptorReady[i] = 0;
                  descriptor[i] = newDescriptor;
                  hwEndPtr.W[i] += adju(length, HW_PTR_SIZE);
                  localSwStrPtr[i] = swEnd & swBufferMask1R[i];  // (localSwStrPtr + length) & swMask
               }  
            }
         }
         else
            delay;
      }
      else
         delay;
   }
}


/* ----------------------- DATA SEND PROCESS ---------------------- */

void main(void) 
{
   while (1) par
   {
      if     (ifc_dma_done == 1 && dma_done_release == 0 ) dma_done_cnt++;
      else if(ifc_dma_done == 0 && dma_done_release == 1 ) dma_done_cnt--;
      else delay;
   }
}

unsigned PENDING_FIFO_WIDTH DMAPendingRequest;
unsigned SW_PTR_SIZE strPtr;
unsigned SW_PTR_SIZE endPtr;
unsigned SW_PTR_SIZE monitor;

void main(void) 
{
   while (1) 
   {
      if(dma_done_cnt != 0)
      {
         #if IFC_COUNT == 1
         macro expr i = 0;
         #else
         macro expr i = DMAPendingRequest[PENDING_FIFO_WIDTH-1:HW_PTR_SIZE];
         #endif

         macro expr length = DMAPendingRequest[HW_PTR_SIZE-1:0];
         par
         {
            DMAPendingRequests_Fifo ? DMAPendingRequest;
            dma_done_release = 1;
         }
         par
         {
            if(swStrPtrReset2[i] == 1)
               strPtr = swStrPtrValue2R[i];
            else
               strPtr = swStrPtr.W[i];

            monitor = intMonitor.W[i];
         }
         par
         {
            ifc_buf_newlen = adju(length, width(ifc_buf_newlen));
            ifc_buf_newlen_dv = 1;
            ifc_buf_newlen_ifc = i;

            if(intReset[i] == 1) par
            {
               intReset[i] = 0;
               intMonitor.W[i] = adju(length, 32);
            }
            else
               intMonitor.W[i] = monitor + adju(length, 32); 
         }
         par
         {
            swStrPtrReset2[i] = 0;
            swStrPtr.W[i] = (strPtr + adju(length, SW_PTR_SIZE)) & swBufferMask2R[i];
         }
      }
      else
         delay;
   }
}


/* ----------------------- INTERRUPT PROCESS ---------------------- */
unsigned 32 intReg;
unsigned 1  compare;

void main(void) 
{
   while (1) 
   {
      #if IFC_COUNT == 1
      macro expr i = 0;
      delay;
      #else
      macro expr i = ifc_interrupt_ifc;
      i = i + 1;
      #endif
      intReg = intStrPtr.R[i];
      if(intMonitor.R[i] >= (intReg & ~0x3))
         compare = 1;
      else
         compare = 0;

      if(compare && intEnable[i] == 1 && intReg[1] == 1 && intReset[i] == 0) par 
      {
         ifc_interrupt = 0x1;
         intEnable[i] = 0;
      }
      else
         delay;
   }
}

/* ------------------------ Address decoder ----------------------- 
 *
 * Offset  Hex   Description
 *     00  0x00  Control Register
 *     04  0x04  Status Register
 *     08  0x08  Start Pointer
 *     12  0x0C  End Pointer
 *     16  0x10  Buffer Size Mask Register
 *     20  0x14  Interrupt Register
 *     24  0x18  Timeout Register
 */

void main(void)
{
   while (1) par 
   {
      #if IFC_COUNT == 1
      macro expr i = 0;
      #else
      macro expr i = ifc_sw_addr[7+IFC_WIDTH-1:7];
      #endif
      ifc_sw_ardy = ifc_sw_wr | ifc_sw_rd;
      ifc_sw_drdy = ifc_sw_rd;
      if(ifc_sw_wr == 1) 
      {
         switch (ifc_sw_addr[5:0])
         {
         case 0x00:
            controlRegister.W[i] = ifc_sw_dwr[2:0];
            break;
         case 0x04:
            delay;         // statusRegister is read only
            break;
         case 0x08: par
            {
               swStrPtrValue1W[i] = ifc_sw_dwr;
               swStrPtrValue2W[i] = ifc_sw_dwr;
               swStrPtrReset1[i] = 1;
               swStrPtrReset2[i] = 1;
            }
            break;
         case 0x0C:      
            swEndPtr.W[i] = ifc_sw_dwr;
            break;
         case 0x10: par
            {
               swBufferMask1W[i] = ifc_sw_dwr;
               swBufferMask2W[i] = ifc_sw_dwr;
            }
            break;
         case 0x14: par
            {
               intStrPtr.W[i] = ifc_sw_dwr;
               intEnable[i] = ifc_sw_dwr[1];
               intReset[i] = 1;
            }
            break;
         default:
            delay;
            break;
         }
      }
      else if(ifc_sw_rd == 1) 
      {
         switch (ifc_sw_addr[5:0]) 
         {
         case 0x00:
            ifc_sw_drd = adju(controlRegister.W[i], width(ifc_sw_drd));
            break;
         case 0x04:
            ifc_sw_drd = adju(statusRegister.R[i], width(ifc_sw_drd));
            break;
         case 0x08:
            if(swStrPtrReset2[i] == 0)
               ifc_sw_drd = swStrPtr.R[i];
            else
               ifc_sw_drd = swStrPtrValue1W[i];
            break;
         case 0x0C:
            ifc_sw_drd = swEndPtr.W[i];
            break;
         case 0x10: 
            ifc_sw_drd = swBufferMask1W[i];
            break;
         case 0x14: 
            ifc_sw_drd = intStrPtr.W[i];
            break;
         default : 
            ifc_sw_drd = 0x0;
            break; 
         } 
      }
      else 
         delay;
   }
}
