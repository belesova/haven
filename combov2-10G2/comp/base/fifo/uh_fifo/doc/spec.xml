<?xml version="1.0" encoding="ISO-8859-1"?>

<source>
<!-- Page name -->
<component>Unified Header FIFO</component>

<!-- Symbol picture
<symbol>hfe_symbol.fig</symbol>-->

<!-- Authors workd on -->
<authors>
       <author login="fil">Filip Hofer</author>
       <author login="korenek">Jan Korenek</author>
</authors>

<!-- Current block status -->
<status>
    UH FIFO has been tested in HW and works fine.
</status>

<!-- Features - describe functionality -->
<features>
    <version id="UHF_01_00">
        <item>
           Top level entity for 4 UH fifo components added. Every
           components is accessible via local bus.
        </item>
    </version>
    <version id="UHF_00_01">
        <item>
            Initial version of UH FIFO have been created.
        </item>
    </version>
</features>

<!-- Bugs - describe functionality -->
<bugs>
</bugs>

<!-- What have to be done -->
<todo>
</todo>

<!-- Short Block description -->
<description>
    UH FIFO is memory organised as FIFO which contain Unified Headers (UH)
    generated by HFE processor. It has 16 items and is organised as
    circular buffer. LUP reads UH and performs classification. When UH
    processing is finished, it is released.
</description>


<!-- Component interface description -->
<interface>

      <!-- Port description -->
      <port  name="RESET" dir="in" width="1">
            Global reset signal.
      </port>

      <!-- HFE interface -->
      <port  name="HFE_CLK"  dir="in"  width="1">
          HFE clock signal.
      </port>
      <port  name="HFE_RDY"  dir="out" width="1">
          Signal is activated when HFE asks for new item and at least one
          item is available.
      </port>
      <port  name="HFE_REQ"  dir="in"  width="1">
          Signal is used when HFE ask UH FIFO for new free item.
      </port>
      <port  name="HFE_WEN"  dir="in"  width="1">
          Signal controls write to the UH FIFO memory.
      </port>
      <port  name="HFE_ADDR" dir="in" width="16">
          HFE address bus.
      </port>
      <port  name="HFE_DOUT" dir="in" width="16">
          HFE data bus.
      </port>


      <!-- LUP interface -->
      <port  name="LUP_CLK"  dir="in"   width="1">
          LUP clock signal.
      </port>
      <port  name="LUP_SR_VALID" dir="out" width="1">
          Signal carry state of UH FIFO item which is addressed by LUP
          address bus.
      </port>
      <port  name="LUP_SR_CLEAN" dir="in" width="1">
          Signal is utilized to free UH FIFO items which was processed by
          LUP.
      </port>
      <port  name="LUP_ADDR" dir="in"   width="9">
          LUP address bus.
      </port>
      <port  name="LUP_DATA" dir="out"  width="32">
          LUP data bus.
      </port>


      <!-- Address decoder interface -->
      <port  name="ADC_RD"      dir="in"   width="1">
          Address decoder signal which is used for read/write operation
          recognition.
      </port>
      <port  name="ADC_ADDR"    dir="in"  width="10">
          Address decoder address bus.
      </port>
      <port  name="ADC_DO"      dir="out"  width="32">
          Address decoder data bus.
      </port>

</interface>


<!-- ************************** Operations ************************** -->
<operations>

    <init>
        <it> Component doesn't need initialization. </it>
    </init>

    <!-- Starting and stopping the LUP component -->
    <op name="Read Unified Header stored in  UH FIFO" id="UHF_OP_READ">
        <p>
            Every Unified Header, which is stored in UH FIFO componet can
            be read. Before you start Read operation, please check if you
            have stopped LUP component because local bus and LUP shares the
            same UH FIFO memory interface.
        </p>
        <p>

            If LUP is stopped, you can can choose Unified Header (UH) which
            do you want to read by base address. Base addresses list can be
            found in Address space page. Then you can simply read the UH
            and show its structure which depends on HFE program and for the
            most popular parser.hfe program is described well in
        </p>

        <p>
            CVS : liberouter/vhdl_design/units/hfe/doc/UH-structure.txt.
        </p>
    </op>

</operations>


<schemes>
    <!-- Standard Satrapa format -->
</schemes>


<!-- ************************* Address space *********************** -->
<!-- ************************* Unified header ********************** -->
<addr_space id ="UH_FIFO" name="Unified Header" main="yes">

    <reg id="UH_ITEM_00"  offset="0x0000"     access="R" words="32">
        Unified Header (0)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0080"     access="R" words="32">
        Unified Header (1)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0100"     access="R" words="32">
        Unified Header (2)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0180"     access="R" words="32">
        Unified Header (3)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0200"     access="R" words="32">
        Unified Header (4)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0280"     access="R" words="32">
        Unified Header (5)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0300"     access="R" words="32">
        Unified Header (6)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0380"     access="R" words="32">
        Unified Header (7)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0400"     access="R" words="32">
        Unified Header (8)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0480"     access="R" words="32">
        Unified Header (9)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0500"     access="R" words="32">
        Unified Header (10)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0580"     access="R" words="32">
        Unified Header (11)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0600"     access="R" words="32">
        Unified Header (12)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0680"     access="R" words="32">
        Unified Header (13)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0700"     access="R" words="32">
        Unified Header (14)
    </reg>
    <reg id="UH_ITEM_00"  offset="0x0780"     access="R" words="32">
        Unified Header (15)
    </reg>

</addr_space>


<!-- ******** Control register  ******** -->
<bit_vect ref="UH_FIFO.UH_ITEM_00" width="32">
    <description>
        Unified header register. Unified Header structure is described in
        liberouter/vhdl_design/units/hfe/doc/UH-structure.txt file which is
        stored in CVS.
    </description>
</bit_vect>


<body>

    <!-- Here is description in standard Satrapa format-->
    <h1>Unified Header FIFO</h1>

    <p>
        Unified-header is physically stored in a buffer. The buffer is
        filled by the Header Field Extractor and read by the look-up
        processor. The read and write operations have to be fully
        independent. Therefore the buffer is stored in dual port Block
        SelectRAM in the FPGA chip.
    </p>

    <p>
        <obr src="fig/buffer.fig" mag="0.9">
            UH FIFO memory organization
        </obr>
    </p>

    <p>
        The buffer consists of 16 items, each containing a Unified header
        (UH). The buffer is controlled by a status register; one bit for
        one set of registers. The bit signalizes whether the item is free
        or contains a UH. Header field extractor can write a UH to the item
        only if the bit is zero. When the UH is fully written to the
        buffer, the bit is set. The buffer is read by the look-up
        processor. It can start handling the UH only if the bit is set.
        When it finishes the work it resets the bit. This way we guarantee
        that the header field extractor never rewrites any stored UH and
        the look-up processor never processes the UH that has not been
        fully stored.
    </p>

</body>

</source>



