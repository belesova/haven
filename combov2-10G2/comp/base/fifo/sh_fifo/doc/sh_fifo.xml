<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->


<!-- Component name -->
<component>FIFO from shift registers</component>


<!-- Authors -->
<authors>
       <author login="spacekm">Michal Spacek</author>
</authors>


<!-- Features -->
<features>
	<item>Generic width</item>
	<item>Generic depth</item>
	<item>FIFO can be built from SRL16 (Virtex II 16bit shift register) or SRL32 (Virtex V 32bit shift register)</item>
</features>



<!-- Short Block description -->
<description>

	<!-- THE MOST IMPORTANT PART!!! There should be about 8 rows which
	     fully describe the component and its main functions -->

	     sh_fifo is fast synchronous FIFO built from LUT primitive SRL16 (for Virtex II designs) or SRL32 (for Virtex V designes). The shift registers are ideal for building small synchronous FIFOs - they don't use flip flops avaiable in the slide, but the are configured using Look Up Table (LUT). You can specify which register will be used to build the FIFO by setting generic parameter SRL_NUM (0 for Virtex II and 1 for Virtex V).
	

</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>

	<!-- Generic description -->
	<generic_map>
		
		<generic name="SRL_NUM" type="integer" default="0">
			Specify which register will be used - 0 means SRL16, 1 means SRL32
		</generic>
		<generic name="FIFO_DEPTH" type="integer" default="8">
			Specify the number of shift registers to be cascaded and to create the FIFO.
			The final depth of the fifo depends on the depth of the SRL component, if you choose SRL16
			you must multiply the FIFO_DEPTH by 16 (32 for SRL32) to get the real fifo depth.
		</generic>
		<generic name="FIFO_WIDTH" type="integer" default="8">
			FIFO width
		</generic>
		
	</generic_map>

	<!-- Port description -->
	<port_map>

	
		<port  name="DATA_IN" dir="in" width="FIFO_WIDTH">
			Input data
		</port>
		<port  name="WR_EN" dir="in" width="1">
			Write enable, must be high prior to rising clock to perform a write data into the fifo
		</port>
		<port name="RD_EN" dir="in" width="1">
			Read enable, must be high prior to rising clock to perform a read. Valid data are avaiable after one clock cycle after RD_EN
		</port>
		
		
		<port name="DOUT" dir="OUT" width="FIFO_WIDTH">
			Output data, valid one clock cycle after RD_EN
		</port> 
		<port name="FULL" dir="out" width="1">
			the FIFO is full and no data can be written 
		</port>
		<port name="EMPTY" dir="out" width="1">
			the FIFO is empty, no data can be read
		</port>
		<port name="DATA_COUNT" dir="out" width="LOG2(FIFO_DEPTH*(16+SRL_NUM*16))">
			count of data in the fifo, width is dependent on the FIFO_DEPTH and the type of used shift registers
		</port>
	</port_map>

</interface>



<!-- HW BODY SECTION **************************************************** -->
<!-- information for HW designers, structure should be as follow          -->
<body>
<p>
FIFO is built from cascaded shift registers. Generic parameter SRL_NUM specifies which shift register will be used, if is set to 0, SRL16 will be used, if set to 1, SRL32 (avaiable in Virtex V) will be used.
The FULL flag is generated when the FIFO is full and no more data can be written into the FIFO. For a 128-bit deep FIFO, the FULL flag is generated when data is written into the 127th address location and the Write Enable is High. The EMPTY flag signals when the FIFO is empty and no more data can be read from the FIFO. This is generated while the last address location is being read.
To perform a write, the write enable signal is driven high prior to a rising clock. Before performing a write check the FIFO to make sure it is not FULL. The address for the write is provided by the address counter. After the data has been written, the address counter increments the address by one.
To perform a read, the clocking of data into the FIFO is disabled. During each READ, the address from the address counter is decremented by one. The output data are avaiable one clock cycle after the RD_EN. To show how full the FIFO is, the address counter is also used as a data counter.

</p>

			

<h1>Frequency and Resources usage by XST</h1>

	<p>

        
	
		<tab sloupce="ccc">
			<tr>
				<th>Generic settings</th>
				<th>LUTs</th>
				<th>max frequency</th>
			</tr>
			<tr>
				<th>SRL_NUM = 0,FIFO_DEPTH = 8,FIFO_WIDTH = 8</th> 
				<td>86</td>
				<td>234.137MHz</td>
			</tr>
			<tr>
				<th>SRL_NUM = 1,FIFO_DEPTH = 8,FIFO_WIDTH = 8</th> 
				<td>85</td>
				<td>478.698MHz</td>
			</tr>

		<nazev>Chip utilization</nazev>
		</tab> 
	

	
  </p> 


<h1>Schemes</h1>
	
	<p>
		The block structure of the component is in the following figure.
		<obr src="./fig/scheme.png">sh_fifo</obr>
	</p>

	<p>
		The block structure of 128 bit depth fifo from SRL16 registers 
		<obr src="./fig/128.png">sh_fifo</obr>
	</p>

</body>

</source>
