<?xml version="1.0" encoding="ISO-8859-1"?>
<source>

<component>BRAM FIFO</component>

<authors>
   <author login="martinek">Tomas Martinek</author>
   <author login="pus">Viktor Pus</author>
</authors>

<versions>
   <version id="FIFO_BRAM_00_03">
      <item>Older version</item>
      <item>LSTBLK signal is not exactly correct</item>
      <item>EXADDR and LSTB_ADDR generic parameters</item>
      <item>Fixed data width</item>
   </version>
   <version id="NETFLOW_00_01">
      <item>New version</item>
      <item>LSTBLK signal is perfectly correct</item>
      <item>ITEMS and BLOCK_SIZE generic parameters</item>
      <item>Data width given by generic parameters DATA_WIDTH and BRAM_TYPE</item>
   </version>
</versions>

<bugs>
</bugs>

<todo>
</todo>

<description>

   BRAM FIFO component is an implementation of FIFO component composed of
   internal Virtex2 BRAM Memories. Number of items is given via generic
   parameter ITEMS (where number of BRAMs is computed during translation).
   Any data width can be reached by setting DATA_WIDTH and BRAM_TYPE
   generic parameters. Next, this Fifo component allows detection of a
   "Last Free Block" (via generic parameter BLOCK_SIZE). Exact number of
   free items is at the STATUS port.

</description>

<interface>
<generic_map>
   <generic name="ITEMS" type="integer" default="">
      Number of items in FIFO
   </generic>
   <generic name="BLOCK_SIZE" type="integer" default="0">
      Size of block used for computing of LSTBLK signal
   </generic>
   <generic name="BRAM_TYPE" type="integer" default="36">
      Type of BRAM used, only 1, 2, 4, 9, 18 or 36
   </generic>
   <generic name="DATA_WIDTH" type="integer" default="">
      Width of data stored in FIFO
   </generic>
   <generic name="AUTO_PIPELINE" type="boolean" default="false">
      If set to true, data in FIFO are automatically transfered to the output
      of the FIFO without having RD set to 1.
   </generic>
</generic_map>

<port_map>
   <port name="CLK"     dir="in"    width="1">Clock signal</port>
   <port name="RESET"   dir="in"    width="1">Reset signal</port>

   <port name="WR"      dir="in"    width="1">Write Request</port>
   <port name="DI"      dir="in"    width="DATA_WIDTH">Data Input</port>
   <port name="FULL"    dir="out"   width="1">Full signal</port>
   <port name="LSTBLK"  dir="out"   width="1">Last Block Detection</port>
   <port name="STATUS"  dir="out"   width="log2(ITEMS)+1">Number of free items</port>

   <port name="RD"      dir="in"    width="1">Read Request</port>
   <port name="DO"      dir="out"   width="DATA_WIDTH">Data Output</port>
   <port name="DV"      dir="out"   width="1">Data Valid</port>
   <port name="EMPTY"   dir="out"   width="1">Empty signal</port>
</port_map>
</interface>


<structure src="./fig/fifo_bram.fig">
   BRAM FIFO Architecture
</structure>


<schemes>
    <obr src="./fig/fifo_bram.fig">FIFO composed of BRAM.</obr>
    <obr src="./fig/fifo_bram_discard.fig">FIFO with discard feature.</obr>
</schemes>


<body>

    <h2>Specification</h2>

    <h3>FIFO_BRAM</h3>
<p>
    Write operation, EMPTY and FULL signals have the same behavioral as in
    the standard fifo component. Different bevavioral is registered during
    the Read operation and LSTBLK signal. During the Read operation the
    output data are available on the DO port 2-3 clock cycles after read
    request (RD port). This delay is caused by registered BRAM memory and
    additional register "reg_data_out" behind the multiplex. Due to this
    delay, it's usefull to utilize the "DV" port, which is set, as soon as
    the valid output data are available on the "DO" port.
</p>
<p>
   If AUTO_PIPELINE generic is set to true, data in FIFO are automatically
   transfered to the output until DV is set to 1. After that, you have to
   set RD to 1 to read next data from FIFO.
</p>
<p>
    It can be very useful to detect a situation, when last N items are
    available in the FIFO space. For this reason, the LSTBLK signal is
    generated. So the LSTBLK signal is asserted, when FIFO contains N or less
    then N free items.
</p>

    <h3>FIFO_BRAM_STATUS - STATUS port added</h3>
<p> 
    Signal STATUS detects exact number of free items in the FIFO. It
    is present only in FIFO_BRAM_STATUS entity. There are no extra 
    resources to generate STATUS signal.
    If old FIFO_BRAM entity is used, no STATUS signal is available.
</p>


    <h3>FIFO_BRAM_DISCARD - Discard block feature</h3>
<p>
    It has the same behaviour as FIFO_BRAM component but EOB and DISCARD ports
    have been added to the interface. With EOB - the last word of block is
    marked. With DISCARD, whole block is thrown away - until the EOB mark is
    encountered (word with this mark set included). Maximal number of
    blocks to hold marks for may be set by the MAX_DISCARD_BLOCKS generic 
    value. Also, STATUS signal is already present.
</p>

<p>
    FIFO with discard feature also contains FRAME_RDY signal at the read 
    interface. FRAME_RDY goes high after whole block has been written (EOB
    has been written) and it stays high until the last block word has been
    read. FRAME_RDY signal determines wether block has been fully written
    not wether FIFO contains whole block coming out from the read interface.
    That means FRAME_RDY might be high after EOB has been written, but FIFO
    might not contain whole block because it may have been partially read.
</p>


<p>
    <b>EOB/DISCARD details:</b>
    <ul>
        <li>
            DISCARD is ignored when FIFO is empty.
        </li>
        
        <li>
            When DISCARD and RD are asserted simultaneously, RD is ignored.
        </li>

        <li>
            When a block has been only partially written and DISCARD is
            asserted, FIFO is cleared and the write port disabled until EOB
            comes (but writing is enabled, only data not written).
        </li>
        
        <li>
            FIFO becomes full after maximal number of stored blocks has been
            reached.
        </li>
    </ul>
</p>

<p>
    <b>Issues:</b>
    <ul>
        <li>
            Due to the output pipeline, while reading, there is already one-two
            words stuck in the pipeline register. When DISCARD is asserted,
            these words are thrown away as part of the block being discarded.
            Problematic situation may come if these pipelined words cause the
            end of the block, so actually in FIFO, there is only the next block.
            In this case, component might discard two blocks without knowing
            about it.
        </li>

        <li>
            When DISCARD is asserted for two cycles and after the first cycle
            FIFO becomes empty, the second DISCARD will be ignored.
        </li>

        <li>
            There might be frequency problems due to the longer delay from the
            read inerface.
        </li>
    </ul>
</p>


</body>

</source>

