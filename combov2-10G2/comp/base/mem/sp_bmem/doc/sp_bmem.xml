<?xml version="1.0" encoding="ISO-8859-1"?>

<source>

<!-- Page name -->
<component>sp_bmem</component>

<!-- Authors worked on -->
<authors>
   <author login="xkobie00">Petr Kobiersky</author>
</authors>

<features>
   <item>Generic data width</item>
   <item>Generic depth</item>
   <item>Optional output register</item>
   <item>Optional pipe enable functionality</item>
</features>


<!-- Short Block description -->
<description>
   This generic component allows easily build memory composed
   of specified type of BRAMs.
</description>

<!-- COMPONENT INTERFACE ************************************************* -->
<interface>


	<generic_map>
		<generic name="DATA_WIDTH" type="integer" default="">
			Component data width.
		</generic>

		<generic name="ITEMS" type="integer" default="">
			It specify size of memory
		</generic>

		<generic name="BRAM_TYPE" type="integer" default="4">
			It specify type of building blocks. It allows values:
                        1, 2, 4, 9, 18, 36 bits. Component is compounded of this
                        types of Block Rams.
		</generic>

		<generic name="OUTPUT_REG" type="TOUTPUT_REG" default="auto">
			It place register to the output of component. Register is placed
			after multiplexor. It allows TRUE, FALSE and AUTO. When is parameter
			set to AUTO, register is placed only when is component compounded
			of more than one column.
		</generic>

		<generic name="DEBUG" type="boolean" default="false">
			Prints debug information (row count, column count,
			output register...) about component
		</generic>


	</generic_map>

	<port_map>
         <divider>Common interface</divider>
	      <port  name="RESET" dir="in" width="1">
        	    Reset
	      </port>

         <divider>Port A</divider>
	      <port  name="CLK" dir="in" width="1">
	            Clock
	      </port>

	      <port  name="PIPE_EN" dir="in" width="1">
	            Pipe enable
	      </port>

	      <port  name="RE" dir="in" width="1">
	            Read enable
	      </port>

	      <port  name="WE" dir="in" width="1">
	            Write enable
	      </port>

	      <port  name="ADDR" dir="in" width="log2(ITEMS)">
	            Address
	      </port>

	      <port  name="DI" dir="in" width="DATA_WIDTH">
	            Data in
	      </port>

	      <port  name="DO" dir="out" width="DATA_WIDTH">
	            Data out
	      </port>

	      <port  name="DO_DV" dir="out" width="1">
	            Data out valid
         </port>

	</port_map>
</interface>



<!-- BODY ************************************************* -->
<body> 
<h1>Info</h1>
<p>
   Size of the memory is specified by generic parameter ITEMS.
   Data width is specified by DATA_WIDTH. Type of Block Ram is specified
   by BRAM_TYPE. Be careful with choosig BRAM_TYPE - it have influence
   on rows and column count of composed memory. You can get information about
   structure with DEBUG set to true. When is memory composed of more
   then one column so the output multiplexor is used, it is very useful
   to use output register. In this configuration signal PIPE_EN have sense.
   When you read data using RE=1 and PIPE_EN = 1 data goes to output in second
   period. When you stop reading RE=0 and PIPE_EN = 0 data from last period
   are stocked in second pipe level. When is PIPE_EN set to 1 data goes to
   memory output.
</p>
<p>
      <obr src="./fig/block_struct.fig">
         Component structure.
      </obr>
</p>

<h1>Frequency and Resources</h1>
<p>
   If no output multiplexer is needed, then only one BlockRAM are used.
   For example, generics DATA_WIDTH=36 and ITEMS=512 will result in only
   one BRAM used.
</p>
<p>
   <tab sloupce="ccc">
   <tr>
	   <th>Generic settings</th>
	   <th>Slices</th>
	   <th>BlockRAMs</th>
   </tr>
   <tr>
      <th>ITEMS=1024, DATA_WIDTH=36, BRAM_TYPE=36, OUTPUT_REG=false</th>
      <th>20</th>
      <th>2</th>
   </tr>
   <tr>
      <th>ITEMS=2048, DATA_WIDTH=72, BRAM_TYPE=18, OUTPUT_REG=true</th>
      <th>38</th>
      <th>8</th>
   </tr>
   <nazev>Chip utilization</nazev>
   </tab>
</p>
<p>
   These values have been obtained after synthesis with Precision at C6X.
   Maximal frequency is typically over 150 MHz at C6X card.
</p>

</body>


</source>
