<?xml version="1.0" encoding="ISO-8859-1"?>
<source>
	
<!-- MAIN INFO ********************************************************** -->


<!-- Component name -->
<component>I2C SW Bridge</component>


<!-- Authors -->
<authors>
       <author login="pecenka">Tomas Pecenka</author>
       <author login="sandin">Martin Louda</author>
</authors>


<!-- Features -->
<features>
	<item>Tested in hardware (frequency 100 MHz)</item>
</features>


<!-- Short Block description -->
<description>

    This component transforms two-wire I2C bus into several signals
    providing easier bus control that can be handled by software (or
    hardware). However when using this component user is responsible for
    keeping required I2C bus timing (see I2C protocol specifications).

</description>


<!-- COMPONENT INTERFACE ************************************************ -->
<interface>

	<!-- Port description -->
	<port_map>

		<divider>Common signals</divider>		
		<port  name="CLK" dir="in" width="1">
			Global FPGA clock
		</port>
		<port  name="RESET" dir="in" width="1">
			Global reset
		</port>

        <divider>Read/Write signals</divider> 		
		<port name="WR_DATA" dir="in" width="1">
			Write data for I2C_DATA
		</port>
		<port name="WR_DATA_Z" dir="in" width="1">
			Z-buffer controlling WR_DATA; Low : bus write
		</port>
		<port name="WR_CLK" dir="in" width="1">
			Write data for I2C_CLK
		</port>
		<port name="WR_CLK_Z" dir="in" width="1">
			Z-buffer controlling WR_CLK; Low : bus write
		</port>
		<port name="WRITE" dir="in" width="1">
            Write data/clk into registers
		</port>
		<port name="RD_DATA" dir="out" width="1">
            Data read from I2C_DATA
		</port>
		<port name="RD_CLK" dir="out" width="1">
            Data read from I2C_CLK
		</port>
		
		<divider>I2C interface</divider> 
		<port name="I2C_CLK" dir="inout" width="1">
			I2C clock
		</port>
		<port name="I2C_DATA" dir="inout" width="1">
			I2C data
		</port>
		
	</port_map>

</interface>


<!-- HW BODY SECTION **************************************************** -->
<!-- information for HW designers, structure should be as follow          -->
<body>

<h1>I2C Bridge connection</h1>

	<p>
        Because of compatibility with sw tools I2C Bridge registers should
        be mapped into user component's address space as follows:
        <tab sloupce="rl">
            <tr>
                <th>bit</th>
                <th>register</th>
            </tr>
            <tr>
                <td>0</td>
                <td>RD_CLK</td>
            </tr>
            <tr>
                <td>1</td>
                <td>RD_DATA</td>
            </tr>
            <tr>
                <td>2</td>
                <td>WRITE</td>
            </tr>
            <tr>
                <td>3</td>
                <td>WR_CLK_Z</td>
            </tr>
            <tr>
                <td>4</td>
                <td>WR_CLK</td>
            </tr>
            <tr>
                <td>5</td>
                <td>WR_DATA_Z</td>
            </tr>
            <tr>
                <td>6</td>
                <td>WR_DATA</td>
            </tr>
            <nazev>Mapping of component registers</nazev>
        </tab>
	</p>
    <p>
        I2C Bridge address should be aligned to 32 bits.
    </p>

<h1>Frequency and Resources usage</h1>

	<p>

        <!--Resources usage and max. frequency by Precision-->
	
		<tab sloupce="ccc">
			<tr>
				<th>Max.frequency by Precision</th>
				<th>Frequency tested in HW</th>
			</tr>
			<tr>
				<td>200 MHz</td>
				<td>100 MHz</td>
			</tr>
		<nazev>Maximal frequency</nazev>
		</tab> 
	
  </p> 

<!--
<h1>Schemes</h1>
	
	<p>
		The block structure of the component is in the following figure.
		<obr src="./fig/i2c_sw.fig">I2C Bridge architecture</obr>
    </p>
-->


</body>

</source>
